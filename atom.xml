
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Alex Clark's Blog</title>
  <link href="https://blog.aclark.net"/>
  <updated>2018-01-30T18:16:15.777093</updated>
  <author>
    <name>Alex Clark</name>
  </author>
  <id>urn:uuid:32f9e742-2986-43c4-998a-aa555171ae26</id>
  <entry>
    <title>Python</title>
    <link href="https://blog.aclark.net/2017/06/26/saml-1-alex-clark-0/index.html"/>
    <id>urn:uuid:fba95d29-3d17-4000-9d75-155b79ee4244</id>
    <updated>2017-06-26T00:00:00</updated>
    <summary>SAML: 1, Alex Clark: 0
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2017/06/26
    :category: Django, Python

Update: OOPS looks like this one got away from me (got published prematurely). I meant to write about Django & SAML about a month ago. Here is that post finally.
Courtesy of
 
quickmeme
Intro
I don't like to give up on a technical challenge
, particularly when the progress is slow-but-consistent. It's only when I know I can't make any discernible progress easily (or at all) that I can force myself to give up. I'm not talking about giving up for the day and getting back to it. I'm talking about declaring failure and getting back to it WAY later, if at all. Well, this post is about how SAML got the better of me about one month ago. I really wanted this particular task to be successful, but I eventually had to give up and declare the task "too hard for me given the context, and possibly not even a good idea in the first place".
Because I don't explicitly mention this anywhere else in the article, I'll mention it now: SAML is used to implement "single sign on". (Cue debate on merits of this approach vs. other approaches e.g. OAuth2.)
The task
The task was to make Django act as a SAML Identity Provider (IdP)
, enough to convince a commercial service, acting as a SAML Service Provider (SP), to use it as one. While I didn't achieve the desired end result, a learned a ton of information about SAML that I never really wanted to know, but feel better and good about now that I know it.
IdP vs SP
I'm not going to go into too much detail here but for the unfamiliar, the SAML protocol defines both Identity Providers (IdP) and Service Providers (SP). SAML Identity Providers answer requests from SAML Service Providers and make the decision about whether the principal (e.g. user) is allowed to access the Service Provider.
After discovering this fact, confusion about this aspect of the SAML protocol lingered and continues to linger. Does that mean the IdP 
is
 or 
contains
 the user database? As of right now, I don't think so. But that wasn't clear initially (and still isn't, but perhaps is now "less unclear").
No, the IdP is not the user database.
 Rather, the IdP is "the thing that answers SAML requests in accordance with the protocol's definition of how to do so." But it can't hurt if the IdP needs to go no further than Django's user database to validate an SP's SAML assertion, right? I certainly thought so initially, and spent a whole lot of time trying to make it so.
XML
Turns out implementing SAML presents many challenges, one of which is one must "deal with" XML. I don't have any specific gripes about XML, but parsing XML does add a 
layer of complexity I could have done without
.
Crypto
You know what's worse than parsing XML? Signing your XML. And you know what's worse than that? 
Signing only a portion
 of it. (Lingering bitter sentiments from the me-of-one-month-ago.)
Django
First, I spent some time researching the existing available options. I took it as a "red flag" not a lot of folks seemed to be using Django as an IdP, but I thought worst case, I'd be creating an insecure-but-viable-proof-of-concept. And I got close, but lost patience when I couldn't get the commercial Service Provider to validate my SAML assertions (oh, and let's not forget my confusion about SP-initiated vs IdP-initiated logins; I eventually decided that the "flow" of IdP-initiated was simpler and focused mostly on that; SP -> IdP -> SP, vs IdP -> SP.)
Eventually 
I created five, count them five, separate repositories while tackling SAML
. Part of that proliferation-of-repositories is 
possibly
 due to some anti-branching sentiment on my part (I'm not anti-branching, but sometimes I prefer to "start clean" instead of branching):
https://github.com/aclarktest/django-saml2-sp
 (Fork of an existing repository that works great as a proof of concept along with 
https://github.com/aclarktest/django-saml2-idp
)
https://github.com/aclarktest/django-saml2-idp
 (Fork of an existing repository that works great as a proof of concept along with 
https://github.com/aclarktest/django-saml2-sp
)
https://github.com/aclarktest/django-saml2-test
 (Where most of my research occurred.)
https://github.com/aclarktest/django-samlicious
 (Let's start over with lessons learned in a new app.)
https://github.com/aclarktest/dj-sam
 (Let's start over again, with a slightly different approach. And here the effort dies; relics remain as a cautionary tale to passersby.)
Python
I found a bunch of cool Python tooling for dealing with all-things-SAML that I will make a note of here:
https://github.com/onelogin/python-saml
 (python-saml on PyPI, not to be confused with 
https://github.com/mehcode/python-saml
)
https://github.com/mehcode/python-saml
 (saml on PyPI)
https://github.com/dlitz/pycrypto
 (secure hash functions!)
TL;DR: Consider a commercial IdP like OneLogin or Auth0.</summary>
  </entry>
  <entry>
    <title>Todo</title>
    <link href="https://blog.aclark.net/2016/12/15/shout-out-to-shout-irc/index.html"/>
    <id>urn:uuid:bfd2db82-4f88-42ef-8725-95b8713fbcb2</id>
    <updated>2016-12-15T00:00:00</updated>
    <summary>A Shout Out to Shout IRC
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2016/12/15
    :category: Plone, Python

I'm back on IRC for the foreseeable future, and loving it. Thank you Shout IRC.
Backlog
A few years ago, I got old and gave up running command line IRC clients. I've run them all or at least a lot of them, including one 
whose name is almost certainly in the crosshairs of political correctness
. Most recently I ran Weechat and irssi before that. For a while, I gave up IRC completely because I couldn't be bothered. But I missed it, and nothing else seemed to suffice. I tried Slack and thought it was OK, but not IRC. I tried various web clients, but couldn't find one I could stand to use long term. Then 
Shout IRC
 came along.
Stay online
I tried Shout for the first time over a year ago, but never bothered to create a Shout account on my server. This was a mistake, since user account creation enables one of Shout's most powerful features: 
Stay online on IRC even when you log out
.
Configuration
I had gotten annoyed with having to login each time, so I stopped using Shout for a while. I heard good things about Kiwi, but was disappointed to see 
no npm release
. This led me back to Shout, which 
does have an npm release
. What follows are configuration details for 
irc.aclark.net
, for posterity. (I added 
Let's Encrypt
 at the last minute for good measure.)
AWS
EC2 t2.micro running Ubuntu 16.04.1 LTS
Ubuntu
apt-get install aptitude
aptitude update; aptitude upgrade -y
aptitude install nginx nodejs-legacy npm python python-pip
Python
sudo -H pip install dotfiles
JavaScript
sudo npm install -g shout
Certbot (Let's Encrypt)
sudo certbot certonly --manual
NGINX
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
}
server {
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    root /var/www/html;
    server_name _;
    location / {
        proxy_pass http://localhost:9000;
    }
    location /.well-known/acme-challenge/AamTqX-Ic-YERnU0RWS2X_WpszSUsi2lIoXkMYOy_Fs {
        add_header Content-Type text/plain;
        return 200 "AamTqX-Ic-YERnU0RWS2X_WpszSUsi2lIoXkMYOy_Fs.gPCswvmAzfObWoqUg6d_…";
    }
    ssl    on;
    ssl_certificate    /etc/ssl/fullchain.pem;
    ssl_certificate_key    /etc/ssl/privkey.pem;
}
Dotfiles
(I store my 
.shout
 directory, which includes my Shout & Freenode credentials, in a private dotfiles repository.)
git clone git@bitbucket.org:aclark4life/dotfiles.git Dotfiles
dotfiles -s
Todo
I'm currently running 
shout --private
 in 
screen
, but may eventually add a 
systemd
 service for it.</summary>
  </entry>
  <entry>
    <title>Open for Business</title>
    <link href="https://blog.aclark.net/2016/11/23/project-makefile-open-business/index.html"/>
    <id>urn:uuid:a8b010fb-3cc7-4ecc-821e-12b023589689</id>
    <updated>2016-11-23T00:00:00</updated>
    <summary>Project Makefile Open for Business
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2016/11/23
    :category: Plone, Python

Makefile for Python Web Development & Related Projects
A while back I was asked to speak to the Configuration Management Working Group of DC:
From that moment on, it was on: an excuse to finish and talk about the 
Makefile
 I'd been dragging around 
formerly since January
 and informerly much longer.
Finishing the Makefile
I started writing slides on the 
impressive slides.com
 then I realized I had to finished the Makefile to finish the slides. This mostly involved deciding on target names and testing target execution.
Finishing the Slides
As I mentioned above, slides.com is 
very
 nice. I had hoped to be able to build the slides myself with reveal.js, but in lieu of JavaScript skills I settled on using the slides.com editor. Later I exported and converted them to PDF with pandoc, which was not as nice (through no fault of pandoc, I'm sure; I just wish I could get a better PDF copy from the slides.com HTML export.)
Closed for Business
For month after month as I continued to tweak, the project-makefile repository README contained the following:
**DO NOT USE THIS**

At some point I started using a ``Makefile`` in my Python projects. This repository
contains that ``Makefile``.

**shrug**
Open for Business
Now it contains this:
Installation
------------

::

    curl -O https://raw.githubusercontent.com/aclark4life/project-makefile/master/Makefile


Usage
-----

::

    Usage: make [TARGET]
    Available targets:

        - ablog
        - ablog-build
        - ablog-clean
        - ablog-init
        - ablog-install
        - ablog-serve
        - co
        - commit
        - commit-auto
        - commit-edit
        - django
        - django-clean
        - django-clean-migrations
        - django-init
        - django-install
        - django-migrate
        - django-migrations
        - django-serve
        - django-shell
        - django-static
        - django-su
        - django-test
        - django-yapf
        - git-checkout-remotes
        - git-commit
        - git-commit-auto
        - git-commit-auto-push
        - git-commit-edit
        - git-push
        - grunt
        - grunt-file
        - grunt-init
        - grunt-install
        - grunt-serve
        - h
        - he
        - heroku
        - heroku-debug-off
        - heroku-debug-on
        - heroku-init
        - heroku-push
        - heroku-remote
        - heroku-shell
        - heroku-web-off
        - heroku-web-on
        - install
        - lint
        - npm
        - npm-init
        - npm-install
        - package
        - package-check-manifest
        - package-init
        - package-lint
        - package-pyroma
        - package-readme
        - package-release
        - package-release-test
        - package-test
        - pdf
        - plone
        - plone-heroku
        - plone-init
        - plone-install
        - plone-serve
        - push
        - python-clean
        - python-flake
        - python-freeze
        - python-install
        - python-lint
        - python-serve
        - python-virtualenv
        - python-wc
        - python-yapf
        - release
        - release-test
        - review
        - serve
        - sphinx
        - sphinx-build
        - sphinx-clean
        - sphinx-init
        - sphinx-install
        - sphinx-serve
        - test
        - vagrant
        - vagrant-clean
        - vagrant-down
        - vagrant-init
        - vagrant-up
        - vagrant-update
        - vm

- Check out the `slides <http://slides.com/aclark/project-makefile>`_ for more information.
Now I invite everyone to use and contribute!
https://github.com/aclark4life/project-makefile</summary>
  </entry>
  <entry>
    <title>Yup, this blog is now powered by ABlog</title>
    <link href="https://blog.aclark.net/2016/04/03/yup-this-blog-is-now-powered-by-ablog/index.html"/>
    <id>urn:uuid:69d93caf-b1f4-4511-9742-602cc9a4bfca</id>
    <updated>2016-04-03T00:00:00</updated>
    <summary>Yup, this blog is now powered by ABlog
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2016/04/03
    :category: Python

Blog functionality for Sphinx
After years of using Pelican for blogging and Sphinx for everything else, I became annoyed that Pelican's 
File metadata format
 did not match Sphinx's 
directives
. Around the same time, I noticed that 
ABlog
 had matured enough to be usable.
So late last year I began converting all my Pelican metadata to Sphinx directives, and did quite a bit of clean up as well. I'm finally finished, and now ready to present the results (
ta-da
). Thank you Pelican for all the years of service, and thank you ABlog for helping me use Sphinx for blogging!
https://github.com/aclark4life/blog</summary>
  </entry>
  <entry>
    <title>Other nice features</title>
    <link href="https://blog.aclark.net/2016/02/21/updated-django-website/index.html"/>
    <id>urn:uuid:0c9beae4-4597-433d-988f-24f00b05d9ee</id>
    <updated>2016-02-21T00:00:00</updated>
    <summary>Updated Django Website
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2016/02/21
    :category: Django, Python

One year later
Last year I wrote about developing our company website with Django:
http://blog.aclark.net/2015/01/11/new-django-website/index.html
This year, I updated the site and am again very happy with the results. Here's an overview of the interesting aspects.
Makefile
I've continued to develop Python projects using a 
Makefile
. So much so I'm now attempting to genericize the approach here:
https://github.com/aclark4life/python-project
Project/App
Last year around this time I didn't fully understand what I was doing with 
startproject
 and 
startapp
 (as evidenced by 
this insanely nested package structure
). Now I understand a little bit more, so I settled on a project called 
aclarknet
 and an app called 
website
.
REST-powered
I haven't written about it yet, but I spent a lot of time in December developing a 
time tracking and invoicing application
 (more on that later). As such, I couldn't tolerate storing identical data in multiple locations. So 
exposed the data I needed
 via Django Rest Framework 
then consumed it with requests
.
Other nice features
Django 1.9.2
Bootstrap 3.3.6
Logo created with Illustrator (IANAGA, but it was 
fun to try
).
Enjoy the 
site
 and 
code
 and 
hire my business
 in 2016!</summary>
  </entry>
  <entry>
    <title>Plock 0-5-0 is out</title>
    <link href="https://blog.aclark.net/2015/10/10/plock-0-5-0-is-out/index.html"/>
    <id>urn:uuid:8d90cd1f-9f7d-421c-ae2e-13a3e8129327</id>
    <updated>2015-10-10T00:00:00</updated>
    <summary>Plock 0-5-0 is out
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2015/10/10
    :category: Plone

Pip installs Plock. Plock installs Plone.
The Plock installer for Plone has been 
updated to support Plone 5
. To try Plone 5, just cut & paste:
pip install plock
mkdir plone
plock plone
plone/bin/plone fg
Then open 
localhost
:
Report issues 
here
.</summary>
  </entry>
  <entry>
    <title>Instructions</title>
    <link href="https://blog.aclark.net/2015/10/07/dc-python-jobs/index.html"/>
    <id>urn:uuid:b14b05b4-eaac-4e15-9e60-ec0d8a4f2f71</id>
    <updated>2015-10-07T00:00:00</updated>
    <summary>DC Python Jobs
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2015/10/07
    :category: Misc

This information may eventually live within the DC Python corpus, but for now I prefer to post-it-now-move-it-later.
DC Python, for those not familiar, is:
A thriving community full of awesome Python programmers in Washington, DC, USA (DC, MD, VA).
The name of a Meetup group with over 3,000 members.
A name commonly used to refer to our 501(c)(3) organization whose legal name is "ZPUGDC, Inc".
As the President & Executive Director of DC Python (see: #3), I try to be as helpful as possible with all aspects of Python activity in DC (along with many volunteers). 
That includes helping Python programmers find jobs and employers find Python programmers.
Ideally we'd have a professional job board, but that would require a lot of effort from a lot of volunteers. In the meantime, ever since it was suggested by Gloria W from the NYC Python Meetup, we've been using Meetup's message boards to perform a similar function.
This has worked surprisingly well however there 
are
 some issues. In this post, I will explain how to use DC Python's "Job Board" according to guidelines established by our community.
The 
DC Python Job Board
 features:
A board for employers seeking Python programmers and vice versa
.
The #1 function of the board (and biggest consumer of my time spent answering emails) is to serve employers seeking Python programmers. "Employers" 
can
 and often 
does
 include professional recruiters.
I've always found it awkward to explain the procedure, but have gone several years without documenting it properly (there is an early version of it 
here
). No more!
Instructions
Please follow these rules to post to the DC Python Job Board
.
Join the DC Python Meetup: 
http://www.meetup.com/DCPython/join/
.
Create a job posting: 
http://www.meetup.com/DCPython/messages/boards/forum/617991
.
Send a link to your post to the DC Python mailing list: 
DCPython-list@meetup.com
.
Include [JOB] in the subject line, some brief introductory text, a link to your post & nothing else. E.g.
Wed Oct  7 16:45:52 EDT 2015
From: aclark@aclark.net
To: DCPython-list@meetup.com
Subject: [JOB] ACLARK.NET, LLC seeking Python Web Developer

Hi DC Python,

My name is Alex Clark and I am the President of ACLARK.NET, LLC: the most awesome Python shop in Washington, DC, USA.
I am interested in hiring a Python web developer to fill an awesome position working directly for me:

    - http://www.meetup.com/DCPython/messages/boards/thread/41146492

I hope to hear from you soon!

Alex
In your email to the list please do not include:
The full text of the job listing
Links to external job postings
Also please send mail to the list with the 
same email address
 you used to join Meetup, else 
Meetup won't accept it
.
Good luck!</summary>
  </entry>
  <entry>
    <title>Don't sudo pip install</title>
    <link href="https://blog.aclark.net/2015/10/05/dont-sudo-pip-install/index.html"/>
    <id>urn:uuid:fca7a001-196f-48ba-ade9-23cadc8cd060</id>
    <updated>2015-10-05T00:00:00</updated>
    <summary>Don't sudo pip install
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2015/10/05
    :category: Misc

How many times have you seen this?</summary>
  </entry>
  <entry>
    <title>Pillow 3-0-0 is Out</title>
    <link href="https://blog.aclark.net/2015/10/03/pillow-3-0-0-is-out/index.html"/>
    <id>urn:uuid:5661d47e-20fa-4253-ad40-cf51d13084ba</id>
    <updated>2015-10-03T00:00:00</updated>
    <summary>Pillow 3-0-0 is Out
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2015/10/03
    :category: Pillow, Python

Pillow is the friendly PIL fork by Alex Clark and Contributors. PIL is the Python Imaging Library by Fredrik Lundh and Contributors.
The 
Pillow Team
  is excited to announce the release of Pillow 3.0.0. While "3 is just a number after 2", there are some 
significant changes in this release all users should be aware of
:
LibJpeg and Zlib are Required by Default
Deprecated Methods
I'm particularly happy to see libjpeg & zlib required; this will avoid many-a-broken-installation in the future. 
PIL is of little practical value when installed without JPEG support
, yet this has been the default for over 20 years. No more! Thanks to wiredfool for 
spearheading this change
.
For more goodness, please see the release notes & changelog:
http://pillow.readthedocs.org/en/3.0.x/releasenotes/3.0.0.html
https://github.com/python-pillow/Pillow/blob/3.0.x/CHANGES.rst#300-2015-10-01
Lastly, we're approaching 10 million downloads:
$ vanity -q pillow
Pillow has been downloaded 9,906,841 times!
An exciting milestone!
Thanks to all the developers & users of PIL & Pillow. Enjoy the 3.0.0 release, and as always 
report'em if you got'em and we'll fix'em
.
<a href="https://gratipay.com/pillow/">
  <img alt="Support via Gratipay" src="https://cdn.rawgit.com/gratipay/gratipay-badge/2.3.0/dist/gratipay.png"/>
</a></summary>
  </entry>
  <entry>
    <title>Report issues</title>
    <link href="https://blog.aclark.net/2015/06/28/pillow-2-9-0-is-almost-out/index.html"/>
    <id>urn:uuid:b9e4baf5-bfa1-4fad-8b47-ac25290c8ffb</id>
    <updated>2015-06-28T00:00:00</updated>
    <summary>Pillow 2-9-0 Is Almost Out
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2015/06/28
    :category: Pillow, Python

Pillow 2.9.0 will be released on July 1, 2015.
Pre-release
Please help the 
Pillow Fighters
  prepare for the Pillow 
2.9.0
 release by downloading and testing this pre-release:
https://github.com/python-pillow/Pillow/archive/2.9.0.dev2.zip
Report issues
As you might expect, we'd like to avoid the creation of a 
2.9.1
 release within 24-48 hours of 
2.9.0
 due to any unforeseen circumstances. If you suspect such an issue to exist in 
2.9.0.dev2
, please let us know:
https://github.com/python-pillow/Pillow/issues
Thank you!</summary>
  </entry>
  <entry>
    <title>Opinionated</title>
    <link href="https://blog.aclark.net/2015/06/27/plone-on-heroku/index.html"/>
    <id>urn:uuid:56cdb87d-e292-4541-9b9e-af676c7003af</id>
    <updated>2015-06-27T00:00:00</updated>
    <summary>Plone on Heroku
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2015/06/27
    :category: Buildout, Plone

Dear Plone, welcome to 2015
Picture it. The year was 2014. I was incredibly moved and inspired by this blog entry:
http://www.niteoweb.com/blog/dear-plone-welcome-to-2014
Someone had finally done it. (
zupo
 in this case, kudos!) Someone had finally beat me to implementing the dream of 
git push heroku plone
. And I could not have been happier.
But something nagging would not let go: I still 
didn't fully understand how the buildpack worked
. Today I'm happy to say: that nag is gone and I now fully understand how Heroku buildpacks work… thanks to… wait for it… a 
Buildpack for Plock
.
Plock Buildpack
Duplicate implicit target name: "plock buildpack".
There's a lot of the same things going on in both the 
Plone Buildpack
 and the 
Plock Buildpack
, with some exceptions.
Experimental
The 
Plock buildpack is highly experimental, still in development and possibly innovative
. Here's what it currently does:
Configures Python user site directory in Heroku cache
Installs setuptools in user site
Installs pip in user site
Installs Buildout in user site
Installs Plone in cache
Copies cache to build directory
Installs a portion of "user Plone" (the Heroku app's buildout.cfg) in the build directory (not the cache)
Relies on the app to install the remainder (the Heroku app's heroku.cfg). 
Most importantly the app runs Buildout which finishes quickly thanks to the cache & configures the port which is only available to the app (not the buildpack.)
Here's 
an example
:
# buildout.cfg
[buildout]
extends = https://raw.github.com/plock/pins/master/plone-4-3

[user]
packages = collective.loremipsum
# heroku.cfg
[buildout]
extends = buildout.cfg

[plone]
http-address = ${env:PORT}
# Procfile
web: buildout -c heroku.cfg; plone console
Opinionated
The Plock Buildpack is built on Plock, an "opinionated" installer for Plone. It may eventually use 
Plock
 itself, but currently only uses 
Plock Pins
.</summary>
  </entry>
  <entry>
    <title>Notes</title>
    <link href="https://blog.aclark.net/2015/06/05/pillow-2015-report/index.html"/>
    <id>urn:uuid:386d9217-1e90-4898-a1d0-eb73b5c1abcf</id>
    <updated>2015-06-05T00:00:00</updated>
    <summary>Pillow 2015 Report
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2015/06/05
    :category: Pillow, Python

Pillow is the friendly PIL fork by Alex Clark and Contributors. PIL is the Python Imaging Library by Fredrik Lundh and Contributors.
The state of the Pillow
Pillow Fighter #2 Eric Soroos had some time constraints recently so I managed the Pillow 2.8 release. While preparing the release I also reviewed and updated the entire project, including:
Issues
Pull Requests
Documentation
Website
July of 2015 will mark Pillow's 5th anniversary and as of 2015, PIL is 20 years old. In early 2015, the state of the Pillow is good. Here are some statistics:
Over 
5.5 million PyPI downloads
.
About 
36 distributions
 uploaded with each release, including Windows Eggs/Exes/Wheels, OS X Wheels and source distributions.
4 core contributors AKA Pillow Fighters, including the recently added Alexander Karpinsky (AKA 'homm').
Over 
130 total contributors
.
66 open issues (431 closed).
12 open pull requests (672 closed).
Issues
All issues were pruned, including:
Applying labels and milestones
Changing state when appropriate
Asking for status updates
At this time, most if not all issues have at least one label e.g. 
"bug"
 and many have milestones configured e.g. "2.9.0". The most meaningful milestones designate either "this release" or "next release" or "future". The most meaningful labels designate "needs code review or tests" or "bug or enhancement" or "question".
Pull Requests
All mergable pull requests were merged just prior to the 2.8.0 release. Of the remaining open pull requests, most 
need code review
 and the rest are experimental or in progress.
Documentation
Pillow's documentation is now sizeable, a large part of which was forked from the PIL handbook and some of which is created automatically by Sphinx. The remainder is new and was the focus of recent updates 
1
, 
2
, 
3
:
https://github.com/python-pillow/Pillow/blob/master/README.rst
https://github.com/python-pillow/Pillow/blob/master/CONTRIBUTING.md
https://github.com/python-pillow/Pillow/blob/master/RELEASING.md
http://pillow.readthedocs.org/installation.html
Website
Finally, the website received some much needed attention. We're currently using a theme provided by GitHub Pages, and minimal effort is invested to maintain it, but we may be 
interested in building a new one
.
Notes
1
https://github.com/python-pillow/Pillow/pull/1175
2
https://github.com/python-pillow/Pillow/pull/1179
3
https://github.com/python-pillow/Pillow/pull/1181
<br />
<script data-gratipay-username="aclark4life" src="//grtp.co/v1.js"></script></summary>
  </entry>
  <entry>
    <title>Plone Add-On Development For Command-Line Savvy Developers</title>
    <link href="https://blog.aclark.net/2015/06/01/plone-add-on-development-for-command-line-savvy-developers/index.html"/>
    <id>urn:uuid:f158b640-a598-4090-b0fd-939f82e91a1d</id>
    <updated>2015-06-01T00:00:00</updated>
    <summary>Plone Add-On Development For Command-Line Savvy Developers
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2015/06/01
    :category: Plone

With Plone 5 heating up, it's time for me to go all-in again on Plone.
With Plone 5 heating up, it's time for me to go all-in again on Plone. To that end, here's a new tutorial for 
command-line savvy developers who may be totally unfamiliar with Python but want to learn Plone
. This time, in the form of an embedded Gist:
<script src="https://gist.github.com/aclark4life/ffcea3a79b6339591c24.js"></script>
Check out the results here: 
https://github.com/aclark4life/Plone-Add-On-Development-For-Command-Line-Savvy-Developers</summary>
  </entry>
  <entry>
    <title>Footnotes</title>
    <link href="https://blog.aclark.net/2015/04/26/plock-rocks/index.html"/>
    <id>urn:uuid:28033785-5719-4639-a655-ca2f0a8eb5ed</id>
    <updated>2015-04-26T00:00:00</updated>
    <summary>Plock Rocks
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2015/04/26
    :category: Buildout, Plone

Pip installs Plock. Plock installs Plone.
Understanding Plock
To understand Plock, you must understand:
The undisputed complexity of the Plone stack 
1
.
My desire to simplify, clarify and reduce-to-bare-elements everything I touch.
My willingness to mask complexity when eliminating it is not possible, despite the risk of contributing to it.
Pyramid author Chris McDonough 
2
 once made a comment a long time ago to the effect: "Let's stop piling more crap on top of Plone" and that sentiment still resonates today. That's why even though I love small and useful tools like Plock, it pains me to know what Plock is doing "under the hood" 
7
. Nevertheless, I felt compelled to write it because not having it is worse.
Before I tell you what Plock is 
8
, let me briefly describe what Plone is.
What is Plone, really?
What is the complexity I mention above? Briefly, with as few loaded statements as possible:
Zope2
 "application server". This is something you can 
pip install
 but the results will not be usable 
3
.
Zope2 add-ons
 AKA "products", most notably the Zope2 Content Management Framework (CMF). This is something you install on top of Zope2 (conceptually but not literally, 
pip install Products.CMFCore
) that provides typical content management features e.g. personalization, workflow, cataloging, etc.
Zope3
 technologies e.g. the Zope Component Architecture (ZCA). These are things that are included-or-integrated with Zope2 and Plone. 
4
Buildout
 technologies e.g. setuptools, console scripts, recipes, extensions, etc. You can't easily build Plone without them, so we may as well declare them as dependencies.
Plone
 technologies. Plone was originally known as a "skin for CMF" but has become much more than that.
Archetypes
 Legacy content type framework.
Dexterity
 Modern content type framework based on modern Zope concepts e.g. "Reuse over reinvention".
Diazo
 Modern theming engine based on XSLT that "maps Plone content to generic website themes."
In total, if you 
pip install Plone
 over 200 Python packages are installed 
5
.
What is Plock, really?
OK now it's time to explain Plock. Plock is something:
you 
install from PyPI
 via 
pip install plock
. "Pip installs packages. Plock installs Plone."
you use to 
install Plone
 without having to know about tarballs or Buildout.
you use to 
install Plone add-ons
 without having to know about Buildout.
In one sentence: Plock runs Buildout so you don't have to, at least initially.
First steps with Plock
Step #1
The first step with Plock 
9
 is that light bulb moment when you say to yourself: "I've heard that Plone is the ultimate open source enterprise CMS and I'd love to try it!" But you aren't willing to download a compressed archive and run the installer nor are you willing to 
pip install zc.buildout
 and figure the rest out for yourself. Enter Plock.
Step #2
The second step with Plock is knowing that it exists you can install it with: 
pip install plock
.
Step #3
The third step with Plock is using it to install Plone:
$ plock plone
Creating virtualenv... (plone)
Installing buildout...
Downloading installer (https://launchpad.net/plone/4.3/4.3.4/+download/Plone-4.3.4-r1-UnifiedInstaller.tgz)
Unpacking installer...
Unpacking cache...
Installing eggs...
Installing cmmi & dist...
Configuring cache...
Running buildout...
Done, now run:
  plone/bin/plone fg
Now Plock's work is done; visit the following URL: 
http:://localhost:8080
 and you should see:
Create a Plone site:
Start using Plone:
Next steps with Plock
Plock is more than just a way to install the latest stable version of Plone quickly and easily. It's also a way to find and install Plone add-ons quickly and easily, and a way to install almost any version of Plone including the upcoming Plone 5 release.
Installing Add-ons
Step #1
Duplicate implicit target name: "step #1".
List all Plone-related packages on PyPI:
$ plock -l
1) 73.unlockItems                           - A small tool for unlocking web_dav locked item in a plone portal.
2) actionbar.panel                          - Provides a (old) facebook style action panel at the bottom of your  Plone site
3) adi.init                                 - Deletes Plone's default contents
4) adi.samplecontent                        - Deletes Plone's default content and adds some sample content
5) adi.slickstyle                           - A slick style for Plone portals, easily extendable for your own styles.
6) affinitic.simplecookiecuttr              - Basic integration of jquery.cookiecuttr.js for Plone 3
7) anthill.querytool                        - GUI for AdvancedQuery with some extensions - searching the easy way for Plone
8) anthill.skinner                          - Skinning for plone made easy
9) anz.dashboard                            - Plone netvibes like dashboard implementation
10) anz.ijabbar                              - Integrate iJab(an open source XMPP web chat client recommended by xmpp.org) to your plone site.
…
1,352) zopeskel.diazotheme                      - Paster templates for Plone Diazo theme package
1,353) zopeskel.niteoweb                        - Paster templates for standard NiteoWeb Plone projects
1,354) zopyx.ecardsng                           - An ECard implementation for Plone
1,355) zopyx.existdb                            - Plone-ExistDB integration
1,356) zopyx.ipsumplone                         - Lorem ipsum text and image demo content for Plone
1,357) zopyx.multieventcalendar                 - A multi-event calendar for Plone 3.X
1,358) zopyx.plone.cassandra                    - Show all assigned local roles within a subtree for any Plone 4 site
1,359) zopyx.plone.migration                    - Export/import scripts for migration Plone 2+3 to Plone 4
1,360) zopyx.smartprintng.plone                 - Produce & Publisher server integration with Plone
1,361) zopyx.together                           - Plone integration with together.js
Step #2
Duplicate implicit target name: "step #2".
Plock currently only supports the initial creation of 
buildout.cfg
, so if you have already run 
plock
 once and you want to install add-ons you'll have to use 
-f
 to overwrite 
buildout.cfg
.
Pick a few interesting things and install them:
$ plock plone -i "Products.PloneFormGen collective.plonetruegallery eea.facetednavigation"
Creating virtualenv... (plone)
Installing buildout...
Downloading installer (https://launchpad.net/plone/4.3/4.3.4/+download/Plone-4.3.4-r1-UnifiedInstaller.tgz)
Unpacking installer...
Unpacking cache...
Installing eggs...
Installing cmmi & dist...
Configuring cache...
Installing addons...
- https://pypi.python.org/pypi/Products.PloneFormGen
- https://pypi.python.org/pypi/collective.plonetruegallery
- https://pypi.python.org/pypi/eea.facetednavigation
Running buildout...
Done, now run:
  plone/bin/plone fg
Now you should see your add-ons available in Plone:
Upgrading Plone
Step #1
Duplicate implicit target name: "step #1".
Realize Plock has created a 
buildout.cfg
 file you can edit with a text editor.
Step #2
Duplicate implicit target name: "step #2".
Also realize Plock hosts 
Buildout configuration files called Pins
 you can 
extend
 from your local 
buildout.cfg
 file 
10
.
Step #3
Duplicate implicit target name: "step #3".
Edit your 
buildout.cfg
 file. Change the first 
extends
 URL from:
[buildout]
extends =
    https://raw.github.com/plock/pins/master/plone-4-3
#    https://raw.github.com/plock/pins/master/dev
To:
[buildout]
extends =
    https://raw.github.com/plock/pins/master/plone-5-0
#    https://raw.github.com/plock/pins/master/dev
Run Buildout and start Plone:
$ bin/buildout
$ bin/plone fg
Enjoy the Plone 5 running man:
TL;DR
Cut and paste this into a terminal:
pip install plock; plock plone; plone/bin/plone fg
Now open 
http://localhost:8080
 and happy Ploning.
Plock 0.3.0 is out! Install with
 
pip install plock
 
and report issues here:
 
https://github.com/plock/plock/issues
.
Footnotes
1
Whether or not dealing with the complexity is worth it, I will not address. Suffice it to say, plenty of folks still use and care about Plone and with a Plone 5 release pending, there is excitement building.
2
He probably made it many times, and rightfully so.
3
You can create an "instance" after 
pip install zope2
 with 
bin/mkzopeinstance
 but 
$INSTANCE/bin/runzope
 fails with 
ImportError: cannot import name _error_start
 probably due to mismanaged package versions. Maybe we can fix this with version specs included in a dummy package's 
setup.py
?
4
The integration is 
not
 seemless, an undisputed fact as far as I know.
5
235
7
Creating and executing a 
buildout.cfg
 file for the end user. Buildout configuration files are written in INI-style text. Ideally the end user sees this file and says "Ah, now I understand how this works."
8
I've also 
covered
 
Plock
 
before
 
here
.
9
As someone familiar with Python and a UNIX shell already, because that is the market I like to serve.
10
Yes, there is a security and/or reliability issue with doing this; you are clearly trading security and reliability for convenience.
<br />
<script data-gratipay-username="aclark4life" src="//grtp.co/v1.js"></script></summary>
  </entry>
  <entry>
    <title>Please Do My Homework</title>
    <link href="https://blog.aclark.net/2015/02/10/please-do-my-homework/index.html"/>
    <id>urn:uuid:a71cf17c-cb29-4acb-aa3a-70fe83256ade</id>
    <updated>2015-02-10T00:00:00</updated>
    <summary>Please Do My Homework
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2015/02/10
    :category: Misc

Reminiscent of A Simple Printer of Nested Lists.
Reminiscent of 
this phenomenon
, I'm slowly being driven insane by Redditors asking 
/r/Python
 to do their homework for them. E.g.
In principle, and putting aside 
/r/learnpython
, I have no problem with Redditors asking questions on /r/Python that are better suited to /r/learnpython. E.g.
But there is something about the current proliferation of homework questions on /r/Python that I find offensive.
Perhaps it is due to:
Duplicate explicit target name: "/r/python".
1.) Less meaningful content. I read 
/r/Python
 for Hacker News-like stories about Python. The more poorly written homework questions, the less meaningful content.
2.) No prior meaningful attempt to resolve the issue. E.g. "Ive tried looking online, but to no avail [sic]." What did you try? How did that attempt fail?
So now I feel compelled to try and discourage such posts and 
encourage more meaningful posts
. If you learn nothing else in school, you should 
learn how to learn
. It's not the answer to the question that matters, it's 
how you get there
. No other aspect of you answering a question or completing an assignment is as important as you 
thinking for yourself about how to do it
. This is almost the entire point of higher education: to learn 
how to function in the real world
.
In the real world, you cannot say to your friends and/or coworkers:
My boss is such a jerk. If you could just give me a working example of how to do my job, that would be awesome! Lolz.
So please, /r/Python, let's 
start asking more meaningful questions
. And if there is anything I can do to help, please let me know.</summary>
  </entry>
  <entry>
    <title>Overall</title>
    <link href="https://blog.aclark.net/2015/01/11/new-django-website/index.html"/>
    <id>urn:uuid:d2a4cce6-0b4c-4ddc-b4d3-d91c352ced9f</id>
    <updated>2015-01-11T00:00:00</updated>
    <summary>New Django Website
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2015/01/11
    :category: Django, Python, Pyramid

After a series of Django gigs in 2014, I had the urge to redevelop our company website in Django; I am very happy with the results.
This overview is roughly in order of development from start to finish. And since I am a "packaging guy", I will take this opportunity to comment on miscellaneous packaging issues too*.
Same theme, different backend
The Pyramid version of aclark.net was almost two years old and needed an overhaul. Django appeared attractive because:
I know Django, but I don't know enough Django. Like with Pyramid and Plone before, I learned a lot of Django while developing this site over the last few weeks.
There was no "content" with the previous (Pyramid) site. The idea of putting my "content" in Django models was appealing to me.
The new 
Django project
 website is awesome! An awesome website makes me want to build another awesome website with an awesome web framework. Awesome.
I hate code generators
I typically hate using code generators, full stop. But somehow Django's 
startproject
 and 
startapp
 don't make me want to vomit. So I used them in an organic 
1
 way, to make some 
obnoxiously long package names
, and I 
miraculously
 don't hate the results! This can only mean:
I am more tolerant of boilerplate code when learning a new framework, and/or:
The process of creating the boilerplate code and the resulting boilerplate are so elegant/minimalistic that my insatiable desire for elegance/minimalism is at least partially satisified.
No Postgres? No problem
The idea of having to develop locally with Postgresql (or some other "real" database) feels "heavy" to me. With sqlite, I don't have to worry about database setup until I'm ready to worry about database setup 
2
.
I even pushed to Heroku with the sqlite database checked in, until I was ready to deploy Postgres. And I still use sqlite locally.
Bootstrap all the things
Sure Bootstrap is ubiquitious now, but it remains attractive nonetheless. One of the first tasks I performed was add 
django-admin-bootstrapped
 to my 
INSTALLED_APPS
 
3
.
And because it's 2015, I Bower-installed Bootstrap and Fontawesome for my theme development.
Make like a tree and file
Lately I've gotten into the habit of using good-ol' Make to automate various tasks 
4
. This project was no exception:
dump:
    curl -o latest.dump `heroku pgbackups:url`
push:
    git push
    git push heroku master
sync:
    heroku run python aclarknet/manage.py syncdb
publish:
    git commit -a -m "Update"
Add-ons, Apps, Eggs, Distributions, Packages, Products, Wheels
I am 
literally
 annoyed by the 
figurative
 abomination that is Python packaging terminology. The proliferation of terms is understandable though because of the many layers of 
technology
, each with its own 
terminology
, that may or may not overlap:
The Python language
Various packaging frameworks
Software written in Python
And all of that was just so I could tell you I pip-installed the following:
Django
Pillow
django-admin-bootstrapped
django-cumulus
dj-database-url
dj-static
gunicorn
psycopg2
-e aclarknet
Buildout, Conda, easy_install, pip
On a related subject, why do I have a 
setup.py
? I get the feeling that Django projects in the wild sometimes have one and sometimes don't. And the Django documentation 
has only a few mentions of setup.py
. So why do I have one?
In short, because I want my code in 
sys.path
. I have another feeling that when Django projects/apps/etc don't have setup.py files, they are somehow manipulating sys.path manually to include themselves. There is 
slightly more mentioning of sys.path
 in Django's documentation, at least.
Anyway, I use setup.py because I'm familiar with setuptools.
Contact Form
Enough packaging rants, back to the rest of the Django story.
Every business website needs a contact form, right? And contact forms are tedious and boring to create, right? Yes and yes. That's why I thought using 
django-contact-form
 would be a good idea. Unfortunately I ran into an issue I couldn't easily work around, so I gave up and 
made my own
 
5
.
ORM I really on my own?
That's right. After adding an 
ImageField
 I expected the image to be stored in the database and not the file system, and I'm not ashamed. Since that was not the case, I ended up using 
django-cumulus
 
6
.
Overall
Overall, this was a great experience. As such, I'm now considering another 
pythonpackages.com
 reboot with Django; to further exercise my Django chops and fullfill the packaging-automation-vision I've had since late 2011.
Please let me know your reaction to my experiences in the comments.
1
django-admin startproject aclarknet; cd aclarknet/aclarknet; django-admin startapp aclarknet
2
Granted, the perceived heaviness is much worse than the 
actual
 burden of "real" database setup which is admittedly fairly trivial: 
brew install postgres
.
3
The Django admin without Bootstrap reminds me of the ZMI without Bootstrap, which 
I also don't like
.
4
Embarrassingly, I create the tabs with 
s/    /\t/
 because my tabstop is set to 4 spaces. Maybe I should be change my tabstop setting each time?
5
Something to do with Sendgrid integration, certainly not django-contact-form's fault!
6
Which is another story. First I tried 
django-storages
 only to discover Rackspace Cloud Files support moved to cumulus (or started in cumulus and moved back?) Then 
django-cumulus
 
almost
 worked but not quite. Rackspace Cloud Files returned a URL but upload failed. So I manually uploaded all the files to Rackspace Cloud Files as a workaround.</summary>
  </entry>
  <entry>
    <title>Packt is Having a Sale</title>
    <link href="https://blog.aclark.net/2015/01/05/packt-is-having-a-sale/index.html"/>
    <id>urn:uuid:d8fb8a62-f3e0-4cc9-95b6-909abed83255</id>
    <updated>2015-01-05T00:00:00</updated>
    <summary>Packt is Having a Sale
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2015/01/05
    :category: Misc

Happy new year!
For those who haven't heard, PACKT is having a $5 "bonanza". 
Pick up some $5 Python books
 while you can! E.g.:
Sale ends tomorrow, 
check it out
!</summary>
  </entry>
  <entry>
    <title>Pillow Runs Itself</title>
    <link href="https://blog.aclark.net/2014/10/02/pillow-runs-itself/index.html"/>
    <id>urn:uuid:804703ed-bb3f-4270-a178-3b3c23712c72</id>
    <updated>2014-10-02T00:00:00</updated>
    <summary>Pillow Runs Itself
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2014/10/02
    :category: Pillow, Python

As of Pillow 2.6.0, the Pillow project almost completely runs itself!
Of course when I say "runs itself" I mean "runs without me", which is what 
every open source project lead hopes for
. For the first time ever, I was able to:
Turn off GitHub Watching until two weeks before the release.
Not run 
setup.py upload
 or 
twine upload
 myself.
Watch in awe as Pillow Men #s 2 & 3 did all the work. [1]
Kudos to these gentlemen for making my life easier and for continuing to provide the Python community with a featureful, modern & secure Python Imaging Library. Additionally 
thanks to all the contributors from all over the world
 who continue to develop and improve Pillow. I used to keep a list, but now there are 
too many to keep track of
. Oh and lastly, 
2.6.0 is out
! Enjoy the release & please 
report issues here
.
1
Eric Soroos
 & 
Hugo
 respectively. Additional thanks to Christoph Gohlke for 
Windows Eggs, Exes, Wheels
, Matthew Brett for 
OS X Wheels
, and Steve Johnson for 
Sphinx Documentation
.
P.S. New theme! Thanks 
Pure Pelican Theme
.</summary>
  </entry>
  <entry>
    <title>Acknowledgements</title>
    <link href="https://blog.aclark.net/2014/07/05/pillow-2-5-0-is-out/index.html"/>
    <id>urn:uuid:ae17f1f2-5043-4b13-90e8-bf340005252e</id>
    <updated>2014-07-05T00:00:00</updated>
    <summary>Pillow 2-5-0 is Out
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2014/07/05
    :category: Pillow, Python

Pillow is the friendly PIL fork by Alex Clark and Contributors. PIL is the Python Imaging Library by Fredrik Lundh and Contributors
Since Pillow 2.0 the Pillow Team has adopted a quarterly release cycle; as such, Pillow 2.5.0 is out! Here's what's new in this release:
2.5.0 (2014-07-01)
Imagedraw rewrite
[terseus, wiredfool]
Add support for multithreaded test execution
[wiredfool]
Prevent shell injection #748
[mbrown1413, wiredfool]
Support for Resolution in BMP files #734
[gcq]
Fix error in setup.py for Python 3
[matthew-brett]
Pyroma fix and add Python 3.4 to setup metadata #742
[wirefool]
Top level flake8 fixes #741
[aclark]
Remove obsolete Animated Raster Graphics (ARG) support
[hugovk]
Fix test_imagedraw failures #727
[cgohlke]
Fix AttributeError: class Image has no attribute 'DEBUG' #726
[cgohlke]
Fix msvc warning: 'inline' : macro redefinition #725
[cgohlke]
Cleanup #654
[dvska, hugovk, wiredfool]
16-bit monochrome support for JPEG2000
[videan42]
Fixed ImagePalette.save
[brightpisces]
Support JPEG qtables
[csinchok]
Add binary morphology addon
[dov, wiredfool]
Decompression bomb protection
[hugovk]
Put images in a single directory
[hugovk]
Support OpenJpeg 2.1
[al45tair]
Remove unistd.h #include for all platforms
[wiredfool]
Use unittest for tests
[hugovk]
ImageCms fixes
[hugovk]
Added more ImageDraw tests
[hugovk]
Added tests for Spider files
[hugovk]
Use libtiff to write any compressed tiff files
[wiredfool]
Support for pickling Image objects
[hugovk]
Fixed resolution handling for EPS thumbnails
[eliempje]
Fixed rendering of some binary EPS files (Issue #302)
[eliempje]
Rename variables not to use built-in function names
[hugovk]
Ignore junk JPEG markers
[hugovk]
Change default interpolation for Image.thumbnail to Image.ANTIALIAS
[hugovk]
Add tests and fixes for saving PDFs
[hugovk]
Remove transparency resource after P->RGBA conversion
[hugovk]
Clean up preprocessor cruft for Windows
[CounterPillow]
Adjust Homebrew freetype detection logic
[jacknagel]
Added Image.close, context manager support.
[wiredfool]
Added support for 16 bit PGM files.
[wiredfool]
Updated OleFileIO to version 0.30 from upstream
[hugovk]
Added support for additional TIFF floating point format
[Hijackal]
Have the tempfile use a suffix with a dot
[wiredfool]
Fix variable name used for transparency manipulations
[nijel]
Acknowledgements
With every release, there are notable contributions I must acknowledge:
Thanks to Stephen Johnson for contributing 
http://pillow.readthedocs.org
, we continue to rely on & extend this resource.
Thanks to Christopher Gohlke for producing Windows Egg, Exe, and Wheel distributions.
Thanks to Matthew Brett for producing OS X Wheels (for the first time ever!)
Thanks to Eric Soroos for his contributions and serving as "Pillow Man #2" (2nd in command).
Welcome to Hugo VK who has joined the Pillow Team & contributed significantly to this release.
Thanks to all the remaining unnamed contributors! We appreciate every commit.
Enjoy Pillow 2.5.0 & please report issues here: 
https://github.com/python-imaging/Pillow/issues</summary>
  </entry>
  <entry>
    <title>Thanks</title>
    <link href="https://blog.aclark.net/2014/06/18/plone-5-0-alpha2-is-here/index.html"/>
    <id>urn:uuid:884422e3-0806-4a39-9347-cfeaa489d996</id>
    <updated>2014-06-18T00:00:00</updated>
    <summary>Plone 5 Alpha 2 is Here
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2014/06/18
    :category: Plone, Pyramid

This post is long overdue since Plone 5 alpha 2 was released on 2014-04-20!
It is also too short. I may do a followup blog entry to review more features, depending on how well this one is received. I also want to talk more about Plock.
When Plone 4 alpha 1 was released, I was so excited I immediately 
ran it in production
. Now-a-days I use 
Pyramid for aclark.net
 but I still get excited about new Plone releases.
As such, I finally got around to testing the latest Plone 5 alpha with 
my deployment stack
 and the results were very impressive, so I thought I'd share.
Hosted configuration
Because of the "muscle memory" I've built up over the years doing this, I always install Plone in development and production via my 
hosted configuration files
. If you are not a developer you may instead prefer the 
Unified Installer, VirtualBox/Vagrant installer or OS X Lion/Mountain Lion/Mavericks Binary Installer
 otherwise follow along 
1
:
$ pip install tmp virtualenv
$ cd `tmp`
$ virtualenv .
$ bin/pip install zc.buildout
$ bin/buildout init
Edit 
buildout.cfg
 to contain:
[buildout]
extends = https://raw.github.com/plock/pins/master/plone-5-0
Run Buildout and start Plone:
$ bin/buildout
$ bin/plone fg
Create Plone Site
The first thing you will notice is the improved "Create a Plone Site" page which now includes a timezone configuration option:
Barceloneta Theme
I selected the 
US/Eastern
 timezone and clicked 
Create Plone Site
, shortly after which I was greeted with a beautiful new Plone 5 site in all its open source glory. Immediately you will notice a new theme and toolbar:
Plone Toolbar
Here is a quick tour of the new toolbar.
Folder contents
Edit button
Sharing settings
Workflow settings
Add content
Layout settings
User menu
Love it! Of all these, only the eye icon didn't function as expected. Not sure what it's supposed to do but I assume it's not done yet. Additionally, I wish the small Plone logo in the toolbar navigated "home" like the portal logo. Or maybe it will close the toolbar? Oh, the possibilities!
Thanks
Many thanks to everyone who has worked hard to make Plone 5 a reality.
You should probably
 
hire me
 
or
 
follow me on Twitter
 
or both
.
1
And please try 
Plock
 which automates all of these steps e.g. 
pip install plock; plock .;bin/plone fg
 Once Plone (4) is installed, update the extends parameter in 
buildout.cfg
 to 
https://raw.github.com/plock/pins/master/plone-5-0
 and rerun Buildout.</summary>
  </entry>
  <entry>
    <title>Plone site debug</title>
    <link href="https://blog.aclark.net/2014/06/02/i-love-collective-recipe-plonesite/index.html"/>
    <id>urn:uuid:cdd18edd-a1b7-4655-b3fb-a3b32884c3e3</id>
    <updated>2014-06-02T00:00:00</updated>
    <summary>I Love collective-recipe-plonesite
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2014/06/02
    :category: Buildout, Plone

Whenever I answer tech support questions, I usually begin with a clean slate
E.g.:
$ pip install tmp virtualenv
$ cd `tmp`
$ virtualenv .
$ bin/pip install zc.buildout
$ bin/buildout init
Then I edit 
buildout.cfg
 to look like this:
[buildout]
extends = https://raw.github.com/plock/pins/master/plone-4-3
Then I run Buildout:
$ bin/buildout
And because my 
.buildout/default.cfg
 file looks like this:
[buildout]
eggs-directory = /Users/aclark/Developer/eggs-directory
download-cache = /Users/aclark/Developer/download-cache
extends-cache = /Users/aclark/Developer/extends-cache
, the entire process only takes a few seconds (except for when I 
run into trouble with setuptools
. I should probably start doing 
virtualenv --no-setuptools
. Perhaps this can be made default?)
If I'm in the mood to search the source code, I add the following:
[buildout]
extends =
    https://raw.github.com/plock/pins/master/plone-4-3
    https://raw.github.com/plock/pins/master/dev
Then I run Buildout, after which I can easily search in 
parts/omelette
.
Plone site debug
Anyway, sometimes instead of running Plone through-the-web I want to run a debug prompt instead. All that is required is:
$ bin/plone debug
However at this point there is no Plone site object in the database. One could easily create a Plone site through-the-web, but why bother when 
collective.recipe.plonesite
 exists:
[buildout]
extends =
    https://raw.github.com/plock/pins/master/plone-4-3
    https://raw.github.com/plock/pins/master/dev
parts += plonesite

[plonesite]
recipe = collective.recipe.plonesite
instance = plone
After running Buildout, now I can examine the Plone site:
$ bin/plone debug
Starting debugger (the name "app" is bound to the top-level Zope object)

>>> app.Plone.
Display all 864 possibilities? (y or n)
app.Plone.COPY(                                                 app.Plone.hasObject__roles__
app.Plone.COPY__roles__                                         app.Plone.hasProperty(
app.Plone.Contributors(                                         app.Plone.hasProperty__roles__
app.Plone.Contributors__roles__                                 app.Plone.has_local_roles(
app.Plone.CreationDate(                                         app.Plone.has_order_support
app.Plone.CreationDate__roles__                                 app.Plone.http__etag(
app.Plone.Creator(                                              app.Plone.http__parseMatchList(
app.Plone.Creator__roles__                                      app.Plone.http__processMatchHeaders(
app.Plone.DELETE(                                               app.Plone.http__refreshEtag(
app.Plone.DELETE__roles__                                       app.Plone.icon
app.Plone.Date(                                                 app.Plone.icon__roles__
app.Plone.Date__roles__                                         app.Plone.id
app.Plone.Description(                                          app.Plone.indexObject(
app.Plone.Description__roles__                                  app.Plone.invokeFactory(
app.Plone.EffectiveDate(                                        app.Plone.invokeFactory__roles__
app.Plone.EffectiveDate__roles__                                app.Plone.isAnObjectManager
app.Plone.ExpirationDate(                                       app.Plone.isEffective(
app.Plone.ExpirationDate__roles__                               app.Plone.isEffective__roles__
app.Plone.Format(                                               app.Plone.isPrincipiaFolderish
app.Plone.Format__roles__                                       app.Plone.isTopLevelPrincipiaApplicationObject
app.Plone.HEAD(                                                 app.Plone.items(
app.Plone.HEAD__roles__                                         app.Plone.items__roles__
app.Plone.HTTPCache                                             app.Plone.keys(
app.Plone.Identifier(                                           app.Plone.keys__roles__
app.Plone.Identifier__roles__                                   app.Plone.language
app.Plone.LOCK(                                                 app.Plone.listContributors(
app.Plone.LOCK__roles__                                         app.Plone.listContributors__roles__
app.Plone.Language(                                             app.Plone.listCreators(
app.Plone.Language__roles__                                     app.Plone.listCreators__roles__
app.Plone.MKCOL(                                                app.Plone.listDAVObjects(
app.Plone.MKCOL_handler(                                        app.Plone.listDAVObjects__roles__
app.Plone.MOVE(                                                 app.Plone.listFolderContents(
app.Plone.MOVE__roles__                                         app.Plone.listFolderContents__roles__
app.Plone.MailHost                                              app.Plone.list_imports(
app.Plone.ModificationDate(                                     app.Plone.manage(
app.Plone.ModificationDate__roles__                             app.Plone.manage_CopyContainerAllItems(
app.Plone.OPTIONS(                                              app.Plone.manage_CopyContainerAllItems__roles__
app.Plone.OPTIONS__roles__                                      app.Plone.manage_CopyContainerFirstItem(
app.Plone.PROPFIND(                                             app.Plone.manage_CopyContainerFirstItem__roles__
app.Plone.PROPFIND__roles__                                     app.Plone.manage_DAVget(
app.Plone.PROPPATCH(                                            app.Plone.manage_DAVget__roles__
app.Plone.PROPPATCH__roles__                                    app.Plone.manage_FTPlist(
app.Plone.PUT(                                                  app.Plone.manage_FTPlist__roles__
app.Plone.PUT_factory(                                          app.Plone.manage_FTPstat(
app.Plone.PrincipiaFind(                                        app.Plone.manage_FTPstat__roles__
app.Plone.PrincipiaFind__roles__                                app.Plone.manage_UndoForm(
app.Plone.Publisher(                                            app.Plone.manage_UndoForm__roles__
app.Plone.Publisher__roles__                                    app.Plone.manage__roles__
app.Plone.RAMCache                                              app.Plone.manage_access(
app.Plone.REQUEST                                               app.Plone.manage_access__roles__
app.Plone.ResourceRegistryCache                                 app.Plone.manage_acquiredForm(
app.Plone.Rights(                                               app.Plone.manage_acquiredForm__roles__
app.Plone.Rights__roles__                                       app.Plone.manage_acquiredPermissions(
app.Plone.SQLConnectionIDs(                                     app.Plone.manage_acquiredPermissions__roles__
app.Plone.SQLConnectionIDs__roles__                             app.Plone.manage_addDTMLDocument(
app.Plone.SiteRootAdd(                                          app.Plone.manage_addDTMLDocument__roles__
app.Plone.SiteRootAdd__roles__                                  app.Plone.manage_addDTMLMethod(
app.Plone.Subject(                                              app.Plone.manage_addDTMLMethod__roles__
app.Plone.Subject__roles__                                      app.Plone.manage_addDocument(
app.Plone.TRACE(                                                app.Plone.manage_addDocument__roles__
app.Plone.TRACE__roles__                                        app.Plone.manage_addFile(
app.Plone.Title(                                                app.Plone.manage_addFile__roles__
app.Plone.Title__roles__                                        app.Plone.manage_addFolder(
app.Plone.Type(                                                 app.Plone.manage_addFolder__roles__
app.Plone.Type__roles__                                         app.Plone.manage_addImage(
app.Plone.UNLOCK(                                               app.Plone.manage_addImage__roles__
app.Plone.UNLOCK__roles__                                       app.Plone.manage_addLocalRoles(
app.Plone.ZQueryIds(                                            app.Plone.manage_addLocalRoles__roles__
app.Plone.ZQueryIds__roles__                                    app.Plone.manage_addOrderedFolder(
app.Plone.ZopeFind(                                             app.Plone.manage_addOrderedFolder__roles__
app.Plone.ZopeFindAndApply(                                     app.Plone.manage_addPortalFolder(
app.Plone.ZopeFindAndApply__roles__                             app.Plone.manage_addPortalFolder__roles__
app.Plone.ZopeFind__roles__                                     app.Plone.manage_addProduct
app.Plone._ATContentTypes__Add_Document_Permission              app.Plone.manage_addProperty(
app.Plone._ATContentTypes__Add_Event_Permission                 app.Plone.manage_addProperty__roles__
app.Plone._ATContentTypes__Add_File_Permission                  app.Plone.manage_addSiteRoot(
app.Plone._ATContentTypes__Add_Folder_Permission                app.Plone.manage_addSiteRootForm(
app.Plone._ATContentTypes__Add_Image_Permission                 app.Plone.manage_addSiteRootForm__roles__
app.Plone._ATContentTypes__Add_Link_Permission                  app.Plone.manage_addSiteRoot__roles__
app.Plone._ATContentTypes__Add_News_Item_Permission             app.Plone.manage_addUserFolder(
app.Plone._Access_arbitrary_user_session_data_Permission        app.Plone.manage_addUserFolder__roles__
app.Plone._Access_contents_information_Permission               app.Plone.manage_afterAdd(
app.Plone._Access_inactive_portal_content_Permission            app.Plone.manage_afterAdd__roles__
app.Plone._Access_session_data_Permission                       app.Plone.manage_afterClone(
app.Plone._Add_portal_content_Permission                        app.Plone.manage_afterClone__roles__
app.Plone._Add_portal_events_Permission                         app.Plone.manage_beforeDelete(
app.Plone._Add_portal_folders_Permission                        app.Plone.manage_beforeDelete__roles__
app.Plone._Add_portal_member_Permission                         app.Plone.manage_changeOwnershipType(
app.Plone._Allow_sendto_Permission                              app.Plone.manage_changeOwnershipType__roles__
app.Plone._CMFEditions__Access_previous_versions_Permission     app.Plone.manage_changePermissions(
app.Plone._CMFEditions__Apply_version_control_Permission        app.Plone.manage_changePermissions__roles__
app.Plone._CMFEditions__Checkout_to_location_Permission         app.Plone.manage_changeProperties(
app.Plone._CMFEditions__Revert_to_previous_versions_Permission  app.Plone.manage_changeProperties__roles__
app.Plone._CMFEditions__Save_new_version_Permission             app.Plone.manage_changePropertyTypes(
app.Plone._Change_local_roles_Permission                        app.Plone.manage_changePropertyTypes__roles__
app.Plone._Change_portal_events_Permission                      app.Plone.manage_clone(
app.Plone._Content_rules__Manage_rules_Permission               app.Plone.manage_clone__roles__
app.Plone._Copy_or_Move_Permission                              app.Plone.manage_copyObjects(
app.Plone._DefaultDublinCoreImpl__CEILING_DATE                  app.Plone.manage_copyObjects__roles__
app.Plone._DefaultDublinCoreImpl__FLOOR_DATE                    app.Plone.manage_copyright(
app.Plone._Delete_objects_Permission                            app.Plone.manage_copyright__roles__
app.Plone._FTP_access_Permission                                app.Plone.manage_cutObjects(
app.Plone._List_folder_contents_Permission                      app.Plone.manage_cutObjects__roles__
app.Plone._List_portal_members_Permission                       app.Plone.manage_defined_roles(
app.Plone._List_undoable_changes_Permission                     app.Plone.manage_defined_roles__roles__
app.Plone._Mail_forgotten_password_Permission                   app.Plone.manage_delLocalRoles(
app.Plone._Manage_properties_Permission                         app.Plone.manage_delLocalRoles__roles__
app.Plone._Modify_portal_content_Permission                     app.Plone.manage_delObjects(
app.Plone._Modify_view_template_Permission                      app.Plone.manage_delObjects__roles__
app.Plone._Portlets__Manage_own_portlets_Permission             app.Plone.manage_delProperties(
app.Plone._Portlets__Manage_portlets_Permission                 app.Plone.manage_delProperties__roles__
app.Plone._Portlets__View_dashboard_Permission                  app.Plone.manage_editLocalRoles(
app.Plone._Reply_to_item_Permission                             app.Plone.manage_editLocalRoles__roles__
app.Plone._Request_review_Permission                            app.Plone.manage_editMetadata(
app.Plone._Review_comments_Permission                           app.Plone.manage_editMetadata__roles__
app.Plone._Review_portal_content_Permission                     app.Plone.manage_editProperties(
app.Plone._Search_ZCatalog_Permission                           app.Plone.manage_editProperties__roles__
app.Plone._Set_own_password_Permission                          app.Plone.manage_editRoles(
app.Plone._Set_own_properties_Permission                        app.Plone.manage_editRoles__roles__
app.Plone._Undo_changes_Permission                              app.Plone.manage_editedDialog(
app.Plone._Use_Database_Methods_Permission                      app.Plone.manage_editedDialog__roles__
app.Plone._Use_external_editor_Permission                       app.Plone.manage_exportObject(
app.Plone._Use_mailhost_services_Permission                     app.Plone.manage_exportObject__roles__
app.Plone._Use_version_control_Permission                       app.Plone.manage_findAdv(
app.Plone._View_Groups_Permission                               app.Plone.manage_findAdv__roles__
app.Plone._View_History_Permission                              app.Plone.manage_findForm(
app.Plone._View_Permission                                      app.Plone.manage_findForm__roles__
app.Plone._View_management_screens_Permission                   app.Plone.manage_findFrame(
app.Plone._WebDAV_Lock_items_Permission                         app.Plone.manage_findFrame__roles__
app.Plone._WebDAV_Unlock_items_Permission                       app.Plone.manage_findResult(
app.Plone._WebDAV_access_Permission                             app.Plone.manage_findResult__roles__
app.Plone.__ZCacheManager_ids__                                 app.Plone.manage_fixupOwnershipAfterAdd(
app.Plone.__ac_local_roles__                                    app.Plone.manage_fixupOwnershipAfterAdd__roles__
app.Plone.__ac_permissions__                                    app.Plone.manage_form_title(
app.Plone.__ac_roles__                                          app.Plone.manage_form_title__roles__
app.Plone.__allow_access_to_unprotected_subobjects__            app.Plone.manage_getPermissionMapping(
app.Plone.__allow_groups__(                                     app.Plone.manage_getPermissionMapping__roles__
app.Plone.__before_publishing_traverse__(                       app.Plone.manage_getUserRolesAndPermissions(
app.Plone.__before_traverse__                                   app.Plone.manage_getUserRolesAndPermissions__roles__
app.Plone.__browser_default__(                                  app.Plone.manage_hasId(
app.Plone.__call__(                                             app.Plone.manage_hasId__roles__
app.Plone.__call____roles__                                     app.Plone.manage_importExportForm(
app.Plone.__class__(                                            app.Plone.manage_importExportForm__roles__
app.Plone.__class_init__(                                       app.Plone.manage_importObject(
app.Plone.__contains__(                                         app.Plone.manage_importObject__roles__
app.Plone.__dav_collection__                                    app.Plone.manage_index_main(
app.Plone.__dav_resource__                                      app.Plone.manage_index_main__roles__
app.Plone.__delattr__(                                          app.Plone.manage_listLocalRoles(
app.Plone.__delitem__(                                          app.Plone.manage_listLocalRoles__roles__
app.Plone.__dict__                                              app.Plone.manage_main(
app.Plone.__doc__                                               app.Plone.manage_main__roles__
app.Plone.__error_log__                                         app.Plone.manage_menu(
app.Plone.__format__(                                           app.Plone.manage_menu__roles__
app.Plone.__getattr__(                                          app.Plone.manage_metadata(
app.Plone.__getattribute__(                                     app.Plone.manage_metadata__roles__
app.Plone.__getitem__(                                          app.Plone.manage_move_objects_down(
app.Plone.__getstate__(                                         app.Plone.manage_move_objects_down__roles__
app.Plone.__hash__(                                             app.Plone.manage_move_objects_to_bottom(
app.Plone.__http_methods__                                      app.Plone.manage_move_objects_to_bottom__roles__
app.Plone.__implemented__(                                      app.Plone.manage_move_objects_to_top(
app.Plone.__init__(                                             app.Plone.manage_move_objects_to_top__roles__
app.Plone.__iter__(                                             app.Plone.manage_move_objects_up(
app.Plone.__len__(                                              app.Plone.manage_move_objects_up__roles__
app.Plone.__module__                                            app.Plone.manage_options
app.Plone.__name__                                              app.Plone.manage_owner(
app.Plone.__new__(                                              app.Plone.manage_owner__roles__
app.Plone.__nonzero__(                                          app.Plone.manage_page_footer(
app.Plone.__of__(                                               app.Plone.manage_page_footer__roles__
app.Plone.__old_manage_FTPlist(                                 app.Plone.manage_page_header(
app.Plone.__propsets__                                          app.Plone.manage_page_header__roles__
app.Plone.__providedBy__(                                       app.Plone.manage_page_style.css(
app.Plone.__provides__(                                         app.Plone.manage_page_style.css__roles__
app.Plone.__reduce__(                                           app.Plone.manage_pasteObjects(
app.Plone.__reduce_ex__(                                        app.Plone.manage_pasteObjects__roles__
app.Plone.__replaceable__                                       app.Plone.manage_permission(
app.Plone.__repr__(                                             app.Plone.manage_permissionForm(
app.Plone.__roles__                                             app.Plone.manage_permissionForm__roles__
app.Plone.__setattr__(                                          app.Plone.manage_permission__roles__
app.Plone.__setitem__(                                          app.Plone.manage_propertiesForm(
app.Plone.__setstate__(                                         app.Plone.manage_propertiesForm__roles__
app.Plone.__sizeof__(                                           app.Plone.manage_propertyTypeForm(
app.Plone.__str__(                                              app.Plone.manage_propertyTypeForm__roles__
app.Plone.__subclasshook__(                                     app.Plone.manage_renameForm(
app.Plone.__weakref__                                           app.Plone.manage_renameForm__roles__
app.Plone._addRole(                                             app.Plone.manage_renameObject(
app.Plone._at_fti_meta_type                                     app.Plone.manage_renameObject__roles__
app.Plone._canCopy(                                             app.Plone.manage_renameObjects(
app.Plone._checkId(                                             app.Plone.manage_renameObjects__roles__
app.Plone._components                                           app.Plone.manage_reportUserPermissions(
app.Plone._datify(                                              app.Plone.manage_reportUserPermissions__roles__
app.Plone._datify__roles__                                      app.Plone.manage_role(
app.Plone._default_sort_key                                     app.Plone.manage_roleForm(
app.Plone._default_sort_reverse                                 app.Plone.manage_roleForm__roles__
app.Plone._delOb(                                               app.Plone.manage_role__roles__
app.Plone._delObject(                                           app.Plone.manage_setLocalRoles(
app.Plone._delPropValue(                                        app.Plone.manage_setLocalRoles__roles__
app.Plone._delProperty(                                         app.Plone.manage_setPermissionMapping(
app.Plone._delRoles(                                            app.Plone.manage_setPermissionMapping__roles__
app.Plone._deleteOwnershipAfterAdd(                             app.Plone.manage_set_default_sorting(
app.Plone._editMetadata(                                        app.Plone.manage_set_default_sorting__roles__
app.Plone._editMetadata__roles__                                app.Plone.manage_tabs(
app.Plone._filteredItems(                                       app.Plone.manage_tabs__roles__
app.Plone._getCopy(                                             app.Plone.manage_takeOwnership(
app.Plone._getImportPaths(                                      app.Plone.manage_takeOwnership__roles__
app.Plone._getOb(                                               app.Plone.manage_top_frame(
app.Plone._getPortalTypeName(                                   app.Plone.manage_top_frame__roles__
app.Plone._getUNIQUE(                                           app.Plone.manage_undo_transactions(
app.Plone._get_id(                                              app.Plone.manage_undo_transactions__roles__
app.Plone._get_request_var_or_attr(                             app.Plone.manage_workspace(
app.Plone._has_user_defined_role(                               app.Plone.manage_workspace__roles__
app.Plone._importObjectFromFile(                                app.Plone.manage_zmi_logout(
app.Plone._isBeingUsedAsAMethod(                                app.Plone.manage_zmi_logout__roles__
app.Plone._manage_editedDialog(                                 app.Plone.manage_zmi_prefs(
app.Plone._normal_manage_access(                                app.Plone.manage_zmi_prefs__roles__
app.Plone._notifyOfCopyTo(                                      app.Plone.management_page_charset
app.Plone._objects                                              app.Plone.meta_type
app.Plone._old_filtered_manage_options(                         app.Plone.meta_types
app.Plone._owner                                                app.Plone.mimetypes_registry(
app.Plone._p_activate(                                          app.Plone.modification_date
app.Plone._p_changed                                            app.Plone.modified(
app.Plone._p_deactivate(                                        app.Plone.modified__roles__
app.Plone._p_delattr(                                           app.Plone.moveObject(
app.Plone._p_estimated_size                                     app.Plone.moveObjectToPosition(
app.Plone._p_getattr(                                           app.Plone.moveObjectToPosition__roles__
app.Plone._p_invalidate(                                        app.Plone.moveObject__roles__
app.Plone._p_jar                                                app.Plone.moveObjectsByDelta(
app.Plone._p_mtime                                              app.Plone.moveObjectsByDelta__roles__
app.Plone._p_oid                                                app.Plone.moveObjectsDown(
app.Plone._p_serial                                             app.Plone.moveObjectsDown__roles__
app.Plone._p_setattr(                                           app.Plone.moveObjectsToBottom(
app.Plone._p_state                                              app.Plone.moveObjectsToBottom__roles__
app.Plone._plone_app_collection__Add_Collection_Permission      app.Plone.moveObjectsToTop(
app.Plone._postCopy(                                            app.Plone.moveObjectsToTop__roles__
app.Plone._properties                                           app.Plone.moveObjectsUp(
app.Plone._propertyMap(                                         app.Plone.moveObjectsUp__roles__
app.Plone._reserved_names                                       app.Plone.notifyModified(
app.Plone._setId(                                               app.Plone.notifyModified__roles__
app.Plone._setOb(                                               app.Plone.objectIds(
app.Plone._setObject(                                           app.Plone.objectIds__roles__
app.Plone._setPortalTypeName(                                   app.Plone.objectIds_d(
app.Plone._setPropValue(                                        app.Plone.objectIds_d__roles__
app.Plone._setProperty(                                         app.Plone.objectItems(
app.Plone._setRoles(                                            app.Plone.objectItems__roles__
app.Plone._subobject_permissions(                               app.Plone.objectItems_d(
app.Plone._updateProperty(                                      app.Plone.objectItems_d__roles__
app.Plone._verifyObjectPaste(                                   app.Plone.objectMap(
app.Plone._wrapperCheck(                                        app.Plone.objectMap_d(
app.Plone.absolute_url(                                         app.Plone.objectMap_d__roles__
app.Plone.absolute_url__roles__                                 app.Plone.objectValues(
app.Plone.absolute_url_path(                                    app.Plone.objectValues__roles__
app.Plone.absolute_url_path__roles__                            app.Plone.objectValues_d(
app.Plone.ac_inherited_permissions(                             app.Plone.objectValues_d__roles__
app.Plone.ac_inherited_permissions__roles__                     app.Plone.opaqueIds(
app.Plone.access_debug_info(                                    app.Plone.opaqueIds__roles__
app.Plone.access_debug_info__roles__                            app.Plone.opaqueItems(
app.Plone.aclAChecked                                           app.Plone.opaqueItems__roles__
app.Plone.aclEChecked                                           app.Plone.opaqueValues(
app.Plone.aclPChecked                                           app.Plone.opaqueValues__roles__
app.Plone.acl_users(                                            app.Plone.orderObjects(
app.Plone.acquiredRolesAreUsedBy(                               app.Plone.orderObjects__roles__
app.Plone.acquiredRolesAreUsedBy__roles__                       app.Plone.owner_info(
app.Plone.addCreator(                                           app.Plone.owner_info__roles__
app.Plone.addCreator__roles__                                   app.Plone.permission_settings(
app.Plone.addDTMLDocument(                                      app.Plone.permission_settings__roles__
app.Plone.addDTMLDocument__roles__                              app.Plone.permissionsOfRole(
app.Plone.addDTMLMethod(                                        app.Plone.permissionsOfRole__roles__
app.Plone.addDTMLMethod__roles__                                app.Plone.plone_utils
app.Plone.aliases                                               app.Plone.portal_actionicons(
app.Plone.all_meta_types(                                       app.Plone.portal_actions
app.Plone.allowedContentTypes(                                  app.Plone.portal_archivist
app.Plone.allowedContentTypes__roles__                          app.Plone.portal_atct
app.Plone.analyseDocumentation(                                 app.Plone.portal_calendar
app.Plone.analyseDocumentation__roles__                         app.Plone.portal_catalog(
app.Plone.archetype_tool                                        app.Plone.portal_controlpanel
app.Plone.availableLanguages(                                   app.Plone.portal_css
app.Plone.availableLanguages__roles__                           app.Plone.portal_diff
app.Plone.bobobase_modification_time(                           app.Plone.portal_discussion
app.Plone.caching_policy_manager                                app.Plone.portal_factory(
app.Plone.canSetDefaultPage(                                    app.Plone.portal_form_controller(
app.Plone.canSetDefaultPage__roles__                            app.Plone.portal_groupdata
app.Plone.canSetLayout(                                         app.Plone.portal_groups
app.Plone.canSetLayout__roles__                                 app.Plone.portal_historiesstorage
app.Plone.cb_dataItems(                                         app.Plone.portal_historyidhandler
app.Plone.cb_dataValid(                                         app.Plone.portal_interface
app.Plone.cb_isCopyable(                                        app.Plone.portal_javascripts
app.Plone.cb_isMoveable(                                        app.Plone.portal_languages(
app.Plone.cb_userHasCopyOrMovePermission(                       app.Plone.portal_memberdata
app.Plone.changeOwnership(                                      app.Plone.portal_membership
app.Plone.changeOwnership__roles__                              app.Plone.portal_metadata
app.Plone.changeSkin(                                           app.Plone.portal_migration
app.Plone.changeSkin__roles__                                   app.Plone.portal_modifier
app.Plone.checkIdAvailable(                                     app.Plone.portal_password_reset
app.Plone.checkIdAvailable__roles__                             app.Plone.portal_properties
app.Plone.clearCurrentSkin(                                     app.Plone.portal_purgepolicy
app.Plone.clearCurrentSkin__roles__                             app.Plone.portal_quickinstaller
app.Plone.contentIds(                                           app.Plone.portal_referencefactories
app.Plone.contentIds__roles__                                   app.Plone.portal_registration
app.Plone.contentItems(                                         app.Plone.portal_registry
app.Plone.contentItems__roles__                                 app.Plone.portal_repository
app.Plone.contentValues(                                        app.Plone.portal_setup
app.Plone.contentValues__roles__                                app.Plone.portal_skins
app.Plone.content_type(                                         app.Plone.portal_tinymce
app.Plone.content_type_registry                                 app.Plone.portal_transforms(
app.Plone.contributors                                          app.Plone.portal_type
app.Plone.created(                                              app.Plone.portal_types
app.Plone.created__roles__                                      app.Plone.portal_uidannotation(
app.Plone.creation_date                                         app.Plone.portal_uidgenerator(
app.Plone.creators                                              app.Plone.portal_uidhandler
app.Plone.dav__init(                                            app.Plone.portal_undo
app.Plone.dav__simpleifhandler(                                 app.Plone.portal_url(
app.Plone.dav__validate(                                        app.Plone.portal_view_customizations
app.Plone.decodeFolderFilter(                                   app.Plone.portal_workflow
app.Plone.decodeFolderFilter__roles__                           app.Plone.possible_permissions(
app.Plone.defaultView(                                          app.Plone.propdict(
app.Plone.defaultView__roles__                                  app.Plone.propdict__roles__
app.Plone.default_view                                          app.Plone.propertyDescription(
app.Plone.description                                           app.Plone.propertyDescription__roles__
app.Plone.edit(                                                 app.Plone.propertyIds(
app.Plone.editMetadata(                                         app.Plone.propertyIds__roles__
app.Plone.editMetadata__roles__                                 app.Plone.propertyItems(
app.Plone.edit__roles__                                         app.Plone.propertyItems__roles__
app.Plone.effective(                                            app.Plone.propertyLabel(
app.Plone.effective__roles__                                    app.Plone.propertyLabel__roles__
app.Plone.effective_date                                        app.Plone.propertyMap(
app.Plone.email_charset                                         app.Plone.propertyMap__roles__
app.Plone.email_from_address                                    app.Plone.propertyValues(
app.Plone.email_from_name                                       app.Plone.propertyValues__roles__
app.Plone.enable_permalink                                      app.Plone.propertysheets
app.Plone.encodeFolderFilter(                                   app.Plone.raise_standardErrorMessage(
app.Plone.encodeFolderFilter__roles__                           app.Plone.reference_catalog(
app.Plone.error_log                                             app.Plone.reindexObject(
app.Plone.expiration_date                                       app.Plone.reindexObjectSecurity(
app.Plone.expires(                                              app.Plone.restrictedTraverse(
app.Plone.expires__roles__                                      app.Plone.restrictedTraverse__roles__
app.Plone.externalEditLink_(                                    app.Plone.rights
app.Plone.externalEdit_                                         app.Plone.rolesOfPermission(
app.Plone.filtered_manage_options(                              app.Plone.rolesOfPermission__roles__
app.Plone.filtered_manage_options__roles__                      app.Plone.selectable_views
app.Plone.filtered_meta_types(                                  app.Plone.selectedRoles
app.Plone.folderlistingFolderContents(                          app.Plone.setContributors(
app.Plone.folderlistingFolderContents__roles__                  app.Plone.setContributors__roles__
app.Plone.format                                                app.Plone.setCreators(
app.Plone.get(                                                  app.Plone.setCreators__roles__
app.Plone.getActionInfo(                                        app.Plone.setDefaultPage(
app.Plone.getActionInfo__roles__                                app.Plone.setDefaultPage__roles__
app.Plone.getAttribute(                                         app.Plone.setDefaultSorting(
app.Plone.getAttributeNode(                                     app.Plone.setDefaultSorting__roles__
app.Plone.getAttributeNode__roles__                             app.Plone.setDescription(
app.Plone.getAttribute__roles__                                 app.Plone.setDescription__roles__
app.Plone.getAttributes(                                        app.Plone.setEffectiveDate(
app.Plone.getAttributes__roles__                                app.Plone.setEffectiveDate__roles__
app.Plone.getAvailableLayouts(                                  app.Plone.setExpirationDate(
app.Plone.getAvailableLayouts__roles__                          app.Plone.setExpirationDate__roles__
app.Plone.getCMFObjectsSubsetIds(                               app.Plone.setFormat(
app.Plone.getChildNodes(                                        app.Plone.setFormat__roles__
app.Plone.getChildNodes__roles__                                app.Plone.setLanguage(
app.Plone.getCurrentSkinName(                                   app.Plone.setLanguage__roles__
app.Plone.getCurrentSkinName__roles__                           app.Plone.setLayout(
app.Plone.getDefaultLayout(                                     app.Plone.setLayout__roles__
app.Plone.getDefaultLayout__roles__                             app.Plone.setModificationDate(
app.Plone.getDefaultPage(                                       app.Plone.setModificationDate__roles__
app.Plone.getDefaultPage__roles__                               app.Plone.setRights(
app.Plone.getDefaultSorting(                                    app.Plone.setRights__roles__
app.Plone.getDefaultSorting__roles__                            app.Plone.setSiteManager(
app.Plone.getElementsByTagName(                                 app.Plone.setSiteManager__roles__
app.Plone.getElementsByTagName__roles__                         app.Plone.setSubject(
app.Plone.getFirstChild(                                        app.Plone.setSubject__roles__
app.Plone.getFirstChild__roles__                                app.Plone.setTitle(
app.Plone.getIcon(                                              app.Plone.setTitle__roles__
app.Plone.getIconURL(                                           app.Plone.setupCurrentSkin(
app.Plone.getIconURL__roles__                                   app.Plone.setupCurrentSkin__roles__
app.Plone.getIcon__roles__                                      app.Plone.showDocumentation(
app.Plone.getId(                                                app.Plone.showDocumentation__roles__
app.Plone.getId__roles__                                        app.Plone.smallRolesWidget
app.Plone.getIdsSubset(                                         app.Plone.subject
app.Plone.getIdsSubset__roles__                                 app.Plone.superValues(
app.Plone.getLastChild(                                         app.Plone.superValues__roles__
app.Plone.getLastChild__roles__                                 app.Plone.suppl_views
app.Plone.getLayout(                                            app.Plone.tabs_path_default(
app.Plone.getLayout__roles__                                    app.Plone.tabs_path_info(
app.Plone.getMetadataHeaders(                                   app.Plone.this(
app.Plone.getMetadataHeaders__roles__                           app.Plone.title
app.Plone.getNextSibling(                                       app.Plone.title_and_id(
app.Plone.getNextSibling__roles__                               app.Plone.title_or_id(
app.Plone.getNodeName(                                          app.Plone.tpURL(
app.Plone.getNodeName__roles__                                  app.Plone.tpValues(
app.Plone.getNodeType(                                          app.Plone.tpValues__roles__
app.Plone.getNodeValue(                                         app.Plone.translation_service
app.Plone.getNodeValue__roles__                                 app.Plone.uid_catalog(
app.Plone.getObjectPosition(                                    app.Plone.undoable_transactions(
app.Plone.getObjectPosition__roles__                            app.Plone.undoable_transactions__roles__
app.Plone.getOwner(                                             app.Plone.unindexObject(
app.Plone.getOwnerDocument(                                     app.Plone.unrestrictedTraverse(
app.Plone.getOwnerDocument__roles__                             app.Plone.unrestrictedTraverse__roles__
app.Plone.getOwnerTuple(                                        app.Plone.userCanTakeOwnership(
app.Plone.getOwnerTuple__roles__                                app.Plone.userdefined_roles(
app.Plone.getOwner__roles__                                     app.Plone.userdefined_roles__roles__
app.Plone.getParentNode(                                        app.Plone.users_with_local_role(
app.Plone.getParentNode__roles__                                app.Plone.validClipData(
app.Plone.getPhysicalPath(                                      app.Plone.validRoles(
app.Plone.getPhysicalPath__roles__                              app.Plone.valid_property_id(
app.Plone.getPhysicalRoot(                                      app.Plone.valid_property_id__roles__
app.Plone.getPhysicalRoot__roles__                              app.Plone.valid_roles(
app.Plone.getPortalTypeName(                                    app.Plone.validate_email
app.Plone.getPortalTypeName__roles__                            app.Plone.validate_roles(
app.Plone.getPreviousSibling(                                   app.Plone.values(
app.Plone.getPreviousSibling__roles__                           app.Plone.values__roles__
app.Plone.getProperty(                                          app.Plone.view(
app.Plone.getPropertyType(                                      app.Plone.virtual_url_path(
app.Plone.getPropertyType__roles__                              app.Plone.virtual_url_path__roles__
app.Plone.getProperty__roles__                                  app.Plone.wl_clearLocks(
app.Plone.getSiteManager(                                       app.Plone.wl_clearLocks__roles__
app.Plone.getSiteManager__roles__                               app.Plone.wl_delLock(
app.Plone.getSkin(                                              app.Plone.wl_delLock__roles__
app.Plone.getSkinNameFromRequest(                               app.Plone.wl_getLock(
app.Plone.getSkinNameFromRequest__roles__                       app.Plone.wl_getLock__roles__
app.Plone.getSkin__roles__                                      app.Plone.wl_hasLock(
app.Plone.getSkinsFolderName(                                   app.Plone.wl_isLocked(
app.Plone.getSkinsFolderName__roles__                           app.Plone.wl_isLockedByUser__roles__
app.Plone.getTagName(                                           app.Plone.wl_isLocked__roles__
app.Plone.getTagName__roles__                                   app.Plone.wl_lockItems(
app.Plone.getTypeInfo(                                          app.Plone.wl_lockItems__roles__
app.Plone.getTypeInfo__roles__                                  app.Plone.wl_lockTokens(
app.Plone.getWrappedOwner(                                      app.Plone.wl_lockTokens__roles__
app.Plone.getWrappedOwner__roles__                              app.Plone.wl_lockValues(
app.Plone.get__roles__                                          app.Plone.wl_lockValues__roles__
app.Plone.get_local_roles(                                      app.Plone.wl_lockmapping(
app.Plone.get_local_roles_for_userid(                           app.Plone.wl_lockmapping__roles__
app.Plone.get_valid_userids(                                    app.Plone.wl_setLock(
app.Plone.hasChildNodes(                                        app.Plone.wl_setLock__roles__
app.Plone.hasChildNodes__roles__                                app.Plone.zope_quick_start(
app.Plone.hasObject(                                            app.Plone.zope_quick_start__roles__
(
You should probably
 
hire me
 
or
 
follow me on Twitter
 
or both
.)</summary>
  </entry>
  <entry>
    <title>Conclusion</title>
    <link href="https://blog.aclark.net/2014/05/19/matplotlib-plotting-cookbook-review/index.html"/>
    <id>urn:uuid:07796e2c-5418-4571-80cd-07a8693df20b</id>
    <updated>2014-05-19T00:00:00</updated>
    <summary>Matplotlib Plotting Cookbook Review
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2014/05/19
    :category: Python

Here is my review
I was given a copy of 
Matplotlib Plotting Cookbook by Alexandre Devert
 and asked to review it. Thanks PACKT! Here is my review.
Preface
But first, I'll mention I've worked on two projects recently that involved rendering matplotlib graphs directly to the browser i.e. via content-type: image/png. This is fun! It's particularly enjoyable when you are trying to avoid performing the task "the right way", which is arguably outputting JSON to some JavaScript graphing library e.g. 
Highcharts
. The dependencies are heavy i.e. pip install numpy, etc. but not 
that
 heavy and once they are installed, 
your web application can output graphs rivaling those produced by JavaScript, all written in Python
 
1
. Highly recommended!
Chapter 1
I think the code examples in Chapter 1 alone are worth the price of admission. Here is a video of me walking through the Chapter 1 code examples:
<iframe width="420" height="315" src="//www.youtube.com/embed/YOFHkszsdR8" frameborder="0" allowfullscreen></iframe>
You'll notice the typical fare here: bar, line and pie graphs along with some more complex boxplot, histogram, horizontal bar, scatter and triangle graphs, all in various colors. For reference, here are the excerpted commands called to produce these graphs:
<script src="https://gist.github.com/aclark4life/0f9e61f2d62a67c31346.js"></script>
Chapter 2
Chapter 2 is all about customization e.g. via matplotlibrc. Here is a video of me walking through the Chapter 2 code examples:
<iframe width="420" height="315" src="//www.youtube.com/embed/BzGv1soDaRU" frameborder="0" allowfullscreen></iframe>
For reference, here is the sample matplotlibrc included with the matplotlib distribution (lib/python2.7/site-packages/matplotlib/mpl-data/matplotlibrc):
<script src="https://gist.github.com/aclark4life/71c1edf815bd61aae8a9.js"></script>
As you can see, there are a lot of knobs you can turn here.
Chapter 3
Chapter 3 is all about "annotations". Here is a video of me walking through the Chapter 3 code examples:
<iframe width="420" height="315" src="//www.youtube.com/embed/994vecwODaI" frameborder="0" allowfullscreen></iframe>
"Annotations" includes related topics such as adding shapes and controlling tick spacing and labeling.
Chapter 4
Chapter 4 is all about "working with figures". Here is a video of me walking through the Chapter 4 code examples:
<iframe width="420" height="315" src="//www.youtube.com/embed/Q6PFBSxkOc4" frameborder="0" allowfullscreen></iframe>
"Working with figures" includes obvious topics like 
subplot
 and less obvious topics like setting the aspect ratio.
Chapter 5
Chapter 5 is all about "working with file output". For reference, here are some of the images produced by the examples in this chapter (I wrote 
jpg
 files instead of 
png
 files due to a problem with my libpng: 
RuntimeError: Could not create write struct
.)
Also covered in this chapter is 
pdf output
.
Chapter 6
Chapter 6 is all about "working with maps".
<iframe width="420" height="315" src="//www.youtube.com/embed/gKnR7IfNSsI" frameborder="0" allowfullscreen></iframe>
This chapter also introduces the 
imshow command
.
Chapter 7
Chapter 7 is all about "working with 3D figures".
<iframe width="420" height="315" src="//www.youtube.com/embed/7YFGHG62L5U" frameborder="0" allowfullscreen></iframe>
For reference, here are the excerpted commands called to produce these graphs:
<script src="https://gist.github.com/aclark4life/6f7f3fd18ec4c7795028.js"></script>
Chapter 8
Chapter 8 is all about working with the "user interface" interactively.
<iframe width="420" height="315" src="//www.youtube.com/embed/k6984I_YGo4" frameborder="0" allowfullscreen></iframe>
Additionally, all of the popular graphical windowing environments are discussed: Tkinter, wxWidgets, GTK, Pyglet (three out of four of which I was able to install; GTK 2 vs GTK 3 
confused me and I ran out of time debugging it
.
Conclusion
Overall I enjoyed this book and would 
recommend buying it
.
(
You should probably
 
hire me
 
or
 
follow me on Twitter
 
or both
. 
And speaking of PACKT, you should definitely
 
buy my book too
.)
1
Yes, I'm familiar with 
Bokeh
.</summary>
  </entry>
  <entry>
    <title>Conclusion</title>
    <link href="https://blog.aclark.net/2014/05/03/we-pioneer/index.html"/>
    <id>urn:uuid:baca0d48-7217-4ec9-b716-ff618f297ac6</id>
    <updated>2014-05-03T00:00:00</updated>
    <summary>We Pioneer
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2014/05/03
    :category: Plone

One of the subjects I find myself thinking about a lot is: Plone (surprise!)
One of the subjects I find myself thinking about a lot is: Plone (surprise!) In Plone-land, we deliver the 
best Python-based CMS money can't buy on top of an aging Zope 2 "application server"
 mixed with newer Zope, Python, and other technologies. In short, this is a challenge.
Diazo
Further to the point, I think about "new tech" vs "old tech" a lot and how to happily marry the two. Here is one concrete example of my thought process. Diazo is the "new theming engine" in Plone which allows folks to perform complex XSLT transformations via a simple XML rule set. It sounds great, and it often is. But something won't let my mind reach the "Ahhhh this is great technology!" point. Instead, I often find myself thinking "This is great technology, BUT…" which I don't want to think when I'm thinking about Plone.
Pioneering
However I'm beginning to settle on an "acceptable thought process", to describe how Diazo fits on top of 10 years of legacy Plone technology: it's 
pioneering
. As I have observed over the years, Plone developers have taken great pride in being the "first to market" with cutting edge and useful CMS features other vendors would love to include in their product.
But are other CMS vendors watching?
Issues
Of issue with Diazo is:
Most web developers are familiar with the concept of editing templates to affect output
 (AKA "customization"). When Zope 2 was young, the only place to easily customize templates was within the web application itself, with changes persisted to the ZODB. Then "ZODB dread" 
1
 happened and folks began to customize templates on the file system with software version control in place. During this time, customizations happened on the file system via the CMF framework built on top of Zope 2. Then Zope 3 happened and folks began to customize templates on the file system with more modern web technology (AKA "pseudo-MVC-like environments"). Then Deliverance 
2
 happened and folks began to leave the complex stack alone in favor of using XSLT transforms to produce a hybrid output containing both clean, isolated HTML/CSS/JavaScript and Plone content (AKA "lipstick on a pig").
Plone now has two distinct templating environments
: the application environment which still has plenty of templates to customize & the theming environment which also has templates to customize. This is both good and bad: it's good when everyone can easily figure out where to customize what they want to customize, and bad when this process breaks down.
Diazo allows for some complex rules to be written
 along with custom XSLT. That power allows folks to produce some truly unwieldy and wholly unmaintainable messes, for lack of a better description. I'm sad to say I've seen many of these in the wild, in just the few short years Diazo has existed.
Conclusion
After all this thinking, I've reached the following conclusion(s):
The concept of editing templates most web developers are familiar with is still valid in Plone.
 But we must work harder to demonstrate where and how these customizations can occur. With great tools comes great power, but not without significant risk of injury (the so-called "power tool" analogy.)
We should strive for the appearance of one templating environment.
 The easiest way to do this is to have only one templating environment. Many electronic flames have been burned over the discussion of making Diazo that single environment. In the meantime let's disassemble, polish & reassemble all of our templating environments and put effort in to making the difference between them seemless. (
zope2_bootstrap
 anyone?)
We should actively discourage complex rules and custom XSLT
. Of course, these knobs are nice to turn when you need them. But I don't want to read through complex rules and custom XSLT anymore than I want to see inline JavaScript or CSS. (AKA "This is why we can't have nice things.")
And other CMS vendors should be watching, because Plone 5 is about to drop!
(
You should probably
 
hire me
 
or
 
follow me on Twitter
 
or both
.)
1
The fear all your hard work and customizations are trapped inside an unwieldy ZODB, with no easy way to persist or track them elsewhere.
2
Early, pioneering implementation which inspired Diazo.</summary>
  </entry>
  <entry>
    <title>Logo</title>
    <link href="https://blog.aclark.net/2014/04/07/bro-do-you-even-pillow/index.html"/>
    <id>urn:uuid:7211e08d-c2e8-4d85-a168-648e5b39d2f0</id>
    <updated>2014-04-07T00:00:00</updated>
    <summary>Bro, do you even Pillow?
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2014/04/07
    :category: Pillow, Python

Pillow is a fork of the Python Imaging Library. Here is an update on the status of the project.
2.4.0 released
Pillow 2.4.0 is out! Here are the highlights:
Indexed Transparency handled for conversions between L, RGB, and P modes. Fixes #510 [wiredfool]
Conversions enabled from RGBA->P, Fixes #544 [wiredfool]
Improved icns support [al45tair]
Fix libtiff leaking open files, fixes #580 [wiredfool]
Fixes for Jpeg encoding in Python 3, fixes #577 [wiredfool]
Added support for JPEG 2000 [al45tair]
Add more detailed error messages to Image.py [larsmans]
Avoid conflicting _expand functions in PIL & MINGW, fixes #538 [aclark]
Merge from Philippe Lagadec’s OleFileIO_PL fork [vadmium]
Fix ImageColor.getcolor [homm]
Make ICO files work with the ImageFile.Parser interface, fixes #522 [wiredfool]
Handle 32bit compiled python on 64bit architecture [choppsv1]
Fix support for characters >128 using .pcf or .pil fonts in Py3k. Fixes #505 [wiredfool]
Skip CFFI test earlier if it's not installed [wiredfool]
Fixed opening and saving odd sized .pcx files, fixes #523 [wiredfool]
Fixed palette handling when converting from mode P->RGB->P [d_schmidt]
Fixed saving mode P image as a PNG with transparency = palette color 0 [d-schmidt]
Improve heuristic used when saving progressive and optimized JPEGs with high quality values [e98cuenc]
Fixed DOS with invalid palette size or invalid image size in BMP file [wiredfool]
Added support for BMP version 4 and 5 [eddwardo, wiredfool]
Fix segfault in getfont when passed a memory resident font [wiredfool]
Fix crash on Saving a PNG when icc-profile is None [brutasse]
Cffi+Python implementation of the PixelAccess object [wiredfool]
PixelAccess returns unsigned ints for I16 mode [wiredfool]
Minor patch on booleans + Travis [sciunto]
Look in multiarch paths in GNU platforms [pinotree]
Add arch support for pcc64, s390, s390x, armv7l, aarch64 [manisandro]
Add arch support for ppc [wiredfool]
Correctly quote file names for WindowsViewer command [cgohlke]
Prefer homebrew freetype over X11 freetype (but still allow both) [dmckeone]
OS X 10.9.2 issues
This happened:
https://github.com/python-imaging/Pillow/issues/527
Security issues
This happened:
https://github.com/python-imaging/Pillow/pull/548
Logo
Pillow has a logo thanks to Alastair Houghton:
https://github.com/python-imaging/Pillow/issues/575
Keep using and supporting Pillow!</summary>
  </entry>
  <entry>
    <title>Introducing Plock Pins</title>
    <link href="https://blog.aclark.net/2014/03/20/introducing-plock-pins/index.html"/>
    <id>urn:uuid:9d8bcd09-f3e5-487a-bf2e-63d2bd9cd4d1</id>
    <updated>2014-03-20T00:00:00</updated>
    <summary>Introducing Plock Pins
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2014/03/20
    :category: Buildout, Plone

"Plock Pins are the greatest thing to happen to Plone since Buildout" — Alex Clark
Plock Pins are the final incarnation of a collection of Plone Buildouts I've been developing since 2010. They attempt to make it easy to install Plone with only Python installed 
1
. Installing Plone with Plock Pins looks like this:
$ virtualenv-2.7 .
$ bin/pip install zc.buildout
$ bin/buildout init
Now edit your 
buildout.cfg
 to include a link to the Plock Pins:
[buildout]
extends = https://raw.github.com/plock/pins/master/plone-4-3
Then run Buildout:
$ bin/buildout
Followed by the following command to start Plone:
$ bin/plone fg
That's it! This technique should work for all versions of Plone all the way back to Plone 1.1. If it doesn't, please let me know here:
https://github.com/plock/pins/issues
Finally, here is a list of all available Plock Pins you can extend 
2
:
https://raw.github.com/plock/pins/master/plone-4-3
https://raw.github.com/plock/pins/master/plone-4-2
https://raw.github.com/plock/pins/master/plone-4-1
https://raw.github.com/plock/pins/master/plone-4-0
https://raw.github.com/plock/pins/master/plone-3-3
https://raw.github.com/plock/pins/master/plone-3-2
https://raw.github.com/plock/pins/master/plone-3-1
https://raw.github.com/plock/pins/master/plone-3-0
https://raw.github.com/plock/pins/master/plone-2-5
https://raw.github.com/plock/pins/master/plone-2-1
https://raw.github.com/plock/pins/master/plone-1-1
1
In future versions of Python 3.x, the Pip installer will be included as part of the core software. This will lessen the burden for users attempting to install packages from PyPI. In 2.x, one must install Setuptools and/or Pip before attempting to do so.
2
Remember to use Python 2.4 for < Plone 4</summary>
  </entry>
  <entry>
    <title>Virtualenv and setuptools</title>
    <link href="https://blog.aclark.net/2014/03/19/virtualenv-support-update/index.html"/>
    <id>urn:uuid:1684e30a-1793-48d7-b3e7-fe3a39889718</id>
    <updated>2014-03-19T00:00:00</updated>
    <summary>Virtualenv Support Update
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2014/03/19
    :category: Buildout, Python

This is you: I use virtualenv all the time and I love it!
This is you: "I use virtualenv all the time and I love it! But I hate having to manually upgrade setuptools within my virtualenvs because the 
PyPA has been so prolific with setuptools releases lately
".
Actually this is me, but it may be you too. If this is you, you may be familiar with the following process. If not, you may want to be.
Virtualenv and setuptools
When a virtualenv is created, virtualenv installs setuptools from a local distribution located in 
site-packages/virtualenv_support
. If that setuptools is out of date, so is the setuptools in your new virtualenv. To avoid having to manually upgrade setuptools within newly created virtualenvs, you can do this:
$ cd /usr/local/lib/python2.7/site-packages/virtualenv_support
$ curl -O https://pypi.python.org/packages/source/s/setuptools/setuptools-3.3.zip
Et voila!
$ virtualenv .
New python executable in ./bin/python2.7
Also creating executable in ./bin/python
Installing setuptools, pip...done.
$ bin/pip show setuptools
---
Name: setuptools
Version: 3.3
Location: /private/var/folders/1k/fmmlqcfn5jsbcqrqsw3q_slm0000gn/T/tmpE4vB1l/lib/python2.7/site-packages
Requires:
If you are a Buildout user, this should save you 
endless frustration with Buildout attempting to upgrade Setuptools…
attempting to upgrade Setuptools…
attempting to upgrade Setuptools…
attempting to upgrade Setuptools…</summary>
  </entry>
  <entry>
    <title>ZopeSkel</title>
    <link href="https://blog.aclark.net/2014/01/11/hello-plone-updated/index.html"/>
    <id>urn:uuid:d9feb5aa-e8c3-4245-a194-90531210ef9e</id>
    <updated>2014-01-11T00:00:00</updated>
    <summary>Hello Plone Updated
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2014/01/11
    :category: Buildout, Plone

Over two years ago I wrote a blog entry called "Hello, Plone!"
Over two years ago I wrote a blog entry called 
"Hello, Plone!"
.
I've just updated it in order to:
Change the wording
Update the links
Add some comments
What's changed?
As change in technology is constant, you can expect a few details to differ between then and now. Though I generally don't like the term "best practice" I do like to write about "how I do it now" vs "how I did it then".
Buildout
Since "Hello, Plone!" was published Buildout 2.0.0 was released and 
Buildout has given up on attempting to provide module isolation
 in the same way Virtualenv that does. Why? Virtualenv does it better. So if you want to isolate your development from a larger Python installation, use Virtualenv. I routinely use both Buildout and Virtualenv.
Buildout hosting
Ever since I wrote 
Plone 3.3 Site Administration
 I've been maintaining a collection of buildouts. Most recently, I've moved them to a project called 
Plock
. You can also find a bunch of archived buildouts here: 
https://github.com/buildouts
.
ZopeSkel
For folks new to Plone and Python development, it's often helpful to use a code generator to get started developing. The original 
hello_plone
 included some ZopeSkel instructions. In this round, I've opted to include manual instructions instead e.g.:
$ mkdir -p my.app/my/app
$ touch my.app/my/app/__init__.py
$ touch my.app/my/__init__.py
$ touch my.app/my/app/configure.zcml
Why? Generally speaking, I now prefer to educate folks about Python packaging more so than code generation.
Check out the new old post here: 
http://blog.aclark.net/2011/08/20/hello-plone/
.</summary>
  </entry>
  <entry>
    <title>Distributions</title>
    <link href="https://blog.aclark.net/2014/01/01/pillow-2-3-0-is-out/index.html"/>
    <id>urn:uuid:e96d34de-f153-443f-b561-54ebc9f3864d</id>
    <updated>2014-01-01T00:00:00</updated>
    <summary>Pillow 2-3-0 is Out
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2014/01/01
    :category: Pillow, Python

Pillow is the friendly PIL fork by Alex Clark and Contributors. PIL is the Python Imaging Library by Fredrik Lundh and Contributors
Since Pillow 2.0, the Pillow Team has adopted a quarterly release cycle; as such, Pillow 2.3.0 has just been released. Here's what's new in this release:
2.3.0 (2014-01-01)
Stop leaking filename parameter passed to getfont
[jpharvey]
Report availability of LIBTIFF during setup and selftest
[cgohlke]
Fix msvc build error C1189: "No Target Architecture"
[cgohlke]
Fix memory leak in font_getsize
[wiredfool]
Correctly prioritize include and library paths
[ohanar]
Image.point fixes for numpy.array and docs
[wiredfool]
Save the transparency header by default for PNGs
[wiredfool]
Support for PNG tRNS header when converting from RGB->RGBA
[wiredfool]
PyQT5 Support
[wiredfool]
Updates for saving color tiffs w/compression using libtiff
[wiredfool]
2gigapix image fixes and redux
[wiredfool]
Save arbitrary tags in Tiff image files
[wiredfool]
Quote filenames and title before using on command line
[tmccombs]
Fixed Viewer.show to return properly
[tmccombs]
Documentation fixes
[wiredfool]
Fixed memory leak saving images as webp when webpmux is available
[cezarsa]
Fix compiling with FreeType 2.5.1
[stromnov]
Adds directories for NetBSD.
[deepy]
Support RGBA TIFF with missing ExtraSamples tag
[cgohlke]
Lossless WEBP Support
[wiredfool]
Take compression as an option in the save call for tiffs
[wiredfool]
Add support for saving lossless WebP. Just pass 'lossless=True' to save()
[liftoff]
LCMS support upgraded from version 1 to version 2, fixes #343
[wiredfool]
Added more raw decoder 16 bit pixel formats
[svanheulen]
Document remaining Image* modules listed in PIL handbook
[irksep]
Document ImageEnhance, ImageFile, ImageFilter, ImageFont, ImageGrab, ImageMath, and ImageOps
[irksep]
Port and update docs for Image, ImageChops, ImageColor, and ImageDraw
[irksep]
Move or copy content from README.rst to docs/
[irksep]
Respect CFLAGS/LDFLAGS when searching for headers/libs
[iElectric]
Port PIL Handbook tutorial and appendices
[irksep]
Alpha Premultiplication support for transform and resize
[wiredfool]
Fixes to make Pypy 2.1.0 work on Ubuntu 12.04/64
[wiredfool]
Thanks to everyone who contributed fixes to 2.3.0, especially Eric Soroos AKA "wiredfool" who is officially now "Pillow Man #2" 
1
.
Handbook
Additionally, we've forked the PIL handbook and have included it with our documentation here: 
http://pillow.readthedocs.org
. Special thanks to Stephen Johnson AKA "irksep" for working on this.
Distributions
Lastly, I'm very grateful to Christopher Gohlke for producing Windows Egg, Exe, and Wheel distributions to accompany each source release. I suspect Christopher will produce his 2.3.0 distributions any second now at which point I will upload them to PyPI via 
twine
.
Enjoy Pillow 2.3.0! And please report any issues you find here: 
https://github.com/python-imaging/Pillow/issues
1
In case I'm hit by a bus, Eric Soroos has the keys.</summary>
  </entry>
  <entry>
    <title>What is the top software, application or library you wish someone would write next year?</title>
    <link href="https://blog.aclark.net/2013/12/30/new-years-python-meme-2014/index.html"/>
    <id>urn:uuid:a2925320-c30b-448c-a515-942850e75d76</id>
    <updated>2013-12-30T00:00:00</updated>
    <summary>New Year's Python Meme 2014
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2013/12/30
    :category: Python

Tarek Ziadé's New Year's Python Meme
What’s the coolest Python application, framework or library you discovered this year?
This year we have a tie between two must-have packaging-related utilities:
check-manifest
pyroma
Both of these utilities help you make better Python packages, and I regularly use them in my packages via a Makefile like this:
test:
    check-manifest
    flake8 *.py
    pyroma
    python setup.py sdist
    python setup.py test
    viewdoc
Good times! And better packages.
What new programming technique did you learn this year?
I didn't program much in 2013 but when I did, I tried to write tests too. Check out the following projects to see how I did:
Plock
PythonPackages
Which open source project did you contribute to the most this year? What did you do?
Pillow
. Fork author and project lead. Aside from a working PIL, the most exciting thing about Pillow for me is my 
Gittip funding
 and working with the 
Pillow Team
 which includes most notably Eric Soroos and Christopher Gohlke.
Which Python blogs, websites, or mailing lists did you read the most this year?
This year I cut back to reading 
only
 the following feeds, consumed via Feedly:
Planet Plone
Planet Python
gmane.comp.web.zope.plone.devel
gmane.comp.web.zope.plone.user
What are the top three things you want to learn next year?
JavaScript
Duplicate explicit target name: "javascript".
JavaScript
Duplicate explicit target name: "javascript".
JavaScript
What is the top software, application or library you wish someone would write next year?
I wish there was some "Python to JavaScript bridge software". It's not the complexities of JavaScript that keep me from learning it, it's that I don't have any reason to obsess over it. Plone gave me that opportunity with Python, but not JavaScript (yet). Once that happens, I'm sure I'll be as proficient in JavaScript as I am currently in Python (which is enough to get by).
Want to participate? Copy/paste/answer the questions below then tweet your entry with the #2014pythonmeme hash tag:
New Year's Python Meme
======================

What’s the coolest Python application, framework or library you discovered this year?
----------------------------------------------------------------------------------------
What new programming technique did you learn this year?
----------------------------------------------------------------------------------------
Which open source project did you contribute to the most this year? What did you do?
----------------------------------------------------------------------------------------
Which Python blogs, websites, or mailing lists did you read the most this year?
----------------------------------------------------------------------------------------
What are the top three things you want to learn next year?
----------------------------------------------------------------------------------------
What is the top software, application or library you wish someone would write next year?
----------------------------------------------------------------------------------------</summary>
  </entry>
  <entry>
    <title>Removed themes</title>
    <link href="https://blog.aclark.net/2013/12/29/plonetheme-report/index.html"/>
    <id>urn:uuid:22edb272-eb88-4a0b-ac45-84a3386505d9</id>
    <updated>2013-12-29T00:00:00</updated>
    <summary>Plonetheme Report
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2013/12/29
    :category: Buildout, Plone

Here is another report on Plone themes.
Here is another report on Plone themes 
1
 generated by plock 
2
Possible incomplete section title.
Treating the overline as ordinary text because it's so short.
::
Blank line missing before literal block (after the "::")? Interpreted as a definition list item.
#!/bin/sh
for i in 
plock -l -r | grep plonetheme

do
plock . -a $i
done
Plock is able to produce a Buildout configuration file containing all themes that successfully installed via Buildout; I manually removed the themes that caused Plone start to fail.
Before Plone start
[buildout]
extends = https://raw.github.com/plock/pins/master/plone-4-3

[plone]
eggs =
    ${addon:packages}
    ${base:packages}
    plonetheme.ReOrg
    plonetheme.aclark_twitter
    plonetheme.aqueouslight
    plonetheme.arnolfini
    plonetheme.bananaleaf
    plonetheme.basic
    plonetheme.bluegray
    plonetheme.burned
    plonetheme.classic
    plonetheme.cleantheme
    plonetheme.codapress
    plonetheme.colorfulworld
    plonetheme.coolblue
    plonetheme.criticas
    plonetheme.cultureCab
    plonetheme.darkened
    plonetheme.delicious2
    plonetheme.diazo_sunburst
    plonetheme.discovery
    plonetheme.drupal
    plonetheme.earthlingtwo
    plonetheme.evergreen
    plonetheme.ewb_case
    plonetheme.freshpick
    plonetheme.fui
    plonetheme.gemstone
    plonetheme.gov
    plonetheme.greencommunity
    plonetheme.grungeera
    plonetheme.html5_hotpink
    plonetheme.inbusiness
    plonetheme.intk
    plonetheme.jsjamba
    plonetheme.keepitsimple
    plonetheme.laboral
    plonetheme.labs
    plonetheme.leavesdew
    plonetheme.level2
    plonetheme.mimbo
    plonetheme.mvob
    plonetheme.netsightintranet
    plonetheme.nonzero
    plonetheme.notredame
    plonetheme.overlappedtabs
    plonetheme.p2
    plonetheme.ploneorg
    plonetheme.porseleinplaats
    plonetheme.pyar
    plonetheme.rcom
    plonetheme.redmusic
    plonetheme.relic
    plonetheme.responsive1140
    plonetheme.responsivetheme
    plonetheme.solemnity
    plonetheme.stylized
    plonetheme.subordinate
    plonetheme.sunburst
    plonetheme.terrafirma
    plonetheme.tidyblog
    plonetheme.transition
    plonetheme.twinapex
    plonetheme.unilluminated
    plonetheme.wmoWonen
    plonetheme.woodexperience
    plonetheme.xtheme
    sphinx.plonetheme
    vs.bootstrap.plonetheme
After Plone start
[buildout]
extends = https://raw.github.com/plock/pins/master/plone-4-3

[plone]
eggs =
    ${addon:packages}
    ${base:packages}
    plonetheme.ReOrg
    plonetheme.aclark_twitter
    plonetheme.aqueouslight
    plonetheme.bananaleaf
    plonetheme.basic
    plonetheme.bluegray
    plonetheme.burned
    plonetheme.classic
    plonetheme.cleantheme
    plonetheme.codapress
    plonetheme.colorfulworld
    plonetheme.coolblue
    plonetheme.criticas
    plonetheme.cultureCab
    plonetheme.darkened
    plonetheme.delicious2
    plonetheme.diazo_sunburst
    plonetheme.discovery
    plonetheme.drupal
    plonetheme.earthlingtwo
    plonetheme.evergreen
    plonetheme.ewb_case
    plonetheme.freshpick
    plonetheme.fui
    plonetheme.gemstone
    plonetheme.greencommunity
    plonetheme.grungeera
    plonetheme.html5_hotpink
    plonetheme.inbusiness
    plonetheme.jsjamba
    plonetheme.keepitsimple
    plonetheme.labs
    plonetheme.leavesdew
    plonetheme.level2
    plonetheme.mimbo
    plonetheme.nonzero
    plonetheme.notredame
    plonetheme.overlappedtabs
    plonetheme.p2
    plonetheme.ploneorg
    plonetheme.pyar
    plonetheme.rcom
    plonetheme.redmusic
    plonetheme.relic
    plonetheme.responsive1140
    plonetheme.responsivetheme
    plonetheme.solemnity
    plonetheme.stylized
    plonetheme.subordinate
    plonetheme.sunburst
    plonetheme.terrafirma
    plonetheme.tidyblog
    plonetheme.transition
    plonetheme.twinapex
    plonetheme.unilluminated
    plonetheme.woodexperience
    plonetheme.xtheme
    sphinx.plonetheme
    vs.bootstrap.plonetheme
Removed themes
plonetheme.arnolfini
plonetheme.gov
plonetheme.intk
plonetheme.laboral
plonetheme.mvob
plonetheme.netsightintranet
plonetheme.porseleinplaats
plonetheme.wmoWonen
Not bad! That's a lot of working themes for Plone 4, many of which use Diazo.
1
In the 
plonetheme
 namespace.
2
Plock is a Plone installer for the pip-loving crowd: 
https://plock.github.com
.</summary>
  </entry>
  <entry>
    <title>Enjoy</title>
    <link href="https://blog.aclark.net/2013/10/13/python-packages-open-sourced/index.html"/>
    <id>urn:uuid:316c8194-7cb8-4f71-818f-a4fbfeb1a54e</id>
    <updated>2013-10-13T00:00:00</updated>
    <summary>Python Packages Open Sourced
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2013/10/13
    :category: Python

Today I am open sourcing the code that ran pythonpackages.com from late 2011 to late 2012.
You can find it here:
https://github.com/pythonpackages/vanity_app
Why I Waited
I waited a long time before doing this because:
It's embarrassing. I originally wanted to have pythonpackages.com rewritten with some tests before doing this. But that never happened.
Some of it was private. The original repository had things like the database checked in to it which had users' names in it. There were also various and sundry account credentials and API keys that needed to be removed. It took some time and motivation to get all that done.
I needed historical perspective which does not occur without the passage of time. The packaging landscape has totally changed for the better since I last worked on pythonpackages.com, and I'm now ready to put the past behind me and focus on the future.
Why Now
I managed to find some time thanks to the U.S. Government <cough> (Speaking of that: this would be a great time to hire me for any tasks you need done. Email: 
aclark@aclark.net
)
Folks have been asking about it. I originally planned to re-launch by Q2 2013, but that nevered happened. I'm now planning to have something working by the end of the year and I'm actively working on the site again as of right now.
I know what to focus on. The original pythonpackages.com tried to do way too much, but the most useful thing it did was automate the release of packages from GitHub to PyPI through a GitHub service: 
https://github.com/github/github-services/blob/master/lib/services/pythonpackages.rb
. I'm going to focus on getting that working again without all the spaghetti code wrapped around it. I believe a lot of useful services can be built around this feature.
Enjoy
I hope you enjoy reading the source and if you end up using it for something please drop me a line: 
aclark@aclark.net
.</summary>
  </entry>
  <entry>
    <title>Support</title>
    <link href="https://blog.aclark.net/2013/10/03/pillow-2.2.1-released/index.html"/>
    <id>urn:uuid:7fa34458-9a92-4d88-96fe-0981e716f0ff</id>
    <updated>2013-10-03T00:00:00</updated>
    <summary>Pillow 2.2.1 Released
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2013/10/03
    :category: Pillow, Python

Pillow is the "friendly" PIL fork. PIL is the Python Imaging Library.
An earlier version of this entry was published yesterday with the wrong date. Apologies for any annoyance or confusion.
The Pillow 2.2.1 source distribution is 
now available on PyPI
, featuring over 30 documented bug fixes and enhancements since 2.1.0 was released 3 months ago.
Changelog
Fix 
#254
: Bug in image transformations resulting from uninitialized memory [nikmolnar]
Fix for encoding of b_whitespace, similar to closed issue 
#272
 [mhogg]
Fix 
#273
: Add numpy array interface support for 16 and 32 bit integer modes [cgohlke]
Partial fix for 
#290
: Add preliminary support for TIFF tags. [wiredfool]
Fix 
#251
 and 
#326
: circumvent classification of pngtest_bad.png as malware [cgohlke]
Add typedef uint64_t for MSVC. [cgohlke]
Fix 
#329
: setup.py: better support for C_INCLUDE_PATH, LD_RUN_PATH, etc. [nu774]
Fix 
#328
: _imagingcms.c: include windef.h to fix build issue on MSVC [nu774]
Automatically discover homebrew include/ and lib/ paths on OSX [donspaulding]
Fix bytes which should be bytearray [manisandro]
Add respective paths for C_INCLUDE_PATH, LD_RUN_PATH (rpath) to build if specified as environment variables. [seanupton]
Fix 
#312
 + gif optimize improvement [d-schmidt]
Be more tolerant of tag read failures [ericbuehl]
Fix 
#318
: Catch truncated zTXt errors. [vytisb]
Fix IOError when saving progressive JPEGs. [e98cuenc]
Add RGBA support to ImageColor [yoavweiss]
Fix 
#304
: test for str, not "utf-8". [mjpieters]
Fix missing import os in _util.py. [mnowotka]
Added missing exif tags. [freyes]
Fail on all import errors, fixes 
#298
. [macfreek, wiredfool]
Fixed Windows fallback (wasn't using correct file in Windows fonts). [lmollea]
Moved ImageFile and ImageFileIO comments to docstrings. [freyes]
Restore compatibility with ISO C. [cgohlke]
Use correct format character for C int type. [cgohlke]
Allocate enough memory to hold pointers in encode.c. [cgohlke]
Fix 
#279
, fillorder double shuffling bug when FillOrder ==2 and decoding using libtiff. [wiredfool]
Moved Image module comments to docstrings. [freyes]
Add 16-bit TIFF support, fixes 
#274
. [wiredfool]
Duplicate explicit target name: "#272".
Ignore high ascii characters in string.whitespace, fixes 
#272
. [wiredfool]
Added clean/build to tox to make it behave like travis. [freyes]
Adding support for metadata in webp images. [heynemann]
Distributions
In addition to the 
source distribution
, there are also Python Eggs and Windows Installers available (for 32 and 64 bit) and for the first time ever: Python Wheels! (New built-package format supported by pip.)
Support
The Pillow Team
 has really settled in to the groove of making Pillow releases every three months, and I am very proud to be a part it! Special thanks to Eric Soroos and Christopher Gohlke for their invaluable help with Pillow 2.2.1.
If you use Pillow professionally, please consider 
supporting its development
.</summary>
  </entry>
  <entry>
    <title>Issues</title>
    <link href="https://blog.aclark.net/2013/07/29/whats-new-as-of-plock-0-1-2/index.html"/>
    <id>urn:uuid:17c82e32-4731-420c-bac7-24ea9dab089f</id>
    <updated>2013-07-29T00:00:00</updated>
    <summary>What's new as of Plock 0-1-2?
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2013/07/29
    :category: Plone

Plock is a Plone Installer for the Pip-Loving Crowd.
I blogged about Plock after 0.0.1 was released and a lot of progress has been made since then, so I thought I'd give an update. But rather than a traditional list-the-changelog-style-blog-entry, I thought I'd walk you through what you can do with Plock as of version 0.1.2.
Install Plone
Plock exists to the eliminate cognitive dissonance experienced by Python programmers who want to install Plone but don't want to think about installing Plone. Such folks can now type the following to install Plone 4.3 (inside an activated virtualenv of course):
$ pip install plock
$ plock
Installing Plone. This may take a while.......(3)....(4)....(4)....(4)....(5)....(5)....(9)....(14)....(21)....(24)....(29)....(33)....
(38)....(43)....(48)....(54)....(58)....(62)....(66)....(71)....(74)....(78)....(78)....(83)....(87)....(89)....(92)....(97)....(98)....
(98)....(98)....(98)....(98)....(100)....(102)....(103)....(108)....(110)....(113)....(115)....(120)....(123)....(128)....(133)....(138)....
(142)....(148)....(153)....(158)....(161)....(163)....(168)....(171)....(175)....(179)....(181)....(184)....(189)....(193)....(195)....(198)....
(203)....(205)....(210)....(214)....(221)....(224)....(228)....(234). done.
Run Plone
With Plock, you can 
truly
 run Plone because you are not running scripts with any of the following not-plone names: client, instance, zope.
$ plone fg
List add-ons
One of the biggest attractions to using Plone is all the work on your new web project that has already been done for you. There are over 1,200 packages on PyPI with "plone" in either the description, keywords list, or summary. Some of these are part of the core, and some don't work with the latest release, but there are still a lot of add-ons available (I'm currently working on an accurate count.)
$ plock -l
Install add-ons
With Plock, installing add-ons is done from the command line. Pick a Python package name and install-away:
$ plock -i Products.PloneFormGen
Installing Plone. This may take a while... done.
Or pick two or more:
$ plock -i Products.PloneFormGen collective.cover
Installing Plone. This may take a while... done.
(If you have already installed an add-on with Plock, you can preserve the currently installed list with 
-p
. Otherwise, the add-ons installed are replaced with each new call to 
-i
.)
If you pick a bad one, Plock has your back:
$ plock -i foo
Installing Plone. This may take a while... error!
In the above scenario, Plock restored your previous configuration before reporting the error and exiting.
All the rest
For more details, please see:
https://github.com/aclark4life/plock/blob/master/CHANGES.rst#changelog
Issues
If you use Plock and have an issue, please report it here:
https://github.com/aclark4life/plock/issues</summary>
  </entry>
  <entry>
    <title>Add-ons</title>
    <link href="https://blog.aclark.net/2013/07/19/introducing-plock/index.html"/>
    <id>urn:uuid:95e60b75-d579-4806-82b7-9a88bd232c23</id>
    <updated>2013-07-19T00:00:00</updated>
    <summary>Introducing Plock
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2013/07/19
    :category: Buildout, Plone

Plock is a Plone Installer for the Pip-Loving Crowd. Plone is a Python-based CMS.
Installing Plone with 
Plock
 looks like this:
$ pip install plock
$ bin/install-plone
$ bin/plone fg
Configuration
Plone uses 
Buildout
 to manage its installation and configuration. Plock creates a 
buildout.cfg
 file for you that looks like this:
[buildout]
extends = https://raw.github.com/pythonpackages/buildout-plone/master/latest

[plone]
eggs +=
# Add-ons go here e.g.:
#    Products.PloneFormGen
Add-ons
See 
https://pypi.python.org/pypi?:action=browse&show=all&c=563
 for a complete list of add-ons compatible with Plone 4.3.
To install add-ons, add the desired Python package name(s) to the 
eggs +=
 parameter e.g.:
[buildout]
extends = https://raw.github.com/pythonpackages/buildout-plone/master/latest

[plone]
eggs +=
    Products.PloneFormGen
Stop Plone and run Buildout:
$ bin/buildout
Start Plone:
$ bin/plone fg
Install the add-on(s) in Plone via Site Setup -> Add-ons.</summary>
  </entry>
  <entry>
    <title>Go get it now</title>
    <link href="https://blog.aclark.net/2013/07/02/pillow-2-1-0-is-out/index.html"/>
    <id>urn:uuid:a120f543-5160-4fc3-af2c-e1a3c8ddeb04</id>
    <updated>2013-07-02T00:00:00</updated>
    <summary>Pillow 2-1-0 is Out
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2013/07/02
    :category: Pillow, Python

Pillow is a popular fork of PIL by Alex Clark and Contributors. PIL is the Python Imaging Library by Fredrik Lundh and Contributors
Pillow 2.1.0 is out!
 With this release, the Pillow team has 
finally
 removed support for "import _imaging", thus completing the move of PIL modules into the PIL namespace 
1
. Many thanks to Eric Soroos (AKA wiredfool) who completed the majority of this work. Also a big thanks to Christopher Gohlke and 
Arfrever
 both of whom rallied around a push to get the 2.1.0 release out on schedule. And I want to thank everyone else who reported an issue and/or sent a pull request to help make this release the best it could be.
Quarterly release cycle
After the March 15, 2013 release of Pillow 2.0.0 we decided to adopt a quarterly release cycle. So every three months, as long as the patches keep coming you will see a new Pillow release.
Look ma no official funding
Pillow 2.0.0 was an enormous effort, made possible by a generous grant from the Python Software Foundation. But things have stablized quite a bit since then. So much so, that with help from many others I was able to squeeze this release into my normal schedule. However you are always welcome to financially help support Pillow, especially if you are using it in a commercial environment. Committers are encouraged to add their name here if they'd like to receive donations:
https://github.com/python-imaging/Pillow/blob/master/README.rst#support
And I have personally steered my gittip profile entirely towards Pillow production.
<script data-gittip-username="aclark4life"
src="https://www.gittip.com/assets/widgets/0002.js">
</script>
Go get it now
Pillow 2.1.0 source and binaries are available on PyPI. Please use, enjoy, and 
report issues
.
1
Which began with the first release of Pillow 1.0 on 2010-07-31 in which support for "import Image" was removed.</summary>
  </entry>
  <entry>
    <title>Conclusion</title>
    <link href="https://blog.aclark.net/2013/06/22/plone-org-upgraded/index.html"/>
    <id>urn:uuid:149753ba-1112-4d86-839e-e5b754f1251d</id>
    <updated>2013-06-22T00:00:00</updated>
    <summary>Plone.org Upgraded
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2013/06/22
    :category: Plone

Recently I upgraded plone.org from Plone 4.2 to Plone 4.3.
Recently at the behest of Liz Leddy, I 
upgraded plone.org from Plone 4.2 to Plone 4.3
. It's been a while since I had the pleasure, so I thought I'd make some notes: for myself, the AI Team and anyone else interested in the process.
Background
Plone.org is one of the 
oldest Plone sites in existence
, having been launched circa Plone 1 and upgraded in place ever since.
It functions remarkably well, given #1.
It's not without its issues, but all of them are manageable — for some value of manageable.
It's often very time consuming to work on.
Pre-Process
The first step is always to get a local copy:
$ git clone git@github.com:plone/Products.PloneOrg.git
$ cd Products.PloneOrg
$ cp buildout.cfg.in buildout.cfg
Edit 
buildout.cfg
 to extend the 
database.cfg
:
[buildout]
# Rename to buildout.cfg and uncomment one of the profiles below
extends =

# Plone only, unthemed
#    conf/develop.cfg

# Copy data local (with plone.org account)
    conf/database.cfg

# Production (for use on plone.org server)
#    conf/production.cfg

# Staging (for use on plone.org server)
# and Deployment (for use by Jenkins, admins and developers),
#   fabric can be added to any of primary configurations

#    conf/staging.cfg
#    conf/fabric.cfg

# Developer Database Drop; makes developer-friendly copies
# of plone.org's content.
#    conf/devdrop.cfg
Bootstrap and run Buildout:
$ virtualenv-2.7 .
$ bin/pip install zc.buildout
$ bin/buildout
Make the appropriate configuration changes i.e. change 
extends
 from 4.2 to 4.3:
[buildout]
develop = .
extends =
    http://dist.plone.org/release/4.3.1/versions.cfg
    versions.cfg
    sources.cfg
extensions =
#    buildout.dumppickedversions
    buildout.threatlevel
    mr.developer

versions = versions
sources-dir = sources
eggs =
    Pillow
    Products.PloneOrg
    Products.PloneHotfix20130618

# get us a user and group variable
[env]
recipe = gocept.recipe.env
[grp]
recipe = collective.recipe.grp
Run the upgrade locally. With plone.org data this takes about 45 minutes to an hour 
1
.
If the upgrade succeeds, you are ready to launch. If it fails, fix the errors before proceeding.
Process
We know from upgrading locally that the process will take about 45 minutes to an hour, so you should 
allocate about 2 hours to do the upgrade
.
Announce the upgrade: preferably a week or two in advance. The plone-developers and plone-users lists are probably sufficient, but you can create a plone.org news item too if you are feeling extra-ambitious. I only had a small window to perform this maintenance, so I skipped this step and proceeded directly to the next one.
Add a status message to plone.org to indicate a maintenance window is in progress. I chose to customize the 
main_template
 to accomplish this, but ideally we'd have some functionality in Plone that allowed site administrators to easily configure status messages.
Disable logins. Since the upgrade takes a long time, we don't want content being edited during this process. I chose to use David Glick's technique of disabling PAS. I moved the ldap authentication plugin to the Active Plugin list, thus disabling PAS such that only ZODB users could login. But ideally we'd have some feature in Plone to allow site administrators to disable logins.
Run the upgrade. I forgot to mention earlier something very important: 
On plone.org, you can't access Zope from the internet.
 And you can't run the upgrade without accessing Zope. Hence run the following command to access the server, then access Plone via 
http://localhost:8080
:
$ ssh -L 8080:10.57.0.107:5011 direct.plone.org
After the upgrade finishes, click around to make sure you didn't break anything. In my case, I broke something — I normally move 
portal_skins/custom
 out of the way before upgrading, but this time I forgot. And when I experienced minor JavaScript issues, I forgot to examine custom; which currently looks like this:
Even if I had remembered, I didn't want to spend the next few hours examining database customizations. Fortunately, before I realized I had forgotten to check custom, I emailed the plone-developers list — and Nathan Van Gheem to the rescue! He fixed some JavaScript in custom, then I cleared the cache(s). Ideally Plone would report on database customizations during the upgrade process: to indicate the potential for breakage and encourage the site administrator to round-trip those customizations back to the file system.
Conclusion
That's it! I hope this helps folks wrap their head around the plone.org upgrade process. A few closing thoughts:
With Cloudflare in front, we probably don't need Varnish anymore.
Leaving a note in 
portal_skins/custom
 to encourage folks to "please keep this area clean" — does not work.
plone.com anyone? I don't know the future of plone.org and I have mixed feelings about it: on the one hand, I'm proud to help maintain such an old and venerable system. On the other hand, I think plone.org should be retired in a way similar to old.zope.org. What do you think?
1
It shouldn't take this long. See: 
https://github.com/plone/Products.PloneOrg/commit/b04105f7c9cacf3880c12effba5ffe261d4b5163#commitcomment-3384259
 for a discussion about this issue.</summary>
  </entry>
  <entry>
    <title>Who cares</title>
    <link href="https://blog.aclark.net/2013/04/22/new-pyramid-site/index.html"/>
    <id>urn:uuid:7f3a732a-1eaa-4767-beb8-249869d5566b</id>
    <updated>2013-04-22T00:00:00</updated>
    <summary>New Pyramid Site
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2013/04/22
    :category: Pyramid, Python

For the first time in 10 years, http://aclark.net is not powered by Plone.
Nothing against Plone: it's still one of the greatest loves of my life (inasmuch as you can love a software and community, as I do).
Why
This was not the result of a revolutionary plan, rather more of an evolution. It happened like this:
As soon as Plone 4.3a1 was released (a year ago?) I deployed a new Plone site to aclark.net with it, featuring a 
Diazo
 (new Plone theming engine) theme.
Around the same time I became obsessed with deploying to Heroku, and also gained an interest in 
Python 3
.
A few months ago, I got tired of paying $11/month to host my Plone site so I converted the site to 
static HTML
 and moved it to 
GitHub pages
. But the result was flawed because maintenance involved editing duplicate copies of the website content (e.g. both clients.html and clients/foo.html contained the same text describing "foo").
So when it came time to do more than a few casual edits, I knew I had to find a new approach. That's when various elements of the Universe conspired to lead me in a new direction.
How
Pyramid
I spent a lot of time (~ 1 year) developing 
pythonpackages.com
 in Pyramid, but the result was a mess (code-wise). I'm in the process of rewriting and open sourcing it, but it's slow going. So what better way to get started than to do a small-ish site in Pyramid for fun?
about.me
I also recently gave in and created an 
about.me site
. I was impressed by their content editing features, and my ability to create a page that looked OK using them.
In my about.me profile, I used a picture of me and a picture of DC I took in early 2012. When it came time to redo aclark.net I felt like I really wanted to capture the simplicity of the about.me site, so I used the same photo in the background.
Bootstrap
Bootstrap is old news at this point, but I really enjoy using it and I particularly like that they have added more example templates. So I combined my background photo with one of 
their example templates
 and a new site idea was born. As I'm not a particularly talented visual artist, my ability to produce something that looked OK (with code this time) was exciting.
What
Until I added a contact form, the site was entirely unremarkable. There are views and routes and templates, typical fare for a web framework. Here is the entire "main routine":
from pyramid.session import UnencryptedCookieSessionFactoryConfig
from pyramid.config import Configurator
from .redir import blog
from .redir import blog_entry
from .redir import blog_slash
from .views import contact
from .views import default
import deform_bootstrap


def main(global_config, **settings):
    """
    Oppan wsgi style! Configure and return WSGI application.
    """
    my_session_factory = UnencryptedCookieSessionFactoryConfig('itsaseekreet')
    config = Configurator(session_factory=my_session_factory)
    config.add_route('blog', '/blog')
    config.add_route('blog_entry', '/blog/{entry:.*}')
    config.add_route('blog_slash', '/blog/')
    config.add_route('contact', '/contact')
    config.add_route('clients', '/clients')
    config.add_route('projects', '/projects')
    config.add_route('services', '/services')
    config.add_route('team', '/team')
    config.add_route('testimonials', '/testimonials')
    config.add_route('root', '/')
    config.add_static_view(
        'static', 'aclarknet:static', cache_max_age=3600)
    config.add_view(blog, route_name='blog')
    config.add_view(blog_entry, route_name='blog_entry')
    config.add_view(blog_slash, route_name='blog_slash')
    config.add_view(
        default,
        renderer='aclarknet:templates/clients.mak',
        route_name='clients')
    config.add_view(
        contact,
        renderer='aclarknet:templates/contact.mak',
        route_name='contact')
    config.add_view(
        default,
        renderer='aclarknet:templates/projects.mak',
        route_name='projects')
    config.add_view(
        default,
        renderer='aclarknet:templates/root.mak',
        route_name='root')
    config.add_view(
        default,
        renderer='aclarknet:templates/services.mak',
        route_name='services')
    config.add_view(
        default,
        renderer='aclarknet:templates/testimonials.mak',
        route_name='testimonials')
    config.add_view(
        default,
        renderer='aclarknet:templates/team.mak',
        route_name='team')
    config.include(deform_bootstrap)
    return config.make_wsgi_app()
Contact form
But then I wanted a contact form. Which lead me to wanting an elegant way to send mail via Heroku. Which lead me to discover 
SendGrid
. Which lead me create some primitive marketing features I am quite proud of and excited about.
I still ended up sending mail "the old way" via GMail. But now I send two mails: one to 
info@aclark.net
 to alert our staff about the lead (using GMail). And one to the lead acknowledging their submission (using SendGrid). SendGrid keeps a record of all the leads we've contacted, amongst other "fancy marketing features". Here's the relevant view code:
import deform
import smtplib

from email.mime.text import MIMEText

from .config import FORM_ERROR
from .config import FORM_SUCCESS

from .config import MIME_ONE_RECIPIENT
from .config import MIME_ONE_SUBJECT
from .config import MIME_TWO_MESSAGE
from .config import MIME_TWO_SUBJECT

from .config import GMAIL_HOSTNAME
from .config import GMAIL_PASSWORD
from .config import GMAIL_USERNAME

from .config import SENDGRID_HOSTNAME
from .config import SENDGRID_PASSWORD
from .config import SENDGRID_USERNAME

from .forms import ContactFormSchema


def contact(request):
    """
    Create and render deform form containing colander schema. Provide
    sendgrid integration for marketing.
    """
    button = deform.Button('Send', css_class='span9 btn-block btn-large')
    schema = ContactFormSchema().bind(request=request)
    form = deform.Form(schema, buttons=(button, ))
    if 'Send' in request.POST:
        items = request.POST.items()
        try:
            appstruct = form.validate(items)
        except deform.ValidationFailure:
            return {
                'form': form.render(),
                'request': request,
            }
        # This is the form contents
        email = appstruct['email']
        message = appstruct['message']

        # This is the mail to info@aclark.net
        mime_document_one = MIMEText(message)
        mime_document_one['Subject'] = MIME_ONE_SUBJECT
        mime_document_one['To'] = MIME_ONE_RECIPIENT
        mime_document_one['From'] = email
        mime_document_one = mime_document_one.as_string()

        # This is the mail to the new lead
        mime_document_two = MIMEText(MIME_TWO_MESSAGE)
        mime_document_two['Subject'] = MIME_TWO_SUBJECT
        mime_document_two['To'] = email
        mime_document_two['From'] = MIME_ONE_RECIPIENT
        mime_document_two = mime_document_two.as_string()

        try:
            # This is the mail to info@aclark.net
            smtp_server = smtplib.SMTP(GMAIL_HOSTNAME)
            smtp_server.starttls()
            smtp_server.login(GMAIL_USERNAME, GMAIL_PASSWORD)
            smtp_server.sendmail(email, MIME_ONE_RECIPIENT, mime_document_one)
            smtp_server.quit()

            # This is the mail to the new lead
            smtp_server = smtplib.SMTP(SENDGRID_HOSTNAME)
            smtp_server.starttls()
            smtp_server.login(SENDGRID_USERNAME, SENDGRID_PASSWORD)
            smtp_server.sendmail(MIME_ONE_RECIPIENT, email, mime_document_two)
            smtp_server.quit()
            request.session.flash(FORM_SUCCESS)
        except:
            request.session.flash(FORM_ERROR, 'errors')
        return {
            'form': form.render(appstruct={}),
            'request': request,
        }
    return {
        'form': form.render(),
        'request': request,
    }


def default(request):
    """
    This is the default view, to be used with most routes since we do not
    provide any content editing ability yet. Even then, maybe a default view
    would still be helpful.
    """
    return {}
Who cares
The best thing about all of this being able to run the site 
100% for free on Heroku
. Also:
Python 3 compat!
Free caching via CloudFlare
Free ping service from Pingdom keeps the site from "going to sleep" (HT: natea).
Updating the site fits my workflow. If I'm the content editor, I don't necessarily need or want to use Plone to edit my content. I can save Plone for my clients, and focus on 
what makes them happy
 with their CMS system.</summary>
  </entry>
  <entry>
    <title>About 2.0.0</title>
    <link href="https://blog.aclark.net/2013/03/15/the-story-of-pillow/index.html"/>
    <id>urn:uuid:1807d92e-4d52-490e-b2d8-20af8681f002</id>
    <updated>2013-03-15T00:00:00</updated>
    <summary>The Story of Pillow
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2013/03/15
    :category: Pillow, Python

On March 4, 2013 I got an email from the Python Software Foundation
On March 4, 2013 I got an email from the Python Software Foundation (PSF):
This email notification is being sent to you to inform you of the PSF Board’s decision to fund the facilitation of a Python 3 compatible release of the Python Imaging Library for the amount of $1,300 USD. Please see the resolution that was passed unanimously on March 4, 2013 via email below:
Yay! That was in response to 
my proposal
 asking for funding to finish a Pillow 2.0.0 release. In that proposal, I presented the "story of Pillow" which I'd like to present again now, for anyone interested:
Tired of seeing the proliferation of third party packagings of the Python Imaging Library, in 2010 Alex Clark took Hanno Schlicting's repackaging and used it to create a fork of the Python Imaging Library on GitHub. He subsequently released that fork to PyPI as Pillow 1.0. The ability to add additional development library paths to setup.py (e.g. 64 bit library and headers directories) and make releases quickly eventually led to widespread adoption of Pillow.
A little over a year later on 2011-09-08, Takayuki Shimizukawa uploaded the first Windows (win32) eggs. Since then, every Pillow release included Windows eggs thanks to Takayuki. And on 2013-02-02, the first 64-bit Windows eggs (amd64) were uploaded to PyPI by Takayuki.
For the first 3 years, the fork focused on packaging fixes only. Now a Python 3 compatible pull request from Brian Crowell has been merged, and the final stages of release preparation are underway. In early 2013, Barry Warsaw created an Ubuntu Personal Package Archive and tested it with Python 3. And the Fedora Project is now planning to include Pillow with their release of Fedora 19. Finally, the Pillow project has promised a Python 3 compatible release of Pillow by PyCon 2013.
That release is now done! And I have had an absolute blast working on Pillow full time over the course of the last week or so. So much so, that I'm going to propose you help me continue to have fun and be productive with Pillow… but more on that later. First, about the new release.
About 2.0.0
This release marks the first "serious effort" I have put into Pillow. While I've always enjoyed working on it in my spare time, I knew that there was no way I could finish it in time for PyCon 2013 (as I promised) without getting some financial assistance.
Enter: The PSF, who graciously offered to fund my work (and the work of one other contributor). Once I had funding in place, I knew exactly what needed to be done:
So much time has passed since the fork, no one seemed to care if we made image code changes (we were originally a packaging fork), so this release contains 
EVERY PATCH EVER SUBMITTED TO PIL
 but not released until now. I'm exaggerating, but we really crammed a lot of "goodness" in to the 2.0.0 release along with Python 3 support which is what prompted the release in the first place.
In order to fully test, I fine-tuned my tox environment on Mac OS X (tox is awesome) as well as fired up a new Windows VM (and used an already-existing Linux VM). Additionally, other folks joined in to test on their environments (most notably Christophe Gohlke and Eric Soroos). You'll find the results here: 
https://github.com/python-imaging/Pillow#platform-support
. That means: 
THIS RELEASE HAS BEEN FULLY, EXTENSIVELY, AND EXHAUSTIVELY DEVELOPED AND TESTED
. Aside from the possible inconvenience of Pillow 2.0.0 dropping 2.4 and 2.5 support (use Pillow 1.x if you need Python 2.4,2.5), you should not have any trouble with it. If you do, please open a ticket here: 
https://github.com/python-imaging/Pillow/issues
.
As important as quality software is to me, quality presentation is almost equally important. (That's developer-eye quality, not designer-eye quality. ;-)) So I spent a lot of time cleaning up and enhancing the more subtle aspects of the release e.g. README.rst, docs/* (including the pythondoc documentation and HISTORY.txt and CONTRIBUTORS.txt). The pythondoc documentation has been converted to re-structured text and is hosted on ReadTheDocs: 
http://pillow.readthedocs.org/en/latest/
. The website has been updated to include an 
actual
 image generated by PIL 
http://python-imaging.github.com/
.
I hope you enjoy and use Pillow 2.0.0. If you'd like to see me continue to devote significant time to maintaining Pillow, please 
consider a gittip
! Thank you.</summary>
  </entry>
  <entry>
    <title>Built with Plone, Powered by GitHub Pages</title>
    <link href="https://blog.aclark.net/2013/02/23/built-with-plone-powered-by-github-pages/index.html"/>
    <id>urn:uuid:22ddecc5-fa10-4e88-bd12-855d3f460bce</id>
    <updated>2013-02-23T00:00:00</updated>
    <summary>Built with Plone, Powered by GitHub Pages
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2013/02/23
    :category: Plone

Is Plone the next great static website generator? Probably not, but it definitely could be.
I am always looking for ways to improve, streamline and otherwise hack my e-life. And this post is about all of the above.

https://raw.github.com/ACLARKNET/blog/gh-pages/images/httrack.png

Plone in the cloud
Plone is still too "heavy" to easily run "in the cloud" (except via 
http://ploud.com
, HT), but it's getting there. In particular, I find this effort by David Bain very inspiring:
https://github.com/pigeonflight/stack-python-plone
And based on my experiments and research on Heroku:
https://github.com/aclark4life/zope2-heroku
The only "real" remaining issue seems to be packaging; we need this PLIP to happen sooner, rather than later:
https://dev.plone.org/ticket/13283
Cheating
In the meantime, one way you can cheat is to export the contents of your Plone site with httrack then host the results for free on GitHub Pages (i.e. "the cloud")
This process if far from perfect [1], but in a pinch it can work. And it recently worked very well for me so I thought I'd share. See:
http://aclark.net


https://github.com/ACLARKNET/aclarknet.github.com
These links are my website, and GitHub Pages repository respectively. The website was created with Plone (
https://github.com/ACLARKNET/new_style
) then exported via httrack, then uploaded to GitHub Pages (to the gh-pages branch of any repo except <{org,user}>>.github.com repos).
[1] httrack got "stuck" on my @@search links, and I've got a lot of duplicate content now. Fortunately I don't mind editing lots and lots of text files.
Conclusion
In doing this, I was able to turn off my $11/month "website and IRC server" which makes the CFO happy. And in a year or so with Plone 5, hopefully I'll be able to return to the cloud and edit content "live" again.
What do you think about Plone as a static site generator and/or Plone in the cloud? Let me know in the comments below.</summary>
  </entry>
  <entry>
    <title>Checkoutmanager</title>
    <link href="https://blog.aclark.net/2013/02/08/i-love-checkoutmanager-and-dotfiles/index.html"/>
    <id>urn:uuid:7dc91613-c612-44cf-9484-633e8ebd5f41</id>
    <updated>2013-02-08T00:00:00</updated>
    <summary>I Love Checkoutmanager and Dotfiles
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2013/02/08
    :category: Misc, Python

An ode to my OS X development workstation setup
 
1
I am big on setting up my development environment, and enjoying the environment I work in. And I'm very thankful to the folks who make my life easier, including the authors of:
Python
: Python Core Developers
dotfiles
: Jon Bernard
checkoutmanager
: Reinout Van Rees
I also love 
repetition
. So picture if you will, a new 
Macbook Air or Pro
 ready to serve as my development workstation. I like to perform, and study, the steps required to turn a new laptop in to my development workstation. So here we go. In this article, I will walk through the steps required to turn a new machine in to my developer workstation. Do follow along!
Shell
One of the first things I do on a new system is change my shell to 
Zsh
 in 
System Preferences -> Users & Groups -> Current User -> Right Click -> Advanced Options...
. Don't forget to 
Click the lock to make changes
 first.
Zsh
Why 
Zsh
? One of my favorite features is 
shared history between open sessions
. So I can run a command in one window, and then run the same command from another window by fetching it from the history (with CTRL-R).
XCode
After I take possession of my new laptop (running 
Mountain Lion
, the newest OS X at the time of this writing), I head to the App Store to download XCode. 
2
 Among many other things, XCode gives me the GNU C Compiler and allows me to type "gcc" in my 
Applications -> Utilities -> Terminal
.
Python
Duplicate implicit target name: "python".
Now I need a Python interpreter 
3
. For development I use the 
Collective Python Buildout
 but I also enjoy using 
Homebrew's
 Python 2.7. I use Homebrew for a variety of other things too (e.g. mobile-shell AKA mosh) so here we go:
$ ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"
… follow instructions …
$ brew install python
Git
I think OS X (or XCode) includes git, but just in case:
$ brew install git
Which reminds me, don't forget that installing the command line utilities in Mountain Lion's XCode requires an additional step in 
Preferences -> Downloads -> Command Line Tools -> Install
:
Dotfiles
Duplicate implicit target name: "dotfiles".
At this point, I can begin to get serious about turning this new machine in to my developer workstation. And that means: 
installing my private ssh key
 so I can check out code without typing a password, of course. Normally this would be tedious, but with git and dotfiles it's not so bad. This is what I do from my home directory:
$ git clone https://super_secret_url/dotfiles.git Dotfiles
I use https which requires a password for the first time only. Then I edit 
Dotfiles/.git/config
 and change the repository URL to 
git@super_secret_url/dotfiles.git
. So every subsequent pull and push will require no password. And to "install" these dotfiles, I do 
6
:
$ pip install dotfiles
$ dotfiles -s --force
Note: the dotfiles command finds my dotfiles in the default directory "Dotfiles" and create symbolic links to them.
Distribute & Pip
Homebrew's Python includes pip, but even if it didn't:
$ curl -O http://python-distribute.org/distribute_setup.py
$ /usr/local/bin/python distribute_setup.py
$ {easy_install, pip install} dotfiles
In other words, you can always install Distribute 
4
. After which you can use 
easy_install
 or 
pip
 to install dotfiles. (You can read up on the differences. TL;DR: neither is "better" or "worse", it's just a question of which tradeoffs you are willing to make. I tend to use pip just because it's newer and I like its requirements.txt feature, but easy_install is still very well supported as part of the Distribute project.)
Checkoutmanager
Duplicate implicit target name: "checkoutmanager".
Now I need some things to develop. Since I work on a bunch of different projects, I need a way to keep track of what should be checked out at any given time. So I do this 
5
:
$ pip install checkoutmanager
$ checkoutmanager co
This creates and populates my 
~/Developer
 directory with code. And it "just works" because I keep a 
.checkoutmanager.cfg
 in my Dotfiles repository. It currently looks like this:
[aclark]
basedir = /Users/aclark/Developer/aclark
checkouts =
    git@github.com:aclark4life/aclark4life.github.com.git resume
    git@github.com:aclark4life/desktops.git
    git@github.com:aclark4life/hireme.git
    git@github.com:aclark4life/projects.git
    git@github.com:aclark4life/reinstall.git
    git@github.com:ACLARKNET/tweets.git
    git@github.com:aclark4life/usesthis.git
vcs = git

[alt]
basedir = /Users/aclark/Developer/alt
checkouts =
    git@github.com:alt-aclark-net/alt-aclark-net.github.com.git
    git@github.com:alt-aclark-net/dexter.git
    git@github.com:alt-aclark-net/headstraight.git
vcs = git

[buildout]
basedir = /Users/aclark/Developer/buildout
checkouts =
    git@github.com:collective/buildout.bootstrap.git
    git@github.com:buildout/buildout.git
    git@github.com:buildout/buildout.github.com.git
vcs = git

[distribute]
basedir = /Users/aclark/Developer
checkouts = ssh://hg@bitbucket.org/tarek/distribute
vcs = hg

[clients]
basedir = /Users/aclark/Developer
checkouts =
; Bunch o client repos
vcs = git

[clients-hg]
basedir = /Users/aclark/Developer
checkouts =
; Bunch o client repos
vcs = hg

[dcpython]
basedir = /Users/aclark/Developer/dcpython
checkouts =
    git@github.com:DCPython/dcpython.github.com.git
    git@github.com:DCPython/pyramid-tutorials.git
vcs = git

[misc]
basedir = /Users/aclark/Developer
checkouts =
    git@github.com:ACLARKNET/aclarknet.github.com.git blog
    git@github.com:ACLARKNET/new_style.git
    git@github.com:aclark4life/binfiles.git
;    git@github.com:aclark4life/pyramid_python_3.git
    git@github.com:aclark4life/vanity.git
    git@github.com:aclark4life/zope2-heroku.git
    git@github.com:aclark4life/zope2_bootstrap.git
    git@github.com:codekoala/django-axes.git
    git@github.com:collective/buildout.python
vcs = git

[pillow]
basedir = /Users/aclark/Developer/pillow
checkouts =
    git@github.com:python-imaging/Pillow.git
    git@github.com:python-imaging/python-imaging.github.com.git
vcs = git

[plethorasociety]
basedir = /Users/aclark/Developer/plethorasociety
checkouts =
    git@github.com:plethorasociety/plethorasociety.github.com.git
vcs = git

[plone]
basedir = /Users/aclark/Developer/plone
checkouts =
    git@github.com:aclark4life/Plone-Debug-Assistant.git
    git@github.com:aclark4life/collective.recipe.bluebream.git
    git@github.com:aclark4life/event_days_indexer.git
    git@github.com:aclark4life/hello_plone.git
    git@github.com:aclark4life/mr_migrator_demo.git
    git@github.com:aclark4life/parse2plone.git
    git@github.com:aclark4life/plone_1_fun.git
    git@github.com:aclark4life/plone_addon_upgrade.git
    git@github.com:aclark4life/plone_guide.git
    git@github.com:aclark4life/plone_workflow_events.git
    git@github.com:aclark4life/schemaextender-facetednav-demo.git
    git@github.com:aclark4life/silly_content_import.git
    git@github.com:aclark4life/transmogrify.extract.git
    git@github.com:aclark4life/transmogrify.regexp.git
    git@github.com:aclark4life/viewlets_dont_suck.git
    git@github.com:aclark4life/wordpress2plone.git
    git@github.com:collective/Products.AttachmentField.git
    git@github.com:collective/Products.CalendarX.git
    git@github.com:collective/Products.EventRegistration.git
    git@github.com:collective/Products.PloneSoftwareCenter.git
    git@github.com:collective/Products.ifQuotes.git
    git@github.com:collective/Products.naked_plone.git
    git@github.com:collective/buildout.plonetest.git
    git@github.com:collective/collective.contacts.git
    git@github.com:collective/collective.controlpanel.edit_css.git
    git@github.com:collective/collective.developermanual.git
    git@github.com:collective/collective.formtoy.git
    git@github.com:collective/collective.github.com.git
    git@github.com:collective/collective.googleanalytics.git
    git@github.com:collective/collective.package.git
    git@github.com:collective/collective.project.git
    git@github.com:collective/collective.recaptcha.git
    git@github.com:collective/collective.recipe.grp.git
    git@github.com:collective/collective.recipe.rsync.git
    git@github.com:collective/collective.rip.git
    git@github.com:collective/collective.stats.git
    git@github.com:collective/funnelweb.git
    git@github.com:collective/github-collective.git
    git@github.com:collective/mr.migrator.git
    git@github.com:collective/plonecom-buildout.git
    git@github.com:collective/plonecom.theme.git
    git@github.com:collective/plonetheme.coolblue.git
    git@github.com:collective/plonetheme.freshpick.git
    git@github.com:collective/plonetheme.grungeera.git
    git@github.com:collective/plonetheme.keepitsimple.git
    git@github.com:collective/plonetheme.unilluminated.git
    git@github.com:collective/transmogrify.filesystem.git
    git@github.com:plone/Installers-OS-X.git
    git@github.com:plone/Products.PloneOrg.git
    git@github.com:plone/admin-docs.git
    git@github.com:plone/buildout.coredev.git
    git@github.com:plone/planet.plone.org.git
    git@github.com:plone/plone.api.git
    git@github.com:plone/plone.github.com.git
    git@github.com:plone/ploneorg.admin.git
    git@github.com:plone/plonetheme.ploneorg.git
vcs = git

[pythonpackages]
basedir = /Users/aclark/Developer/pythonpackages
checkouts =
    git@github.com:aclark4life/buildout-apache-mysql.git
    git@github.com:aclark4life/buildout-munin.git
    git@github.com:aclark4life/buildout-mysql.git
    git@github.com:aclark4life/buildout-nginx.git
    git@github.com:aclark4life/buildout-plone-haproxy.git
    git@github.com:aclark4life/buildout-plone-varnish.git
    git@github.com:aclark4life/buildout-zenoss.git
    git@bitbucket.org:pythonpackages/pythonpackages.com.git vanity_app
    git@github.com:pythonpackages/buildout-apache-modwsgi.git
    git@github.com:pythonpackages/buildout-bluebream.git
    git@github.com:pythonpackages/buildout-django.git
    git@github.com:pythonpackages/buildout-jenkins.git
    git@github.com:pythonpackages/buildout-plone-getpaid.git
    git@github.com:pythonpackages/buildout-plone.git
    git@github.com:pythonpackages/buildout-wordpress.git
    git@github.com:pythonpackages/buildout-zope2.git
    git@github.com:pythonpackages/experimental.pythonpackages.git
    git@github.com:pythonpackages/github-services.git pythonpackages-github-services
    git@github.com:pythonpackages/pyramidpypi.git pythonpackages-index
    git@github.com:pythonpackages/pythonpackages-blog.git
    git@github.com:pythonpackages/pythonpackages-docs.git
    git@github.com:pythonpackages/pythonpackages-graphs.git
    git@github.com:pythonpackages/pythonpackages-paste.git
    git@github.com:pythonpackages/pythonpackages-scaffolds.git
    git@github.com:pythonpackages/pythonpackages.sendpickedversions.git
    git@github.com:pythonpackages/pythonpackages-whiskers.git
    git@github.com:pythonpackages/pythonpackages.git
vcs = git

[toys]
basedir = /Users/aclark/Developer/toys
checkouts =
    git@github.com:aclark4life/basic_pyramid_zodb.git
    git@github.com:aclark4life/github_repos_cloner.git
    git@github.com:aclark4life/other.git
    git@github.com:aclark4life/python_study.git
    git@github.com:aclark4life/django-hello.git
vcs = git
Now it's time to bootstrap the Collective Python Buildout, which gives me 
all versions of Python, ever
 
7
. And off we go:
$ cd Developer/buildout.python
$ python bootstrap.py
Finally, there is some PATH configuration required to make all of this seemless. The Collective Python Buildout gets installed in /opt while brew's stuff is in /usr/local. My PATH config currently looks like this:
export PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/Users/aclark/Developer/buildout.python/python-2.7/bin:$PATH
export PATH=~/Developer/binfiles:/usr/local/share/npm/bin:$PATH
With the above configuration, I default to the Python 2.7 in the Collective Python Buildout. That means that is the "python" or "virtualenv" I get when I type those commands. I use the full path or expanded binary name when I need them e.g. /usr/local/bin/python or python3.3.
That's it! I hope you will check out dotfiles and checkoutmanager for all your development needs.
1
Not really an ode: 
http://en.wikipedia.org/wiki/Ode
2
I know about Kenneth Reitz's XCode Command line Tools only, but if I recall correctly there is some "gotcha" that has bitten me more than once if I use that instead of the full XCode. I wish I could remember what it was now, but it's not coming to me. If it works for you though, great!
3
I know about the system Python, and for small things like checkoutmanager and dotfiles I don't mind using it. But there is merit in avoiding it because Apple treats it like "their" Python and makes decisions for you that you may prefer to make yourself. E.g. I believe they use a crippled version of the readline library.
4
Distribute is a more actively maintained fork of the venerable setuptools library (which itself is built on top of the Python standard library's distutils). Are we having fun yet?
5
I also alias checkoutmanager to cm
6
I force because I want to replace the newly created .ssh dir with the one I keep in my Dotfiles repository.
7
Well, 2.4 through 3.3 at last count.</summary>
  </entry>
  <entry>
    <title>Play as Work</title>
    <link href="https://blog.aclark.net/2013/01/31/please-help-me-do-open-source-work/index.html"/>
    <id>urn:uuid:f9e9754e-4ded-4b86-b289-ec94077269d4</id>
    <updated>2013-01-31T00:00:00</updated>
    <summary>Please Help Me Do Open Source Work
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2013/01/31
    :category: Misc

From my 'mid-life-crisis' series of blog entries
Open Source Work
Open Source Work
 has paid my bills for a long time. Starting with 
Plone
 in the early 2000s, to 
Django
 in the early 2010s, to now. And for this, I am very grateful. To be clear: it's not exactly the 
Open Source Work
 that has paid my bills, it's the consulting work I've been able to secure as a result of my dedication and devotion to open source software and communities. Which is great! (Even more clear: my dedication and devotion to open source software and communities has made learning new skills fun. And those skills have paid my bills for the past 8 years.)
TL;DR: Open Source Work is awesome. I'll likely spend my entire life doing it (in some capacity or another). And while Open Source Work does not pay, the experience is invaluable.
SaaS Offering
Along the way, I caught the "startup bug" and have been interested in building a SaaS offering that would at least pay my bills, if not make me fantastically wealthy. Enter 2012's: 
pythonpackages.com
. The year I spent doing pythonpackages.com work was awesome. I learned a lot. Traveled. Met a lot of cool folks who seemed genuinely interested in my idea(s). But unfortunately, I never made a dime doing it. The lesson, among others, is that 
SaaS offerings are hard
. I am now semi-focused on a "reboot" of the pythonpackages.com idea(s), but that's going to take a while to get going.
TL;DR: Consulting *was* the dream. Now building a SaaS offering *is* the dream (among others). So where does Open Source Work fit in?
Play as Work
I've been "working for a living" since age 14. Back then, I was a busboy and dishwasher in my family's Italian restaurant, where I first learned to 
work hard and have fun doing it
. Since then, I've always worked hard, had fun, and taken few vacations (except for 1994-1998 when I was a full time CS student). I suspect I will always "work for a living" though as I get older, the line between work and play becomes even blurrier. Everyone wants to love or at least like their work. But very few are able to turn their play in to paid work. That's what I want to do. And I am very fortunate, I think, to know what I want to do in life. I know middle aged folk that still don't know the answer to that question.
Duplicate explicit target name: "plone".
TL;DR: liking my work *was* the dream. Now turning the things I like to do into paid work *is* the dream. In 2013, I would like to spend more time doing Open Source Work, working on projects like
 
Buildout
, 
DC Python
, 
Pillow
, 
Plone
, 
django-axes
, 
et al
. 
If you have benefited from my work on any of these projects, directly or indirectly, please consider making a
 
gittip donation
 
to help me do more Open Source Work in 2013.
<script data-gittip-username="aclark4life"
src="https://www.gittip.com/assets/widgets/0002.js">
</script></summary>
  </entry>
  <entry>
    <title>What's in it for you</title>
    <link href="https://blog.aclark.net/2013/01/10/python-3-porting/index.html"/>
    <id>urn:uuid:f08271f5-ab76-45dc-9f02-53915cf46714</id>
    <updated>2013-01-10T00:00:00</updated>
    <summary>Python 3 Porting
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2013/01/10
    :category: Python

The 3 in 2013 is for Python 3
I tend to like projects that everyone else 
hates
, e.g.:
Removing persistent Python objects associated with missing classes in ZODB.
Making new releases for old software that is still useful but unmaintained.
Running flake8 on 10s or 100s of source files and hand-fixing the results.
Part of this has to do with 
repetition
. I know how to do these things, and I like doing them. Over and over. If someone says, "my Data.fs file is broken" I get excited. Anyway, I hope you get the idea.
I am your man
Duplicate implicit target name: "i am your man".
Which brings me to the subject of this post: 
Python 3 Porting
. I've been helping out porting the Python Imaging Library to Python 3 (via the Pillow fork, where I am the release manager). And it strikes me as the type of thing I'd be very interested in doing professionally. So, if you or your company are in need of a "workhorse" to plow through old code and update it, 
I am your man
. Please do 
get in touch
.
What's in it for you
Now I know what you are thinking: 
porting Python 2 software to Python 3 is a lot of work for little gain
. Maybe. Maybe not. I'm not going to try to convince you otherwise, however I will tell you this:
For me, 2013 is "the year of Python 3". I've now promised to deliver and maintain a 
Python 3 compatible PIL by PyCon 2013
. I now care about Python 3 (this was not true before).
The Python 3 Wall of Shame is now the 
Python 3 Wall of Superpowers
. We are over the hump.
Many popular Python web frameworks support or are about to support Python 3 e.g. CherryPy, Django, Pyramid.
So, there is no time like the present to 
take a serious look at Python 3
.</summary>
  </entry>
  <entry>
    <title>Introducing The Plone Kitty</title>
    <link href="https://blog.aclark.net/2013/01/09/introducing-the-plone-kitty/index.html"/>
    <id>urn:uuid:4f419df4-0c50-4546-b6b1-dd4d2183c41f</id>
    <updated>2013-01-09T00:00:00</updated>
    <summary>Introducing The Plone Kitty
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2013/01/09
    :category: Plone

Actually: re-introducing the Plone Kitty from Plone 1!
Plone Kitty
 is the name of a theme (then called "skin") that shipped with the earliest versions of 
Plone
 (1.1 in the image above). This was a simpler time when the web was new, and everything was possible!
Today, we know that the 
web is hard
. While everything is still possible, building the web requires a tremendous amount of hard work. But it doesn't have to be all drudgery. There is still quite a bit of fun to be had building the web, if you know where to look (in addition to all the unavoidable hard work).
Enter: Plone. Both the web and Plone have changed drastically since The Plone Kitty once prowled the internet. And while the Plone Kitty is all but extinct, Plone lives on; continously modernizing itself to keep up with the fast pace of today's modern web.
From the 
Plone Kitty website
 (now running on Heroku!):
If you used Plone "back in the day" (early 2000s), please add a comment below about your experiences then. If you are new to Plone or just curious
about it now, please add a comment below about your initial impressions.
So if you'd like to add 
your bit of nostalgia
, or first impressions of Plone, 
please do so here
. I appreciate any and all comments.</summary>
  </entry>
  <entry>
    <title>New Year's Python Meme 2012</title>
    <link href="https://blog.aclark.net/2012/12/29/new-years-python-meme-2012/index.html"/>
    <id>urn:uuid:00f3977c-0761-44f9-a25f-dcffbbb9f243</id>
    <updated>2012-12-29T00:00:00</updated>
    <summary>New Year's Python Meme 2012
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/12/29
    :category: Python

This is my entry for Tarek Ziadé's New Year's Python Meme, a tradition I have come to enjoy. Both to reflect on the current year and look back on previous years. So here it is.
I did this in 
2009
 & 
2011
. Let's try it again.
1. What’s the coolest Python application, framework or library you have discovered in 2012?
That would be 
Kenneth Reitz's Requests
. Like many others, I've been bitten by the elegance and simplicity bug that is inherent and ingrained in the Requests library. Primarily, I used it to build pythonpackages.com. In particular, I used it to communicate with the almost-equally-elegant (IMHO) GitHub API. This is why I like requests (among other reasons): I don't need to use a "third party" library to communicate with the GitHub API. Such libraries (I think) attempt to make my job easier by hiding complexity and presenting simpler APIs to use. This is sometimes necessary, but no substitute for 
really
 and 
actually
 simple APIs and good documentation (both of which GitHub and Kenneth provide, with their respective APIs.)
2. What new programming technique did you learn in 2012?
JavaScript: check. Unit testing: check. These are techniques I have learned enough of to be effective in my "day job" (I'm self-employed). But I learned (finally) that I am primarily: a Python Web Developer. And it feels good to say that. I use Python, and related web technologies to build web applications for my clients. I typically only care to learn enough of a technology to get my job done, then I lose interest (for the most part). That's because I'm also a Hacker. I identify significantly with this monicker because it fits who I am and how I conduct myself professionally. I care about getting the job done above all else. And if there is a job to be done, my intellectual curiosity knows no bounds. If the job is done, I'm going to play guitar. So whatever the technique, I'll learn it if it's something I care about for whatever reason.
3. Which open source project did you contribute to the most in 2012 ? What did you do?
This is the first year that Plone did not consume my every moment. I also spent significant time working on 
Buildout
 (INI-config-driven system to install Python packages and other software, & perform other related and miscellaneous tasks) and 
Pillow (PIL fork)
. With the help of many others, I hope to get a Python 3.3 compatible release of Pillow out by PyCon 2013. And I'll support Buildout < 2.x until such time as Buildout 2.x goes mainstream.
4. Which Python blog or website did you read the most in 2012?
Planets: Django, Mozilla, Plone, Python. Reddits: Python. Other feeds: Hacker News & Tech Crunch. I added Tech Crunch this year to satisfy my "startup itch", as was recommended to me by Jonathon Perrelli of Fortify.vc in DC.
5. What are the three top things you want to learn in 2013?
How to hustle. Hustling, and more hustling. I've gained a lot (enough?) technical skill over the years. Now I want to put that skill to good use in business. I've managed to remain self-employed for a number of years, now I'd like to employ others full time, build successful businesses and otherwise "expand my empire".
6. What is the top software, application or library you wish someone would write in 2013?
I hope that I get more significant time to put into my "baby": 
pythonpackages.com
. In particular, I'm considering adding a Travis-like service which would spawn Windows VMs to run tests and produce executables for Python packages (to address a particular pain point I've discovered along the way: people want to support Windows, but often don't have the ability to do so easily.)
Happy (Python) New Year!
Want to do your own list? Here's how:
Copy-paste the questions and answer to them in your blog
Tweet it with the 
#2012pythonmeme
 hashtag</summary>
  </entry>
  <entry>
    <title>The Zen of Zope, by Alex Clark</title>
    <link href="https://blog.aclark.net/2012/12/09/the-zen-of-zope/index.html"/>
    <id>urn:uuid:ec68c9fa-12cf-4a9b-816c-1042be398c91</id>
    <updated>2012-12-09T00:00:00</updated>
    <summary>The Zen of Zope, by Alex Clark
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/12/09

>>> import other
The Zen of Zope, by Alex Clark


Beautiful is an attribute of ugly.
Explicit is implemented by implicit.
Simple is provided by complex.
Complex is directly provided by complicated.
Flat only implements nested.
Sparse has tagged value dense.
Readability count is not in range.
Special cases could not adapt the rules.
Practicality implements purity.
Errors should never require a specification that doesn’t extend the specification of silence.
Unless explicit is a multi-adapter.
In subscribing to ambiguity, return all the objects that refuse the temptation to guess.
There should be none-- and preferably only zero --output from a handler.
Although that way may not be obvious at first unless you've registered an adapter hook
Now is verified by never.
Although never is not implemented by *right* now.
If the implementation is hard to explain, it queries the bad idea utility.
If the implementation is easy to explain, it may query the good idea utility.
Implicit namespace packages are one honking great idea -- let's do more of those!</summary>
  </entry>
  <entry>
    <title>How much?</title>
    <link href="https://blog.aclark.net/2012/11/23/plone-guide/index.html"/>
    <id>urn:uuid:80c5b80b-626e-44e9-8b56-35d7c75eacda</id>
    <updated>2012-11-23T00:00:00</updated>
    <summary>Plone Guide
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/11/23
    :category: Plone

For anyone new to my blog, welcome.
Who
For anyone new to my blog, welcome. I am Alex Clark: Python Web Developer.
What
Recently with a tweet, I announced the start of a new personal project:
When
I have tentatively scheduled this project to be completed by the end of 2013, because it's important to set a deadline.
Where
This project will be hosted on one of my current favorite websites: 
http://readthedocs.org
.
Why
I think about Plone a lot as it relates to my current professional work. And I have more thoughts than I can currently keep track of in blogs, tweets, etc. So I decided to make an effort to write them all down.
How
I think a lot about what other people think about Plone, so I decided this book will feature comments from the general public in it. E.g.:
How much?
This book will be free. But if you'd like to support its development, please 
gittip me
.
There's not much to it yet, but feel free to head over and add some comments: 
https://plone-guide.readthedocs.org/en/latest/
.</summary>
  </entry>
  <entry>
    <title>Discussion</title>
    <link href="https://blog.aclark.net/2012/11/02/pillow-1-7-8/index.html"/>
    <id>urn:uuid:5aa1a31b-64c5-40bd-b4c0-232c947d4d32</id>
    <updated>2012-11-02T00:00:00</updated>
    <summary>Pillow 1-7-8
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/11/02
    :category: Pillow, Python

Pillow is the friendly PIL fork. Initially just a packaging fork, now considering image code bug fixes and Python 3 support. To be friendly, we attempt to track changes against upstream tickets in PIL.
Pillow 1.7.8 is out! Read about it here:
http://pypi.python.org/pypi/Pillow/1.7.8
Features
It's PIL (Python Imaging Library)
It installs on all modern systems 
1
Win32 eggs are provided (special thanks to Takayuki Shimizukawa)
Changes
This release includes:
Removed doctests.py that made tests of other packages fail. [thomasdesvenain]
Fix opening psd files with RGBA layers when A mode is not of type 65535 but 3. Fixes issue 
https://github.com/python-imaging/Pillow/issues/3
 [thomasdesvenain]
Install
To install Pillow:
$ easy_install Pillow
Or:
$ pip install Pillow
Or:
$ python setup.py install (inside the extracted zip)
Or:
$ pip install zc.buildout
$ buildout init
With 
buildout.cfg
:
[buildout]
parts = pillow

[pillow]
recipe = zc.recipe.egg
And:
$ buildout
(Note: easy_install & pip each handle namespace packages differently, so you should choose one or the other, and not mix the two.)
Report issues
If you find an issue, please report it here:
https://github.com/python-imaging/Pillow/issues
Better yet: please fork, fix, and submit a pull request. Please also solicit for peer review once the pull request has been submitted.
Discussion
You may discuss issues related to PIL, Pillow, and Python imaging on the image-sig list:
http://mail.python.org/mailman/listinfo/image-sig
Enjoy using Pillow!
1
If it doesn't, please report it: 
https://github.com/python-imaging/Pillow/issues</summary>
  </entry>
  <entry>
    <title>Greatness</title>
    <link href="https://blog.aclark.net/2012/10/23/plone-secrets-episode-5-the-community/index.html"/>
    <id>urn:uuid:2fc5c4cd-1b3f-4f7f-9dd7-a4a71f1d93d1</id>
    <updated>2012-10-23T00:00:00</updated>
    <summary>Plone Secrets 5: The Community
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/10/23
    :category: Plone

This is a non-technical post on the Plone community, why it's so great, how it functions, and some details that may help one understand it from the outside looking in (AKA The "secrets")
Size and Activity
The Plone community is 
HUGE
. I don't have any numbers handy, but I'm sure there is as much if not more activity going on in the Plone Community right now as there is in the White House "reelection department".
Structure
The Plone community consists (roughly) of Founders, Contributors, and Users. It has formalized itself into a 
501(c)(3) organization
 with a corresponding board and membership. The board conducts business to "protect and promote Plone" on behalf of the community and the foundation members (but not necessarily board members) are all recognized contributors. Contributors control the speed and direction of the project. Some of the contributors are:
Teams
The Framework Team
 (arguably the most important team, next to the core developers themselves 
0
.) Responsible for "evaluating PLIPS for inclusion in Plone". PLIPS are "Plone Improvement Proposals" used to convey the message: "I want to add this feature to (or remove from) Plone core and I, or the others listed here, will do the work."
The Documentation Team
 (arguably equally as important) Responsible for documenting the Plone software for developers and end users.
The QA Team
 (arguably… oh hell they're all important) Responsible for making sure the software is suitable for consumption by developers and end users.
The Marketing Team
 Responsible for promoting Plone to prospective consumers.
The AI Team
 (Admin Infrastructure) 
1
 Responsible for maintaining software and systems infrastructure for the community.
Internationalization Team
 Responsible for translating Plone's user interface text into multiple language.
Security team
 Responsible for addressing complex security issues with Plone core software.
And more…
 I'm sure I missed some teams, feel free to check out the entire list here: 
http://plone.org/team
.
Factions
As is common in the world at large, the Plone community is comprised of various factions. From circles of friends, to the hundreds of Plone consulting firms, to the business sectors that embrace Plone (e.g. non-profits). These factions may never, in their lifetimes, interact with one another but they are critical to the success of Plone. (It would be a shame if they didn't, which is why we have the annual Plone Conference).
Individuals
Finally, we have the noteworthy individuals of the project. These include the Founders, Board Presidents, Release Managers, Core Developers, and more. Most especially this includes 
YOU
. If you have contributed to the Plone project in any way large or small, your work is appreciated.
Greatness
What's great is that it all works. I am struck by how much the Plone Community is a microcosm of the world. Especially during election time in the United States, I've been thinking a lot about "how the world works" and I see the same patterns everywhere. Not everyone:
Enjoys the same activities
Shares the same beliefs
Likes the same people
Has the same goals
But when you share a common goal e.g. Running a country, or a city, or a state, or business, or a community, or a project, you find ways to get along. Individuals work with other individuals, factions work with other factions, teams works with others teams, projects ship their product to the world. In this case, I'm looking forward to the Plone project shipping its product to the world for the next 10 years or more.
Good luck to us all!
Consider a
<iframe style="border: 0; margin: 0; padding: 0;"
        src="https://www.gittip.com/aclark4life/widget.html"
        width="48pt" height="20pt"></iframe>
<3
0
I'm not listing the core developers because there are over 100 of them and they don't formally meet as far as I know. But of course, without the Founders and Core Developers none of us would be here. So a very special thanks to them as well.
1
Term coined by Wyn Williams</summary>
  </entry>
  <entry>
    <title>Fix</title>
    <link href="https://blog.aclark.net/2012/10/22/why-split-the-lists/index.html"/>
    <id>urn:uuid:36bd5dc9-1c71-426a-9cf6-4d3041cb6899</id>
    <updated>2012-10-22T00:00:00</updated>
    <summary>Why Split The Lists
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/10/22
    :category: Plone

The Plone community consists (roughly) of Founders, Contributors, and Users.
Background
The Plone community consists (roughly) of Founders, Contributors, and Users. It has formalized itself into a 501(c)(3) software foundation with a corresponding board and membership. The board conducts business on behalf of the community and the board and foundation members are all recognized contributors. Both the board and the membership have their own private mailing list.
Issue
Over the years, issues have been raised on the membership list that have led to more discussion than all of the foundation membership are comfortable with. And some have expressed that concern (usually without addressing the orginal concern or "topic" of the thread).
Fix
While I am quite confident that folks can manage their own 
INBOXES
 (or should be able to), I'm not confident that folks (myself included) can resist engaging with others over issues like:
The "religious" aspect (The Plone community is better than this!)
The practical aspect (Everyone can just control themselves!)
The miscommunication (You are obviously "wrong" about XYZ which I won't address but rather suggest you stop!)
To me, the fix is simple. Do the most practical thing and split the lists into: Membership-announce and Membership-discuss (note: discussions with the board list are a different matter.) This says nothing about the health of the community (which is strong), it just means: announce is for important information like "please renew your foundation membership" and discuss is for hashing out issues that foundation members care about.
As someone who volunteers to help maintain the lists for the community, I don't take this suggestion lightly but I think it's the right thing to do to move forward and make the most number of people happy. That said, if a vote decides otherwise I am OK with that, but I'll be curbing the amount of discussion I would actually like to do on the membership list.</summary>
  </entry>
  <entry>
    <title>Policy makes perfect</title>
    <link href="https://blog.aclark.net/2012/10/20/mailing-list-etiquette/index.html"/>
    <id>urn:uuid:c7fc0eab-c986-4e3f-92fa-d8590dd27a05</id>
    <updated>2012-10-20T00:00:00</updated>
    <summary>Mailing List Etiquette
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/10/20
    :category: Plone

I read a lot of mailing lists.
Also, I've been subscribing to, reading, and participating in discussions on mailing lists since about the time Mailman 1.0 was released circa 1999 
1
. And I have fond memories of interacting administratively with MajorDomo and ListServ software. And by administratively, I mean sending the software commands and getting back a response. In fact, you might say I get along better with the software and machines than I do with the humans that use them. Which is not to say that I'm not a people person: I love people. But I do struggle with striking the right balance between hacking machines and communicating with humans.
Anyway, as you can imagine: I have 
VERY STRONG OPINIONS
 about how folks should conduct themselves on mailing lists: call it a code of conduct. And regardless of what you might expect from a self-described "hack": I work 
VERY HARD
 to enforce that code of conduct on my own behavior. Do I occasionally step outside the lines? Of course. But make no mistake: I do not communicate in a vacuum. You can be as polite and courteous as The Pope and 
STILL GET THE SMACKDOWN
 through no fault of your own. Why? Because humans make mistakes. Context gets lost. Do you think you know what's going on enough to make a comment? You might be wrong 
2
:
"The single biggest problem in communication is the illusion that it has taken place."
—  George Bernard Shaw quotes (Irish literary Critic, Playwright and Essayist. 1925 Nobel Prize for Literature, 1856-1950)
Netiquette
So what is a human to do? Well, guess what! There's actually a set of rules or, code of conduct, for humans to follow. Someone wrote it all down. And it's commonly referred to today as "netiquette". A quick glance at 
The Core Rules of Netiquette
 and you'll be well on your way to being a better electronic human than you were the day before. I say this as someone familiar with netiquette, but not as someone who has actually studied up on the concepts recently. One of my favorites:
From Rule #1: Remember The Human:
…
"When you're holding a conversation online -- whether it's an email exchange or a response to a discussion group posting -- it's easy to misinterpret your correspondent's meaning. And it's frighteningly easy to forget that your correspondent is a person with feelings more or less like your own.
It's ironic, really. Computer networks bring people together who'd otherwise never meet. But the impersonality of the medium changes that meeting to something less -- well, less personal. Humans exchanging email often behave the way some people behind the wheel of a car do: They curse at other drivers, make obscene gestures, and generally behave like savages. Most of them would never act that way at work or at home. But the interposition of the machine seems to make it acceptable.
The message of Netiquette is that it's not acceptable. Yes, use your network connections to express yourself freely, explore strange new worlds, and boldly go where you've never gone before. But remember the Prime Directive of Netiquette: Those are real people out there.
Would you say it to the person's face?
Writer and Macintosh evangelist Guy Kawasaki tells a story about getting email from some fellow he's never met. Online, this fellow tells Guy that he's a bad writer with nothing interesting to say.
Unbelievably rude? Yes, but unfortunately, it happens all the time in cyberspace."
…
One belief that I've held for almost as long as I have been communicating electronically is: 
IF I SAY SOMETHING ELECTRONICALLY I PROBABLY MEAN IT
. That means you can expect to hear the same information from me in person, as you would in an email or other electronic corresponence. That also means that I rarely look back and 
CRINGE
 and think to myself: "Oh my gosh I can't believe I wrote that." Do I make mistakes? Of course. But less and less as I get older and older. More frequently than not, I stand 100% behind my electronic correspondence.
Is netiquette enough?
Netiquette covers almost everything you can think of. From trying to be sensitive to the context of the list (RULE #3 and #4) to helping guide the discussion the right way (RULE #7) to giving everyone the benefit of the doubt all the time (RULE #10).
Still, sometimes 
CRAZY THINGS HAPPEN
 like someone forgets to mail the list directly and the direction of the membership "forks". Follow 
this thread
 to see me both issue a 
SMACKDOWN
 then 
APOLOGIZE
 when I realized I'd acted upon information only I and one other person was privy to.
Policy makes perfect
Sometimes, people will pop on to a list and say "Is this the right place to ask about XYZ?" Other times, they'll just ask it: "I have an XYZ that I'm looking to sell…" If the primary topic of the list is "ABC" and if the popping in happens frequently enough, you may want to define a policy e.g. my non-profit organization DC Python has a 
policy for job postings
:
"DC Python helps Python programmers get jobs. We allow job postings on our meetup.dcpython.org mailing list provided the following criteria are met:
You are posting for a Python job in Washington, DC or the surrounding metro area — please don't try to recruit PHP or Ruby or .NET developers here, and please don't try to recruit for other cities.
You will put [JOB] in the subject line of the email and include a description of the job (including duties and location) in the body of the email.
You are an active member of DC Python or you are willing to contribute financially either through a sponsorship or by providing food/drink at one of our meetings."
That way whenever someone posts to the list or emails me personally about job postings, I can point them to the link:
http://dcpython.org/#job-postings
Pointing them at netiquette may help too, but that would require them to read through the archives to discover things like "Wow, that recruiter got the smackdown when they identified themselves as a recruiter." So, a policy of netiquette plus an additional set of rules can go along way toward making communication better for everyone involved.
Like this article? Consider a
 
gittip
. 
You may also
 
follow me on Twitter
.
1
http://mail.python.org/pipermail/mailman-announce/1999-July/000004.html
2
http://thinkexist.com/quotation/the_single_biggest_problem_in_communication_is/155222.html</summary>
  </entry>
  <entry>
    <title>I have vision</title>
    <link href="https://blog.aclark.net/2012/10/19/gittip-misundood/index.html"/>
    <id>urn:uuid:83c5e3d1-0715-4da9-a50c-71ed762ed601</id>
    <updated>2012-10-19T00:00:00</updated>
    <summary>Gittip, Misunderstood
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/10/19
    :category: Misc

People do not understand gittip. Or, they do not understand how I use it.
Worse, they 
think
 they understand it 
1
. So much so, some choose to comment about it publicly.
Remember 
gittip is the future
? Someone commented:
"Nobody likes a beggar."
— 
fuckoff@dfgd.com
Really? Well, I have to agree. I 
don't like seeing panhandlers
 on the street. But I'd never yell "Nobody likes a beggar!" at them. Why? Because: I don't care what they do. Does their presence sometimes annoy me? Sure, because I have to read the sign. And then I have to nod, like "What's up" and "Nah, sorry" at the same time (an acquired skill).
But that is not what bothers me the most about my friend @dfgd.com's comment. What bothers me the most is: I don't claim to know or understand why people do what they do. And short of a loitering law being broken somewhere, I think they have every right to do it (as long as they are not harming me or others). I'd even like to see a pandhandler use Square to accept payments. It sounds ridiculous, but I'd actually pay a panhandler that was accepting credit cards (I have no idea why this amuses me, but it does; of course, you may think twice about what is happening when they swipe but could a panhandler really figure out how to… I digress, back to the story.)
Anyway, pro tip: 
the people who use gittip are not begging
. Some (most?) never ask for a dime. I choose to promote my gittip link and I am now going to tell you why, so if anyone ever asks? Or condescends? Here it is:
I like the project
I like what Chad Whitacre is doing. I think it's a cool idea. I want to do everything I can to help him promote his service. I also like that people I know and like are being gittip'ed. It gives me a warm fuzzy inside. Hell, the entire "top 10" gives me a warm fuzzy.
I like money
I have a funny story I like tell to… well, to you, now: I've done AdSense in the past. For YEARS. One time one of my blog entries got about 40+ upvotes on Hacker News and my revenue went up as quickly as it ever had. This, after years of adsensing, tipped the scales to… YUP, you guessed it! $100. I got my check, and a copy of it is sitting nearby ready for framing. Was that the hardest $100 I ever made? Probably. But it felt damn good to make it. Similarly, with $2 per week in support, I stand to make another $100 much quicker than I ever did with AdSense. This, my friends, is progress. It may not seem like much to random people on the internet. In fact, it may even be laughable, disgusting, or any number of things to other people. But guess what: it's none of their business.
Money is not my boss
Some people go 
APE SHIT
 and get 
REALLY UNCOMFORTABLE
 in certain situations involving money. I am not one of them. Are you concerned that I'm not volunteering enough and getting paid too much? Don't be. I assure you, I can figure it out. If you have any questions, just ask me: 
aclark@aclark.net
. Are you concerned that because I get paid, someone else may get the wrong impression about volunteering and why do some people get paid and some don't and don't you worry this may give the wrong…? No. I trust that if someone wants to volunteer, that's exactly what they are going to do.
I have vision
I picture any number of scenarios with gittip. Here are some:
Do you like that I've spent years pouring my heart and soul into the Plone software and community, and perhaps, made your life better in some small way? Gittip me.
Did you notice I forked the Python Imaging Library so that thousands of people could have a working PIL release? Gittip me.
Did you also notice the new zc.buildout release that's much faster than the old release? Gittip me. (And a few others too, most especially: iElectric and zenwryly… you could also gittip Jim Fulton too, I guess).
Do you want me to handle your Python package releases on a regular basis for you, but you don't want to sign a contract with my consulting business or use pythonpackages.com? Gittip me.
Do you want me to handle some other task on a regular basis, but you don't want to sign a contract with my consulting business? Gittip me.
Are you aware of all those things and don't want to gittip me? That's fine too. I'm not entirely sure I'm making myself clear, but I will leave you with this: I will always donate my time freely to good causes, especially those near and dear to my heart. My non-profit organization DC Python has been working with the PyLadies to teach "Introduction to Python Classes" in DC. And I'm so grateful, because I want to grow the organization (as big as Mozilla?) and I need all the help I can get. But, I need to make a living too. And this is precisely where, as the old saying goes: "the rubber meets the road".
I (like so many others before me and along with me in the Plone, Python, and Mozilla communities) have become an entrepreneur. In addition to thinking about "what consulting projects am I going to work to pay my bills", I like thinking about "what services can I build to pay my bills". And I'm so lucky I get the chance to do it.
You know what to do or not to do because you have just read this article:
 
http://gittip.com/aclark4life
You may also want to follow me on Twitter:
 
http://twitter.com/aclark4life
1
http://blogs.hbr.org/ashkenas/2011/02/your-communications-may-not-be.html</summary>
  </entry>
  <entry>
    <title>Final Thoughts</title>
    <link href="https://blog.aclark.net/2012/10/17/top-3-favorite-logical-fallacies/index.html"/>
    <id>urn:uuid:4b7bef24-eeab-4545-936e-54ee3f3ff7fc</id>
    <updated>2012-10-17T00:00:00</updated>
    <summary>Top 3 Favorite Logical Fallacies
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/10/17
    :category: Misc

I love to debate issues.
The more complex, the better. I have no formal training in 
debate
, but I wish I did. It may have better prepared me to face different personality types with varying degree of communication skill. You don't have to watch the 2012 U.S. Presidential Debates to know that people will say things that are 
BATSHIT CRAZY
 to make their point. I've done it myself. That's one of the reasons we need rules to formalize our discussions: because it's hard to stay on point.
Fallacy
In the course of debate, you may encounter a 
fallacy
 or "faulty reasoning". Discussion of fallacy is my favorite part of debate. So without further ado, my top 3 "favorite" 
1
 logical fallacies; of all those I've encountered since I begun to debate in electronic form in the mid-1990s. 
Disclaimer: I have been on both sides of all three, I'm human. My goal in writing this blog entry is to facilitate better conversations within the communities I care about: Mozilla, Python, and Plone.
1. "You will regret your comments!"
This may be true, but it's probably not the point. And it's probably better to stay on topic then it is to stray into personal attacks, or what you may feel is "helping" 
2
 the other person.
2. "You are out of line!"
This may be true too, but it may take both sides to acknowledge the lines. When discussing a point, even though it's tempting to cry foul, it's probably better to stay on point. Sometimes you need a break, in which case it's OK to say "let's take a break and pick this up again later" 
3
3. "You are wrong!"
Perhaps. But it is likely that you may never agree with your debate counterparts. It's much better to focus on the core issues, and how you can compromise, then it is to focus attention on what is "right" and "wrong" (and who is right and wrong) 
4
.
Final Thoughts
It feels great to get those out. If anyone reading this has formal training in debate, I would love to hear your comments. Either below, or: 
aclark@aclark.net
.
Like this blog entry? Consider supporting me on
 
gittip
.
Duplicate implicit target name: "fallacy".
1
I say "favorite" because these fallacies have crystallized in my brain over the years to the point where I feel I can categorize and discuss them.
2
I say "helping" because it's probably hurting the intended recipient (whether it's true or not). Sorry, it's not up to you to decide whether or not someone else will regret their comments.
3
I am married. And there is no better place in the world, than within the institution of marriage, to learn how to debate.
4
There may be no tangible right or wrong, just preference. Discuss your preferences, then what you need from the other side to be happy. Then ask the other side to do the same.</summary>
  </entry>
  <entry>
    <title>Test post</title>
    <link href="https://blog.aclark.net/2012/10/15/django-test/index.html"/>
    <id>urn:uuid:8e1b3ab1-347f-47c1-a41b-50aa2360c0b0</id>
    <updated>2012-10-15T00:00:00</updated>
    <summary>Hello, Django
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/10/15
    :category: Django

This is a test post to create a Django tag feed.
Test post
Hello, Django planet!</summary>
  </entry>
  <entry>
    <title>Looking For Projects</title>
    <link href="https://blog.aclark.net/2012/10/04/looking-for-projects/index.html"/>
    <id>urn:uuid:19135a1d-c5af-46d2-88f8-cfa5068b0fab</id>
    <updated>2012-10-04T00:00:00</updated>
    <summary>Looking For Projects
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/10/04
    :category: Misc, Python

With pythonpackages.com winding down, I am now actively seeking projects for Q4 2012 and beyond.
I am good at:
Deploying Plone sites: 
http://blog.aclark.net/2012/10/03/plone-4-3-alpha-1-in-production/
Maintaining and releasing Python packages: 
http://pypi.python.org/pypi?%3Aaction=search&term=aclark&submit=search
Cat herding volunteers: 
http://lists.plone.org/pipermail/plone-com/Week-of-Mon-20120903/000039.html
Writing documentation: 
http://docs.pythonpackages.com/en/latest/index.html
Writing narrative text: 
http://www.packtpub.com/plone-33-site-administration/book
Writing Python code: 
https://github.com/aclark4life
Also, I've put together a list of projects I am involved in (or have been involved in): 
http://resume.aclark.net/projects/
, and please feel free to check out my résumé: 
http://resume.aclark.net/
. If you'd like to discuss how I can help you or your team, please get in touch: 
aclark@aclark.net
.</summary>
  </entry>
  <entry>
    <title>My deployment is awesome</title>
    <link href="https://blog.aclark.net/2012/10/03/plone-4-3-alpha-1-in-production/index.html"/>
    <id>urn:uuid:1b17f91c-2cba-4edb-bad6-632eb90a4bf0</id>
    <updated>2012-10-03T00:00:00</updated>
    <summary>Plone 4-3 Alpha 1 In Production
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/10/03
    :category: Plone

I love upgrading Plone. Given the choice between an afternoon in the sun and upgrading Plone… OK I'd probably pick the sun, but it'd be close.
Always upgrading?
I would love to see the trend of continuous integration make its way all the way to deployment, so that one day our Plone sites are getting new code as soon as it's released. Until then, it's nice to know that Plone's upgrade procedure is fairly predictable and stable, if not entirely straightforward 
1
.
How do I upgrade?
Unfortunately we 
still
 get asked this question in IRC. The TLDR (short) explanation is as follows. Got an old Plone? Here's what you should do:
Don't touch it! Leave it alone. It's probably doing something important.
Install the latest Plone somewhere that is not the location of your current site. Maybe not even on the same machine.
Copy the production Data.fs file (usually in var/ somewhere) and any blobs you may have (Plone 4 or greater) to the new installation.
Restart Plone in the foreground (bin/instance fg). If it starts, great! If it doesn't, look for missing add-ons and add their newest-Plone counterparts (this is usually where all the real work happens). Can't find the latest version? Try contacting the author. Stuck? Try Plone support (
http://plone.org/support
) or hire a consultant (e.g. 
http://aclark.net
). Otherwise, continue.
Once your add-ons are in place, start the site in the foreground and give the ZMI a poke (stay out of Plone). Look for broken objects. If you find some, repeat the previous step. Otherwise, continue.
Once the ZMI looks good, trigger the migration with the Dry Run checkbox selected. See what you get. If it completes, do it for real. If it doesn't, open a ticket on 
http://dev.plone.org
 so we can track the kinds of issues that folks are encountering in the wild. At this point if you are stuck, try to get help from the support forums (
http://plone.org/support
) or hire a consultant (e.g. 
http://aclark.net
). Otherwise, you are almost done!
Run the upgrade for real i.e. with the Dry Run checkbox unselected. When it finishes (it could take a while depending on the size of your site) check Plone. If everything looks OK, rejoice! If not, don't worry. Check: 
Site Setup -> ZMI -> portal_skins -> custom
. If there is anything inside the custom folder, rename the custom folder to 
custom_X_X
 where 
X_X
 equals the previous Plone version e.g. 
custom_3_3
. Or, rename it to whatever you like. Or delete it if you don't care about any in-database customizations that have been made. You probably should care, but maybe you don't. Now check Plone again. If everything looks OK, you are done! If not… well you really should be done by now. So if not, please email me: 
aclark@aclark.net
 and I will try to help.
That's still a lot to swallow for a summary. The key point is this: 
test the upgrade away from the production site. Don't put yourself in an unpleasant situation you can easily avoid
. Once everything works as expected, make a copy of your Data.fs and perform the upgrade on the production site (by editing the buildout.cfg if you know how, or just make the new Plone installation the production site. Need help? Please feel free to email me: 
aclark@aclark.net
 to discuss professional assistance.)
How did I upgrade?
Anyway, the point of this blog entry is to cover the recent upgrade of 
http://aclark.net
 to Plone 4.3a1, and the bliss that ensued. Plone 4.3 has lots of goodness in it, most notably the new theme editor from Martin Aspeli. Whilst I haven't fully explored its possibilites, I definitely liked seeing it in place; it's an impressive piece of work and I suspect will be very useful to lots of folks. So here is a brief summary of my upgrade steps, which took about 2-3 days.
Create a new empty repo
I started with a public repo in my personal GitHub account, then forked it to my organization for showcasing:
https://github.com/ACLARKNET/new_style
Add the buildout
Yes, we are still married to Buildout for even the simplest deployments :-/. So in order to make this easy for myself and others, I maintain buildouts for every version of Plone under the 
http://pythonpackages.com
 umbrella. I typically start like this from within the checked out repo:
$ virtualenv .
$ bin/pip install zc.buildout
$ bin/buildout init
I then 
extend
 the desired base configuration (
4.3.x-dev
 in this case) and add additional customizations as needed.
[buildout]
extends = http://pythonpackages.com/buildout/plone/4.3.x-dev

[plone]
eggs +=
    z3c.jbot
    ZODB3
scripts = ZODB3
resources = ${buildout:directory}/resources
zcml-additional =
# XXX Can this be done with p.r.zope2instance yet?
    <configure
        xmlns:browser="http://namespaces.zope.org/browser"
        >
        <include package="z3c.jbot" file="meta.zcml" />
        <browser:jbot directory="${buildout:directory}/templates" />
    </configure>

[versions]
Cheetah = 2.2.1
Pillow = 1.7.7
Products.DocFinderTab = 1.0.5
Products.FSDump = 0.9.5
collective.recipe.supervisor = 0.17
gdata = 2.0.17
meld3 = 0.6.9
plone.app.debugtoolbar = 1.0a2
supervisor = 3.0b1
z3c.jbot = 0.7.1
zope2-bootstrap = 0.0.7
Develop the Diazo theme
With Diazo, Python packaging is optional. And the 
resources
 parameter available from 
plone.recipe.zope2instance
 makes it easy to start theming without a Python package. I started with a bootstrap template:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Bootstrap, from Twitter</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">

    <!-- Le styles -->
    <link href="/++theme++static/css/bootstrap.css" rel="stylesheet">
    <link href="/++theme++static/css/new_style.css" rel="stylesheet">
    <link href='http://fonts.googleapis.com/css?family=Oswald' rel='stylesheet' type='text/css'>
    <style type="text/css">
      body {
        padding-top: 60px;
        padding-bottom: 40px;
      }
    </style>

    <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <!-- Le fav and touch icons -->
    <link rel="shortcut icon" href="/++theme++static/img/favicon.ico">
    <link rel="apple-touch-icon-precomposed" sizes="144x144" href="/++theme++static/ico/apple-touch-icon-144-precomposed.png">
    <link rel="apple-touch-icon-precomposed" sizes="114x114" href="/++theme++static/ico/apple-touch-icon-114-precomposed.png">
    <link rel="apple-touch-icon-precomposed" sizes="72x72" href="/++theme++static/ico/apple-touch-icon-72-precomposed.png">
    <link rel="apple-touch-icon-precomposed" href="/++theme++static/ico/apple-touch-icon-57-precomposed.png">
    <script type="text/javascript">

      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-35125830-1']);
      _gaq.push(['_trackPageview']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();

    </script>
  </head>

  <body>

    <div class="navbar navbar-inverse navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container">
          <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </a>
          <a class="brand" href="#">Project name</a>
          <div class="nav-collapse collapse">
            <ul class="nav">
              <li class="active"><a href="#">Home</a></li>
              <li><a href="#about">About</a></li>
              <li><a href="#contact">Contact</a></li>
              <li class="dropdown">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown <b class="caret"></b></a>
                <ul class="dropdown-menu">
                  <li><a href="#">Action</a></li>
                  <li><a href="#">Another action</a></li>
                  <li><a href="#">Something else here</a></li>
                  <li class="divider"></li>
                  <li class="nav-header">Nav header</li>
                  <li><a href="#">Separated link</a></li>
                  <li><a href="#">One more separated link</a></li>
                </ul>
              </li>
            </ul>
          </div><!--/.nav-collapse -->
        </div>
      </div>
    </div>

    <div class="container">

      <!-- Main hero unit for a primary marketing message or call to action -->
      <div class="hero-unit">
        <h1>Hello, world!</h1>
        <p>This is a template for a simple marketing or informational website.
            It includes a large callout called the hero unit and three supporting pieces of content.
            Use it as a starting point to create something more unique.</p>
        <p><a class="btn btn-primary btn-large">Learn more &raquo;</a></p>
      </div>

      <!-- Example row of columns -->
      <div class="row">
        <div class="span6 col1">
          <h2>Heading</h2>
          <p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo,
            tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada
            magna mollis euismod. Donec sed odio dui. </p>
          <p><a class="btn" href="#">View details &raquo;</a></p>
        </div>
        <div class="span6 col2">
          <h2>Heading</h2>
          <p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor
            mauris condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis
            euismod. Donec sed odio dui. </p>
          <p><a class="btn" href="#">View details &raquo;</a></p>
       </div>

      <hr>

      <footer>
        <p>&copy; Company 2012</p>
      </footer>

    </div> <!-- /container -->

    <!-- Le javascript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="/++theme++static/js/jquery.js"></script>
    <script src="/++theme++static/js/bootstrap.min.js"></script>
    <script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
    <script type="text/javascript">
        $(document).ready(function() {
            $('a.lightbox').lightBox();
            $(".client").collapse()
            $('.carousel').carousel({
                interval: 10000,
            }
            )
        });
    </script>
  </body>
</html>
Then added some Diazo rules:
<rules
    xmlns="http://namespaces.plone.org/diazo"
    xmlns:css="http://namespaces.plone.org/diazo/css"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

    <append css:content="#category" css:theme=".hero-unit" />
    <before content='/html/head/title' theme='/html/head/title' />
    <theme href="index.html" />
    <replace css:content=".nav" css:theme=".nav" />
    <replace css:content="#content" css:theme-children=".hero-unit" />
    <replace css:content="#portal-column-one" css:theme-children=".col1" />
    <replace css:content="#portal-column-two" css:theme-children=".col2" />
    <replace css:content="footer" css:theme="footer" />
    <replace css:content="#portal-logo" css:theme=".brand" />

</rules>
Then styled to fit with CSS:
#about {
    padding-top: 9px;
}
.alex {
    border-bottom: 1px solid #FAFAFA;
}
body {
    background: url("/++theme++static/img/aclark-net-background.png") repeat-x;
    background-color: black;
}
.brand {
    color: #FAFAFA !important;
    font-family: Georgia;
}
.brand .alpha {
    font-size: 360%;
    font-style: italic;
}
.brand .name {
    font-size: 50px;
}
.carousel-inner {
    border-bottom: 1px solid #CCC;
    padding-bottom: 2em;
}
#content {
    color: #FAFAFA;
}
.description {
    font-size: 125%;
    margin: 1em 0 1em 0;
}
.documentDescription {
    font-size: 125%;
    margin: 1em 0 1em 0;
}
dt {
    margin: 1em 0 1em 0;
}
#facebook {
    padding-top: 1px;
}
footer {
    border-top: 1px solid #999999;
    color: #999999;
    margin-top: 600px;
    width: 100%;
    padding-top: 1em;
}
footer li {
    list-style-type: none;
}
.hero-unit {
    background: black;
}
hr {
    border: none;
    background-color: #CCC;
    color: #CCC;
    height: 1px;
}
.image-left {
    float: left;
    margin: 0 1em 0 0;
}
.navbar-inner {
    background: #AA001F !important;
    height: 50px;
}
.portletHeader {
    font-size: 125%;
}
#portal-column-one {
    color: #FAFAFA;
}
#portal-column-two {
    color: #FAFAFA;
}
.team-member {
    border-bottom: 1px solid #FAFAFA;
}
.service {
    padding: 30px 0 30px 0;
}
#twitter {
    padding-top: 15px;
}
Customize templates
As you may have noticed above I use 
z3c.jbot
 to customize various Plone templates.
Add content
I then cut/pasted all my content from the old site to the new site. This is a lot of work, but I like mimicking the experience of someone non-tech-savvy using Plone for the first time.
What's left?
I am very happy with this upgrade, but of course it's not perfect.
Use Sunburst theme for content editing
If you are Diazo-savvy, you may notice I completely ignore styling the content editing interface. Instead I rely on the unthemed 
2
 site for content editing.
Use Diazo theme for public facing view
Of course, visitors to 
http://aclark.net
 see the Diazo theme.
I'm hoping that the Plone team can unify the content editing experience again in Plone 5, possibly via simplifying the "old style" templates such that it's easier to map them to custom Diazo themes.
Hightlights
Lastly, I'll cover some of the remaining highlights.
It works!
Plone 4.3a1 is remarkably stable. The TinyMCE UI is a bit rough, and the sitemap is broken 
3
, but it works.
The 
All content
 view is awesome
Contributed by Laurence Rowe for Plone 4, I use the 
All content
 view in two places:
http://aclark.net/services
http://aclark.net/team
I love the ability to easily aggregate the contents of pages within a folder.
My deployment is awesome
I'm really happy with the following trick I used this time around:
Content is stored in Data.fs (of course) which I've checked into a private repo on bitbucket, and save nightly with an automated commit and push. I'm able to present the site buildout and theme to the public but keep the Data.fs private via git submodules.
Prior to this, the entire site was stored in a private repo on bitbucket. And finally:
If you load the site, you'll notice the images (configured as static resources) are a bit laggy. I'm a big fan of of CloudFlare and current user via pythonpackages.com, so I'll probably be configuring aclark.net to use it soon too. Once that is done, the site should be lightning fast instead of just really fast.
Like this article and/or my open source work in general? Please 
consider supporting me on gittip
.
1
Some ideas for improving upgrades: 1.) optionally rename portal_skins/custom during the upgrade process. 2.) Include suggestions in the form copy to stage the upgrade away from the current production site. 3.) Report on availability of add-ons compatible with latest version of Plone.
2
Unthemed meaning un-diazo-themed. The content UI is themed with the Sunburst theme "the old way".
3
https://dev.plone.org/ticket/13178</summary>
  </entry>
  <entry>
    <title>What can you do to help?</title>
    <link href="https://blog.aclark.net/2012/09/28/pythonpackages-com-one-year-later/index.html"/>
    <id>urn:uuid:8abac49d-4c38-4a5e-b49f-25070b970800</id>
    <updated>2012-09-28T00:00:00</updated>
    <summary>PythonPackages: One Year Later
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/09/28
    :category: Pyramid, Python

We are rolling up on the one year anniversary of pythonpackages.com (in October).
This is an exciting milestone (for me at least) because I've had a tremendous amount of fun building the site, not to mention how much I learned about GitHub, PyPI, Pyramid, Stripe, Redis, Bootstrap, and more.
We are hovering around 200 signups which I'm quite proud of. But in terms of 
possible-financial-success
 i.e. the potential of converting some of those sign ups in to actual customers I'd feel better if we were at 2,000 or higher.
What happened?
As of the launch of the beta site 3 months ago, there are some actually-useful features available:
The 
ability to release a package from GitHub to PyPI
 without a terminal (i.e. in the web browser).
The ability to release a package with 
git push
 (by adding the service: 
https://github.com/github/github-services/blob/master/services/pythonpackages.rb
)
The ability to "manage packages" (see image below)
The ability to "manage organizations" (see image below)
The 
ability to create packages through the web
 (i.e. from the web browser to GitHub, whereas normally you'd run PasteScript in your Terminal).
And a few more logistical features that are cool:
The ability to pay with a credit card (via Stripe)
The ability to oauth against PyPI:
Still, we have only scratched the surface of what could potentially be provided to the Python community. Future plans include:
The ability to easily 
build Windows installers
 for your Python software.
Support for other services
 e.g. bitbucket.
Support git branches
 i.e. for releasing from a branch.
In summary, this is a great start to building "github style" automation for Python packaging but there is much more work to be done.
What now?
I am in the process of winding down the 3 month "beta 1" period. The "beta 2" period (from now until the end of the year) will likely include:
Adding MailChimp integration to make it easier to email subscribers.
Turn off SSL to save $20/month.
Write tests and open source the application.
What can you do to help?
If you believe in the ideas behind pythonpackages.com (primarily: eliminating the need to think about packaging at all; e.g. through task automation, and process improvement behind the scenes; i.e. supporting new technology like distutils2/packaging, wheel, et al.; in order to present a seemless packaging story to developer-consumers.) then the best thing you can do is to purchase a paid plan:
http://pythonpackages.com/plans
The second best thing you can do is support me on gittip:
https://gittip.com/aclark4life
These funds will go towards covering hosting costs until such time as the service can pay for itself. I am also asking folks who appreciate my open source work in general to consider a gittip donation. If you cannot help financially, you can still use the free plan to release packages! Please try it out and 
give feedback
. (The paid plans get you access to more package slots, so you don't have to swap out the free slot, and organizations, so you can release packages from organization repos).
Thanks for considering!</summary>
  </entry>
  <entry>
    <title>What is the point?</title>
    <link href="https://blog.aclark.net/2012/09/24/diazo-themes-revisited/index.html"/>
    <id>urn:uuid:b62e75da-072e-4ce2-8762-ef84e2c15c86</id>
    <updated>2012-09-24T00:00:00</updated>
    <summary>Diazo Themes Revisited
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/09/24
    :category: Plone

With Diazo theming on the rise (going in to 4.3 core) I'd like to take a look at the Diazo theming ecosystem again.
For that matter, since I know that some folks will never commit to Diazo, I'd like to take a look at the entire Plone theming ecosystem.
What are themes?
Themes control the way the site looks. For the scope of this post, at least, I don't care about "views", "viewlets", "portlets", "tiles", etc. In fact, I'm not sure I ever want to mix "templating" (for lack of a better word) with theming. There is a bit of discussion going on right now amongst the core developers regarding how to make it easier for themers to associate their template code with application code. And while I fully support this discussion, at present the bottom line is:
"Old style"
1
 theming is still a valid way to control the look and feel of a Plone system.
"New style" (Diazo) theming is a great way to isolote the complexity of the stack and get HTML/CSS/JavaScript folks going quickly (especially in 4.3a1 with the new theme editor!)
Where are themes?
In short: all over the place. Why is that? Because we are in the middle of several fluctuating "best practice" approaches that have fluctuated over the past half decade or so:
Plone developers should release their Plone add-ons 
2
 to PyPI!
Plone developers should release their Plone add-ons to plone.org (in addition to PyPI)!
Plone developers should release their Diazo themes as zip archives (i.e. no Python package)!
Hence, the need for this post to clarify the status quo.
What should I do?
Everyone should form their own opinion based on the information in this post and act accordingly or however they see fit. If we can all agree on an approach, great! If not, here's what I'm doing.
What am I doing?
While I have a large interest in seeing plone.org work well (and am also in the middle of helping to cat herd a plone.com marketing site effort), I have given up on plone.org as a reliable, consistent source for add-ons (in favor of PyPI). This abandonment is perhaps only temporary, but in any event for now: if it's on PyPI, it's good enough for me. Also to close the loop on Diazo zip themes, while I fully support this approach I don't use it myself much.
What is the point?
All of this brings me to the actual point of this post which is to take a quick look at the Plone themeing landscape in order to spur more Diazo theme development (or old style theming, if that is your thing). Quickly, using pip to search PyPI by package namespace I see:
88 plonetheme themes
:
plonetheme.Bangalore      - An installable theme for Plone 3
plonetheme.GreenEarthTheme3_0 - An installable theme for Plone 3
plonetheme.ReOrg          - Theme that reorganizes screen real-estate abd gives plone a fresh look
plonetheme.aclark_twitter - Complete silliness: make your Plone site look like Alex Clark's Twitter profile.
plonetheme.andreas01      - An installable theme for Plone 3.0.
plonetheme.andreas02      -
plonetheme.aqueouslight   - An installable Diazo theme for Plone 4.1
plonetheme.bananaleaf     - An installable Diazo theme for Plone 4.1
plonetheme.basic          - An easily customizable theme for Plone 4
plonetheme.blueblog       - An installable theme for Plone 3.0
plonetheme.bluegray       - An installable theme for Plone
plonetheme.bootstrap      - bootstrap css integration
plonetheme.broadcaster    - An installable theme for Plone 3.0
plonetheme.bronzecube     - An installable theme for Plone 3
plonetheme.burned         - An installable Diazo theme for Plone 4.1
plonetheme.classic        - The classic Plone 3 default theme.
plonetheme.cleantheme     - An installable theme for Plone 3.0
plonetheme.codapress      - An installable Diazo theme for Plone 4.1
plonetheme.colorcontext   - Total CSS rebuild and color themed sections
plonetheme.colorfulworld  - An installable theme for Plone 4
plonetheme.coolblue       - An installable Diazo theme for Plone 4.1
plonetheme.corporatemale  - An elastic layout presentation suitable for a corporate business.
plonetheme.criticas       - An installable theme for Plone 3.0
plonetheme.cultureCab     - An installable theme for Plone 3
plonetheme.darkened       - An installable Diazo theme for Plone 4.1
plonetheme.delicious2     - An installable theme for Plone 3.0
plonetheme.discovery      - An installable Diazo theme for Plone 4.1
plonetheme.drupal         - Get all the power of Drupal for Plone ;)
plonetheme.earthlingtwo   - An installable Diazo theme for Plone 4.1
plonetheme.elemental      - Elemental Plone 4 Theme
plonetheme.equipoteih     - An installable theme for Plone 3.0
plonetheme.essay          -
plonetheme.evergreen      - An installable Diazo theme for Plone 4.1
plonetheme.ewb_case       - A Plone 4 theme for EWB Case
plonetheme.flowerbuds     - UNKNOWN
plonetheme.freshpick      - An installable Diazo theme for Plone 4.1
plonetheme.fui            - A Plone 3.0 theme for FUI
plonetheme.gemstone       - Arcsin's Gemstone web design for Plone4
plonetheme.gov            - An installable theme for Plone 4
plonetheme.greencommunity - An installable theme for Plone 3.0.
plonetheme.grungeera      - An installable Diazo theme for Plone 4.1
plonetheme.hamnavoe       - An installable theme for Plone 3.0
plonetheme.html5_hotpink  - Diazo theme for Plone
plonetheme.inbusiness     - An installable theme for Plone 3.0
plonetheme.intk           - An installable theme for Plone 3
plonetheme.intkBase       - An installable theme for Plone 4
plonetheme.jsjamba        - An installable theme for Plone 4
plonetheme.keepitsimple   - An installable theme for Plone 4, fluid 3-column theme, minimalistic and light colored design
plonetheme.laboral        - An installable theme for Plone 4
plonetheme.labs           - An installable theme for Plone
plonetheme.leavesdew      - An installable Diazo theme for Plone 4.1
plonetheme.level2         - An installable theme for Plone 3.0
plonetheme.lithium        - An installable theme for Plone 3.0
plonetheme.mimbo          - An installable theme for Plone 3.0 based on the Mimbo theme by Darren Hoyt
plonetheme.minimalist     - An installable theme for Plone 3.0
plonetheme.mvob           - An installable Plone4 theme
plonetheme.nautica05      - An installable theme for Plone 3.x
plonetheme.netsightintranet - A clean, intranet theme for Plone 3.0
plonetheme.nonzero        - A theme for Plone 3 based on the Nonzero design by NodeThirtyThree
plonetheme.notredame      - Theme for Plone 3 with color scheme based on new Plone Logo
plonetheme.overlappedtabs - A theme for plone 3.x with overlapping tabs
plonetheme.p2             - An installable theme for Plone 3.0
plonetheme.peerstheme     - An installable theme for Plone 3.0
plonetheme.ploneorg       - Plone.org theme
plonetheme.pollination    - Pollination Theme
plonetheme.porseleinplaats - An installable theme for Plone 3
plonetheme.portaltwodotoh - An elastic lounded corners.
plonetheme.pyar           - A PyAr theme for Plone 3.x
plonetheme.python         -
plonetheme.rcom           - An installable theme for Plone 3.0.
plonetheme.redmusic       - An installable Diazo theme for Plone 4.1
plonetheme.relic          - An installable theme for Plone 3.0.
plonetheme.responsive1140 - A responsive theme for Plone
plonetheme.responsivetheme - An installable theme for Plone 4 that uses a fluid grid system
plonetheme.sait2009       - SAIT-2009 installable Plone theme
plonetheme.simplicity     - An installable theme for Plone 3.0
plonetheme.solemnity      - An installable theme for Plone 3.0 based on the solemnity theme by Six Shooter Media.
plonetheme.stylized       - An installable theme for Plone 3.0 based on the stylized theme by NodeThirtyThree.
plonetheme.subordinate    - An installable theme for Plone 3.0
plonetheme.sunburst       - The default theme for Plone 4.
plonetheme.terrafirma     - An installable theme for Plone 3.0
plonetheme.tidyblog       - An installable theme for Plone 3.0
plonetheme.transition     - An installable Diazo theme for Plone 4.1
plonetheme.twinapex       - Twinapex Theme is a theming product for Plone to give your site a professional corporate look
plonetheme.unilluminated  - An installable Diazo theme for Plone 4.1
plonetheme.wmoWonen       - An installable theme for Plone 4
plonetheme.woodexperience - An installable Diazo theme for Plone 4.1
plonetheme.xtheme         - An installable theme for Plone
1 diazotheme theme
:
diazotheme.bootstrap      - Plone theme based on Twitter's Bootstrap CSS
5 Products themes
:
Products.Andreas09Theme   - An example theme for Plone 3.0
Products.HSCustom         - The HSCustom theme was originally created for my band's website.
Products.naked_plone      - An installable theme for Plone 3.0 that does little but override default public stylesheets with empty ones.
Products.NuPlone          - A new theme for Plone 3.0
Products.PloneTableless   - Plone Tableless provides a completly tableless version of the Plone Default theme
60 other themes (WTF?!)
:
alterootheme.busycity     - Free City Plone 3.0 Theme
alterootheme.intensesimplicity - A Plone 3.0 Theme based on a free template by David Uliana
alterootheme.lazydays     - A Theme for Plone 3.0 based on OpenWebDesign.org Lazy Days theme
atrealtheme.algol         - An installable theme for Plone 3.0
atrealtheme.gienah        - An installable theme for Plone 3.0
beyondskins.ploneday.site - Installable Plone 3 theme for World Plone Day
beyondskins.ploneday.site2009 - Installable Plone 3 theme developed to promote World Plone Day 2009 (April 22nd)
beyondskins.ploneday.site2010 - World Plone Day 2010 theme.
beyondskins.ploneday.site2011 - World Plone Day 2011 theme.
beyondskins.pyconbrasil2008 - Plone Theme developed by Simples Consultoria
beyondskins.pythonbrasil.site - This product is a installable Plone 3 Theme developed by Simples Consultoria for use in Python Brasil [7] Conference web site.
collective.fastview       - View and viewlet helper modules for Plone theme and five.grok developers
collective.jqueryuithememanager - JQueryUI theme manager for Plone
collective.lesscss        - This package allow theme developers to add LESS stylesheets into a Plone site.
collective.phantasy       - dynamic theme for Plone
collective.responsivetheme - A responsive theme based on sunburst for Plone 4
collective.shinythings    - Jazz up your Plone theme
collective.threecolorstheme - A Phantasy theme variation for Plone, with 3 dynamic colors
cooking.theme             - This is plone theme created from css/html ready design.
dgsanco.plone3theme       - Plone3 Theme for DG Sanco
freearch.theme            - Free Arch Theme for Plone
gameprog.theme            - An installable theme for Plone 3.0
gomobile.templates        - Project templates creating Web and Mobile themes for Plone
heddex.cityportal         - Installable theme for Plone
heddex.greenfield         - An installable theme for Plone 4
heddex.tranquility        - An installable visual theme for Plone 3
ilrt.migrationtool        - A site migration tool for Plone that uses the site's theme egg version releases
iscorpio.themes.redmaple  - iscorpio readmaple Plone 3 theme
ityou.bluetheme           - An installable theme for Plone 4
jalon.theme               - An installable theme for Plone 3
jalonedit.theme           - JalonEdit Theme for PLONE 4
medialog.kuliadentheme    - An installable theme for Plone 3.0
medialog.roundskin        - An installable theme for Plone 3
medialog.subskins         - An installable theme and theming tool for Plone 4
medialog.subskinsiii      - An installable theme for Plone 3.0
plone.app.themeeditor     - Theme Editor for Plone, Customize your theme resources
plone.theme               - Tools for managing themes in CMF and Plone sites
quintagroup.sunrain.policy - extension for SunRain Plone theme
quintagroup.theme.estatelite - Free Diazo Theme for Plone 4.1
quintagroup.theme.lite    - Free Diazo Theme for Plone 4.1
quintagroup.theme.schools - Free Diazo theme for Plone 4.2
quintagroup.theme.sunrain - Free Diazo Theme for Plone 4.2
quintagroup.theme.techlight - Free diazo theme for Plone 4.1
quintagroup.theme.whiteblack - Free Diazo Theme for Plone 4.1
quintagroup.themetemplate - Quintagroup theme template for Plone 3 with nested namespace
raptus.theme.plonebartop  - move the plone-bar on the top
raptus.theme.ploneformgen - set standard theme for ploneformgen
redomino.css3theme        - A responsive (and mobile) theme for Plone 4 (based on sunburst)
sc.paster.theme           - Produto de tema para o portal Plone (skin).
semicinternet.theme.cambrils - A free Plone theme from SEMIC Internet for Plone 4
soniatheme                - An installable theme for Plone 3.0
themetweaker.themeswitcher - A product for switching themes in Plone.
uofl.dztheme.simplesite   - A Diazo theme for Plone 4 and UofL Simple Left-Nav Sites
uvsq.theme                - An installable theme for Plone 3
v2.theme                  - An installable theme for Plone 4
webcouturier.city.theme   - Plone visual theme
webcouturier.icompany.theme - Plone theme in blue/green colors
xdvtheme.inventions       - A xdvtheme for Plone
xdvtheme.sparkling        - An xdv Theme for Plone
zettwerk.ui               - Adding jquery.ui's themeroller to plone 4 for easy theme customization.
That last one is a surprise, and that's a total of 
154 themes for Plone on PyPI
 (assuming I didn't miss any which I probably did). If we had the man power, all of these themes could be made to work with the latest Plone and work with either old style or new style technology. So if we can't do that (which is a hugely ambitious goal) let's at least try to come close!
Do you like this post, and/or appreciate my open source work? Help build the commons by gittiping me: 
https://www.gittip.com/aclark4life/
.
<iframe style="border: 0; margin: 0; padding: 0;"
    src="https://www.gittip.com/aclark4life/widget.html"
    width="48pt" height="20pt"></iframe>
1
It's getting harder to define what "old style" theming is. For this blog entry, old style theming is some form of customizing the main_template in Plone (I'm ignoring the fact that macros called by main_template are customizable, for now). If we could (consistently, in a core supported way) get newer ways to do that (e.g. browser views instead of CMF skin layers) then "old style" would become "newer style". It wouldn't become "new style" because Diazo technology is "newer" than browser view technology. Get it? I think my point is this: in addition to seeing Diazo help with isolating the complexity of the stack, I'd like to see the underlying technology modernized. Give me something that looks and feels like "old style" theming (i.e. putting templates in CMF skin layers) but that is built on modern technology (i.e. the ZCA).
2
<rant> Have I mentioned today yet that I hate the term "product"? when it's used to refer to a Plone add-on? It's 2012 people. Zope 2 products died last decade. :-p</rant></summary>
  </entry>
  <entry>
    <title>publishconf.py</title>
    <link href="https://blog.aclark.net/2012/09/22/sorry-for-the-blog-spam/index.html"/>
    <id>urn:uuid:1841817e-ee72-4a18-9303-1188c6a4bce5</id>
    <updated>2012-09-22T00:00:00</updated>
    <summary>Sorry for the blog spam
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/09/22
    :category: Python

Just learning Pelican
As I'm just learning 
Pelican
, 
Dirkjan Ochtman pointed out
 that I can have "fancy" URLs via the 
ARTICLE_PERMALINK_STRUCTURE
 setting. So the blog spam you are seeing is a result of my publishing the same two articles with two different URLs (fancy and non-fancy). My apologies for the noise.
publishconf.py
And actually, I found 
ARTICLE_URL
 and 
ARTICLE_SAVE_AS
 to be the settings I wanted to use instead 
1
. My 
publishconf.py
 now looks like this 
2
:
ARTICLE_SAVE_AS = '/{date:%Y}/{date:%m}/{date:%d}/{slug}/index.html'
ARTICLE_URL = '/{date:%Y}/{date:%m}/{date:%d}/{slug}/'
AUTHOR = u'Alex Clark'
CATEGORY_FEED_ATOM = None
CATEGORY_FEED_RSS = None
DEFAULT_CATEGORY = 'Blog'
DEFAULT_LANG = 'en'
DEFAULT_PAGINATION = 10
DELETE_OUTPUT_DIRECTORY = True
DISQUS_SITENAME = 'aclark-blog'
GITHUB_URL = 'https://github.com/ACLARKNET/aclarknet.github.com'
GOOGLE_ANALYTICS = 'UA-34988446-1'
SITENAME = u'Alex Clark'
SITEURL = 'http://blog.aclark.net'
SOCIAL = (
    ('GitHub', 'http://github.com/aclark4life'),
    ('Gittip', 'https://www.gittip.com/aclark4life'),
    ('PythonPackages', 'https://pythonpackages.com/user/aclark4life'),
    ('Twitter', 'http://twitter.com/aclark4life'),
    ('atom feed (Mozilla)', 'http://blog.aclark.net/Mozilla.atom.xml'),
    ('atom feed (Plone)', 'http://blog.aclark.net/Plone.atom.xml'),
    ('atom feed (Python)', 'http://blog.aclark.net/Python.atom.xml'),
)
TAG_FEED_ATOM = 'feeds/%s.atom.xml'
TAG_FEED_RSS = None
TWITTER_USERNAME = 'aclark4life'
Duplicate implicit target name: "publishconf.py".
1
http://pelican.notmyidea.org/en/3.0/settings.html#url-settings
2
I removed the extraneous pelicanconf.py and put everything in one file</summary>
  </entry>
  <entry>
    <title>Gittip is the Future</title>
    <link href="https://blog.aclark.net/2012/09/21/gittip-is-the-future/index.html"/>
    <id>urn:uuid:b1faeb7e-34f0-4f4a-a4a9-f51c9f132ef8</id>
    <updated>2012-09-21T00:00:00</updated>
    <summary>Gittip is the Future
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/09/21
    :category: Misc, Pillow

Heard of Gittip? If not, you should know about it.
Heard of Gittip? If not, you should know: it has a lot of people (including me) excited about the potential to make a living doing what they love. From the Gittip blog 
1
:
Gittip is a system for funding people who build free culture. The core is small weekly gifts. The idea is that if 1,000 people give $1 a week to a great programmer, musician, scientist, teacher, etc., then that frees them up to pursue their vision even further for making the world better.
I love this idea! In particular, because it speaks to me more than other similar offerings:
Chipin
Flattr
Kickstarter
Paypal
Why? If for no other reason, because it comes from a member of the Python community: Chad Whitacre of 
http://aspen.io
 fame. And the Python community has become near and dear to me, second only to my-one-true-open-source-love: Plone. So I want to see open source developers, particularly Python developers, succeed.
And succeed they will, with gittip. Some particularly impressive results so far:
Chad Whitacre, the founder, is making almost $160 per week: 
https://www.gittip.com/whit537/
David Glick, a newly independent Plone developer, is making over $100 per week: 
https://www.gittip.com/davisagli/
Read The Docs, everyone's favorite documentation hosting site, is making almost $100 per week: 
https://www.gittip.com/readthedocs/
Whilst no one is making a living off of gittip yet, with enough support and momentum it's only a matter of time before they do. Toward that end, I have written a blog entry for the 
gittip blog
 describing among other things: how I'd like to make a living with gittip. Here is an excerpt:
Chad’s vision for Gittip really speaks to me. All over the world there are thousands of open source developers writing code, managing projects, and moving the world of open source technology forward. This helps millions of individuals, companies and the entire world with a variety of its endeavours.
What if those folks could easily show their appreciation to individuals known to make open source happen? What if these volunteer developers didn’t need to go get “day jobs” to make a living because the world has taken care of them? What if companies didn’t need to hire employees in the traditional sense because their needs have already been met by open source?
There is a lot to think about and strive for here, and I’m really excited to help Chad with his mission. On a daily basis I’m involved with, and influential to the following open source projects: Plone (Python-based CMS), Pillow (Python Imaging Library fork), Buildout (Python-based build system), and more. I hope Gittip can help me help you, the open source community and the world.
You can read the rest of the article here:
http://blog.gittip.com/post/31960853095/back-the-stack-pythonpackages-com
And if you'd like to help me, I'm attempting to cover the hosting costs for my startup business: 
pythonpackages.com
, so I can keep developing it for another year. I truly believe in my vision of a "hosted packaging service", and I really want to help the Python community fix its packaging story in any way that I can. If in no other way, than by making it so you don't have to think about Python packaging at all (i.e. I'll worry about the various complexities, so you don't have to). You can find me on gittip here:
https://www.gittip.com/aclark4life/
Now, go be generous and help build the commons!
1
http://blog.gittip.com/post/30116848405/with-payouts-gittip-is-minimally-viable</summary>
  </entry>
  <entry>
    <title>Bootstrapping a Buildout 1-6 release</title>
    <link href="https://blog.aclark.net/2012/08/13/bootstrapping-a-buildout-1-6-release/index.html"/>
    <id>urn:uuid:8ba001ee-67d6-4687-b49e-42018c89832e</id>
    <updated>2012-08-13T00:00:00</updated>
    <summary>Bootstrapping a Buildout 1-6 release
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/08/13
    :category: Buildout

A lot of work has been done on Buildout lately.
Most notably:
Jim Fulton is 
working on Buildout 2
.
Ross Patterson has greatly 
improved Buildout performance
.
Domen Kožar has 
provided a patch
 that takes a conservative
approach to Ross's performance improvements.
I have offered to do a release.
And there are a 
handful of other changes
 in 
trunk on svn.zope.org
, of which my favorite is:
The buildout init command now accepts distribution requirements and
paths to set up a custom interpreter part that has the distributions
or parts in the path. For example:: $ python bootstrap.py init
BeautifulSoup
So with that, I am 
planning to do a zc.buildout 1.6 release within 24 hours
 or so of now. Please add a comment or weigh in on 
distutils-sig
 if you object. We have run the tests on Windows, and discovered only pre-existing failures. We are also preparing to do "Buildout 2 prophylactic releases" (i.e. releases that make 1.x continue to work when 2.x is released) in the 1.6.x series.</summary>
  </entry>
  <entry>
    <title>PLONE DEVS: Y U NO MOVE REPOS?</title>
    <link href="https://blog.aclark.net/2012/08/10/all-my-python-packages-are-belong-to-github/index.html"/>
    <id>urn:uuid:036f9b17-90a0-4d81-87c6-ba24f9a5f9c7</id>
    <updated>2012-08-10T00:00:00</updated>
    <summary>All My Python Packages Are Belong To GitHub
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/08/10
    :category: Plone

Including many Plone add-ons.
Hi. My name is Alex "please don't call them products" Clark. But you may call me aclark or aclark4life. In the spirit of continuing the 
great git migration
, and in order to 
beta test pythonpackages.com
, I've just moved the last of my Subversion repositories to GitHub. This means 
any package I have Owner or Maintainer permission for on PyPI
 now lives in one of 8 GitHub organizations, or my personal GitHub account on github.com. Great Success!
PLONE DEVS: Y U NO MOVE REPOS?
The Plone AI team has tentatively scheduled the end-of-2012 as the time to flip 
svn.plone.org/svn/collective
 to read only (/plone and /archetypes are already read only). So if you are still using the old collective, please take a minute to start thinking about migrating. As always, I'm happy to provide assistance to anyone that needs it to move their code. (I'm in #plone on irc.freenode.net or you can email 
aclark@aclark.net
.)</summary>
  </entry>
  <entry>
    <title>Register and upload your package</title>
    <link href="https://blog.aclark.net/2012/08/07/pythonpackages-com-using-pypis-oauth1-support-to-register-and-upload-packages/index.html"/>
    <id>urn:uuid:f443a6a8-683a-4673-8f5e-6b75b42f18eb</id>
    <updated>2012-08-07T00:00:00</updated>
    <summary>pythonpackages.com: Using PyPI's OAuth1 support to register and upload packages
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/08/07
    :category: Python

TL;DR PyPI has OAuth1 support; pythonpackages.com uses it to send your GitHub repos to PyPI.
Thanks in very large part to 
Richard Jones
, the Python Package Index now has support for registering and uploading packages via OAuth1. And using his 
sample code
 I was able to take advantage of it on pythonpackages.com. The result is a fairly 
elegant approach to releasing packages
 sans dirty hacks (I had been asking users for their username and password, then storing them in an encrypted session cookies so I could send them to PyPI.) Here's how it works now.
Sign In With GitHub
GitHub provides an easy way to let folks sign in to pythonpackages.com with their APIv3. I was able to code the OAuth dance using only the requests library (HT Kenneth Reitz). This was working as of late 2011.
Select a package
Once you are signed in, you can select a package. Selected packages can perform various actions, one of which is 
Tag and Release
.  As soon as you select Tag and Release, you are required to authenticate with PyPI.
[STRIKEOUT:Enter your PyPI credentials]
In order to get the beta out the door, a dirty hack was added to allow users to enter their PyPI credentials. Credentials were saved in an encrypted session cookie, then written out to .pypirc before calling `python setup.py upload`. Really terrible. This was shipped in early July 2012 and is thankfully no longer necessary (though it is 
still necessary to push the initial commit to GitHub.
)
Authorize pythonpackages.com
Now authorization can happen elegantly via OAuth1. First, sign in to PyPI. Then authorize pythonpackages.com to act on your behalf. Lastly, profit (register and upload your package).
Register and upload your package
At this point you are free to tag and release. I am really excited about this. I began fantasizing about it almost a year ago and after several false starts (pypissh, openid, avoidance) it is now a reality. If you have a minute, please 
give it a try
.</summary>
  </entry>
  <entry>
    <title>Big Picture</title>
    <link href="https://blog.aclark.net/2012/08/01/building-windows-installers-in-the-cloud/index.html"/>
    <id>urn:uuid:a83891ee-bac5-40f7-b691-169c77e5eb44</id>
    <updated>2012-08-01T00:00:00</updated>
    <summary>Building Windows Installers in the Cloud
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/08/01
    :category: Pillow, Python

With pythonpackages.com I want to solve real problems for people today.
So here's a proof of concept for building Windows installers quickly and easily "in the cloud" (i.e. without a Windows machine local). This article is mostly about the back end, as the front end is 
already documented
.
TL;DR: We're moving from proof-of-concept phase to useful-service phase. If you find the demo interesting and want to help build something great, please consider purchasing one of
 
our current plans
.
Step 1: To The Clouds
For the purpose of the demo, I booted up a Windows server on Rackspace Cloud and started installing things. On the short list of things to install was:
Python 2.7 from python.org.
GitHub for Windows from github.com (mainly for git.)
pythonpackages.com from bitbucket.org (free private repos!)
Microsoft compiler (free version, make sure to use the same one used to compile Python.)
Redis for Windows (Hell froze over, you can find this in Microsoft's GitHub account: 
https://github.com/MSOpenTech/Redis
.)
Vim.exe (which I copy to vi.exe because I hate typing vim.)
Once I had all these things in place, I was able to:
Install pythonpackages.com (pip install -r requirements.txt.)
Compile and run Redis (Several projects bundled together in Visual
Studio is apparently called a "solution", how quaint!)
Start the site.
Start testing.
Step 2: Fix all the bugs
This step involved a lot of cursing:
Backslashes.
Lack of vi key bindings.
Other Windows-isms.
But I also praised my 
CoRD Remote Desktop Client
 because it worked awesome. Anyway, the bugs/issues I fixed (and didn't fix) were roughly:
Create new application on GitHub and configured keys accordingly.
Switch Stripe keys to testing.
Fix Python paths and other trivial changes, so the application can run `python setup.py bdist_wininst`.
JavaScript is completely broken for some reason I've yet to determine (haven't looked yet, but guessing Windows path related).
Step 3: Profit!
I have to admit: I was giddy when it started working, and I was able to create a Windows Installer for Pillow (Python Imaging Library fork). I was even happier when I ran the installer and it worked. That's it. Next I hope to 
get some customers
 so I can keep the Windows box running, and make it available to the public.
Big Picture
In case you are interested, the 
roadmap for beta Q3 is here
. I will also mention that I recently used 
Dia
 (<3) to create this info-graphic, in hopes of better communicating what I'm trying to build. Check it out!</summary>
  </entry>
  <entry>
    <title>Pillow Moved to python-imaging Organization</title>
    <link href="https://blog.aclark.net/2012/07/25/pillow-moved-to-python-imaging-organization/index.html"/>
    <id>urn:uuid:4cdf442d-9697-48c7-a8a4-fcd8de8b735f</id>
    <updated>2012-07-25T00:00:00</updated>
    <summary>Pillow Moved to python-imaging Organization
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/07/25
    :category: Pillow, Python

On 7/30/2010 Pillow, the friendly PIL fork, was released.
Since then, there have been a number of releases:
$ vanity Pillow
           Pillow-1.0.tar.gz     2010-07-31      800
           Pillow-1.1.tar.gz     2010-08-01      652
           Pillow-1.2.tar.gz     2010-08-02    1,987
              Pillow-1.3.zip     2010-11-28      589
              Pillow-1.4.zip     2010-11-28      587
              Pillow-1.5.zip     2010-11-28      876
              Pillow-1.6.zip     2010-12-01    6,706
            Pillow-1.7.0.zip     2011-05-28      678
            Pillow-1.7.1.zip     2011-05-31      663
            Pillow-1.7.2.zip     2011-06-02    3,460
            Pillow-1.7.3.zip     2011-07-21      569
            Pillow-1.7.4.zip     2011-07-21    4,156
            Pillow-1.7.5.zip     2011-09-07   17,429
Pillow-1.7.5-py2.7-win32.egg     2011-09-08      917
Pillow-1.7.5-py2.6-win32.egg     2011-09-08      918
Pillow-1.7.5-py2.5-win32.egg     2011-09-08      516
Pillow-1.7.5-py2.4-win32.egg     2011-09-08      477
            Pillow-1.7.6.zip     2012-01-21    7,401
         Pillow-1.7.6.tar.gz     2012-01-21   10,540
Pillow-1.7.6-py2.7-win32.egg     2012-01-21      632
Pillow-1.7.6-py2.6-win32.egg     2012-01-21      439
Pillow-1.7.6-py2.5-win32.egg     2012-01-21      332
Pillow-1.7.6-py2.4-win32.egg     2012-01-21      336
            Pillow-1.7.7.zip     2012-04-05   28,704
Pillow-1.7.7-py2.7-win32.egg     2012-04-09      716
Pillow-1.7.7-py2.6-win32.egg     2012-04-09      354
Pillow-1.7.7-py2.5-win32.egg     2012-04-09      198
Pillow-1.7.7-py2.4-win32.egg     2012-04-09      201
----------------------------------------------------
Pillow has been downloaded 91,833 times!
Originally, I thought if the fork went nowhere, at least the Plone
community could maintain it for its own needs. However since then, a
number of folks outside the Plone community have taken an interest, so
I've decided to move the repository from the 
Plone collective
 to a
new organization called 
python-imaging
. With this change, I hope to
gather folks to help develop a Python 3-compat release before PyCon
2013. (There are various PIL forks with Python 3-compat already in
existence, as well as the official PIL 1.2-dev tarball available from
bitbucket, which has some Python 3-compat if I understand correctly.)
The new home for Pillow is:
https://github.com/python-imaging/Pillow</summary>
  </entry>
  <entry>
    <title>The Plones Templer</title>
    <link href="https://blog.aclark.net/2012/07/12/the-plones-templer/index.html"/>
    <id>urn:uuid:7d851ec9-0320-4529-94b0-1d897c979d22</id>
    <updated>2012-07-12T00:00:00</updated>
    <summary>The Plones Templer
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/07/12
    :category: Buildout, Plone

(c.f. Knights Templar)
(c.f. Knights Templar) I think we have a situation that could use the
help of the Plone and Python communities at large. It goes something
like this:
About 6 years ago, 
Daniel Nouri started the ZopeSkel project
 to
provide a Zope project template to 
PasteScript
Sometime between then and now, the Plone community latched on to the
ZopeSkel project to include templates for its projects.
About 3 years ago, as part of the ZopeSkel project, 
some folks at
the BBQ
 sprint built a more user friendly UI on top of PasteScript.
And some refactoring of the project was planned or occurred, during
which time the entire project was renamed to "Templer".
At present, if you install the latest ZopeSkel (3.0b3) you get:
$ bin/paster create --list-templates
Available templates:
  archetype:         A Plone project that uses Archetypes content types
  basic_buildout:    A basic buildout skeleton
  basic_namespace:   A basic Python project with a namespace package
  basic_package:     A basic setuptools-enabled package
  nested_namespace:  A basic Python project with a nested namespace (2 dots in name)
  paste_deploy:      A web application deployed through paste.deploy
  plone_basic:       A package for Plone add-ons
  plone_nested:      A package for Plone add-ons with a nested namespace
  recipe:            A recipe project for zc.buildout
  zope2_basic:       A Zope project
  zope2_nested:      A nested-namespace Zope package
Looks nice, but some templates are missing. If you install the previous
stable version (2.21.2), you get this:
$ bin/paster create --list-templates
Available templates:
  archetype:          A Plone project that uses Archetypes content types
  basic_namespace:    A basic Python project with a namespace package
  basic_package:      A basic setuptools-enabled package
  basic_zope:         A Zope project
  kss_plugin:         A project for a KSS plugin
  nested_namespace:   A basic Python project with a nested namespace (2 dots in name)
  paste_deploy:       A web application deployed through paste.deploy
  plone:              A project for Plone add-ons
  plone2.5_buildout:  A buildout for Plone 2.5 projects
  plone2.5_theme:     A theme for Plone 2.5
  plone2_theme:       A theme for Plone 2.1
  plone3_buildout:    A buildout for Plone 3 installation
  plone3_portlet:     A Plone 3 portlet
  plone3_theme:       A theme for Plone 3
  plone4_buildout:    A buildout for Plone 4 developer installation
  plone_app:          A project for Plone add-ons with a nested namespace (2 dots in name)
  plone_hosting:      Plone hosting: buildout with ZEO and Plone versions below 3.2
  plone_pas:          A project for a Plone PAS plugin
  recipe:             A recipe project for zc.buildout
  silva_buildout:     A buildout for Silva projects
Looks a lot better. Additionally, with the previous release (2.21.2) you
can install zopeskel.dexterity, and "dexterity" will show up in the list
of available templates (but not so with 3.0b3). So what's left to finish
the move from ZopeSkel to Templer? I'm told by Chris Ewing (the current
project lead) that it's mostly a matter of missing imports in various
Python packages that provide templates to PasteScript. Let's. Finish.
This. This frustrates me because Paster is a nice system (that provides
pluggable commands, and code gen from templates). And ZopeSkel was a
nice system (that provided additional templates and a friendly UI). And
Templer will be a great system, but it's not there yet. So we need to
help Chris et. al. get it there ASAP. In addition to the code
refactoring, they have produced some 
nice documentation available on
readthedocs.org
. If you are interested in helping, please gather
around the #plone on irc.freenode.net to discuss options (I am aclark on
IRC).</summary>
  </entry>
  <entry>
    <title>GitHub Organization support</title>
    <link href="https://blog.aclark.net/2012/07/04/pythonpackages-com-beta-launch/index.html"/>
    <id>urn:uuid:793d7fa1-1d26-42d2-9921-77e7d6b1e6d8</id>
    <updated>2012-07-04T00:00:00</updated>
    <summary>pythonpackages.com beta launch
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/07/04
    :category: Python

After 9 months of development, pythonpackages.com has grand-ceremoniously flipped the switch from alpha to beta. Here is an overview of the beta release features.
Killer GitHub integration
The workflow you may now enjoy is:
Login with your GitHub account
Select a repository that contains a Python package
One-click release
More sweet workflow:
Click a button to release to a test index, PyPI
Create packages through-the-web (with PasteScript)
There's a lot of room for growth, but this feature is exciting even in its simplest form.
Dashboard o releases
pythonpackages.com keeps track of your releases, using the same technology that powers the alpha release "package featuring" feature.
GitHub Organization support
But wait, there's more. Paid plans (which have not been deployed yet) get access to GitHub organizations, whose repositories can then be "slotted" like normal. If you'd like to get started using the site, check out the 
crash course
.</summary>
  </entry>
  <entry>
    <title>Zope2 Bootstrap</title>
    <link href="https://blog.aclark.net/2012/06/12/zope2-bootstrap/index.html"/>
    <id>urn:uuid:bc0a44db-dddb-4cd5-a889-917f1dd87cb5</id>
    <updated>2012-06-12T00:00:00</updated>
    <summary>Zope2 Bootstrap
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/06/12
    :category: Plone

Bootstrap all the things, including Zope2.
zope2_bootstrap
 is a new Python package that 
monkey patches
 Zope2 in order to:
Replace 
manage_page_styles.css.dtml
 styles with 
Twitter Bootstrap
 styles.
Adds CSS classes to 
main
 and/or 
manage_main
 tables.
Inserts a Plone logo (if Plone is installed) above 
manage_tabs.dtml
 tabs (h/t: 
https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/patches/addzmiplonesite.py
).
Inserts a ZMI warning (if Plone is installed) below 
manage_tabs.dtml
 tabs.
In the next version, I'll try to import 
Twitter Bootstrap JavaScript
 for even more goodness. Enjoy, and give feedback in the comments, or 
here
.</summary>
  </entry>
  <entry>
    <title>A Simple Printer of Nested Lists</title>
    <link href="https://blog.aclark.net/2012/05/23/a-simple-printer-of-nested-lists/index.html"/>
    <id>urn:uuid:c5974ff5-8258-453c-9723-e0965ee14baa</id>
    <updated>2012-05-23T00:00:00</updated>
    <summary>A Simple Printer of Nested Lists
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/05/23
    :category: Python

A rant
Do you ever get the urge to kill? How many of us cringe whenever we see these words? Lately I've been spending a lot of time developing 
pythonpackages.com
, (now running on heroku!) during which time I see a lot of these kinds of packages being released.
I kid about the killing part, but seriously: 
this is a problem
.  Fortunately for us, our PyPI overloads see fit to occasionally remove these packages, and for this I am grateful.
I mean it makes me 
dance-around-the-room
 happy! Ahem. But are they really all gone? Close enough. A quick 
crate.io search
 now shows only 2 packages instead of 4 pages of results.
Hallelujah! But is this the best we can do? I know that some well-meaning person wrote a book containing the example that is leading some poor, misguided souls to spam PyPI (if only the author listed the test site instead: 
http://testpypi.python.org/pypi
). And I have to assume that this was just some terrible mistake. But do we all have to live with this mistake?
I'm asking because I honestly don't know the answer. I remember when I started pythonpackages.com, the 
Deliverance
 documentation was being updated something like every 5 minutes (kidding again, but it was frequent enough to be annoying). After grousing about it in public, it stopped happening!
I wonder if some good natured grousing about our friends (read: enemies) the 
simple printers of nested lists
 will do the same?</summary>
  </entry>
  <entry>
    <title>Where we are all headed</title>
    <link href="https://blog.aclark.net/2012/05/11/adam-yauch-has-passed/index.html"/>
    <id>urn:uuid:e70fdc21-7aa9-42d3-ad40-4f35144526b6</id>
    <updated>2012-05-11T00:00:00</updated>
    <summary>Adam Yauch has passed
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/05/11
    :category: Misc

And why it matters to tech people like me.
(I hope my tech colleagues will indulge my thoughts on the recent passing of Beastie Boy Adam Yauch.)
TL;DR: I <3 the Beastie Boys and will miss Adam Yauch; and I suspect many others in the tech world do, and will, too
Where I came from
For as long as I can remember, I've been trying to emulate my heroes. It started with pop music in the 80s and artists like Michael Jackson, Madonna, and of course the Beastie Boys. While I was obsessed with Michael Jackson back then, I don't recall trying too hard to emulate the Beastie Boys… until the 90s.
In the early 90s, I was just out of high school (where I discovered Led Zeppelin, Pink Floyd, Beatles, Stones etc), was working full time at Chili's, and had no serious plans for college. I was really into music, but didn't have the social skills required to participate in any meaningful activities, like playing in a band.
But I loved music.
I listened to Nirvana, Beastie Boys, and any number of other pop, rock and rap acts of the 90s. I went to rock shows at the 8x10 in Baltimore and 9:30 club in DC. I went to festivals like the HFSistival and Lollapalooza. Throughout the decade, I formulated my thoughts on how I would, one day, start a band.
To say the Beastie Boys were inspirational to me during this time period would be a colossal understatement (remember the first time you saw the "So Watcha Want?" video?) While I wholly identified with the angst-ridden music of Nirvana, I also equally identified with the good natured spirit of, and dope-ass-jams from, the Beastie Boys: three guys producing kick ass music with, among other instruments, a "bullshit mic, made out of plastic". Most importantly: they never took themselves too seriously. They made great music, but they were also just like you and me. They made you feel like you could do it, too.
In the late 90s and early to mid 2000s, I finally got a chance to play music. I started a band, played some shows, recorded a few albums, and had a lot of fun. Most importantly: I proved to myself I could do it.  The shows I put on with my band were awesome; they were true rock shows: those in which the audience responded positively, viscerally. There is no better feeling in the world than that type of self-expression.
Who I am now
Eventually the band imploded, and I found a new obsession: technology. I have always been obsessed with tech, but never focused on it exclusively until the mid to late 2000s. Now I have a new set of heroes to emulate, and many new things to prove to myself I can do. Maybe I'll even play music again one day, but if I don't, I know that I accomplished, on some level, what I set out to do. And that is a great feeling.
Where we are all headed
We are all headed forward, now, without Adam Yauch to inspire us anew.  This sucks more than words can express; but it is, alas, a part of life.  Without death to make life precious, there would be no joy in living. We all only have a short period of time in life to accomplish our goals, so it is important that we spend time trying to do so. (And if your goals include helping other people, bonus points from Adam.)
I cannot thank Adam Yauch (MCA), Adam Horovitz (Ad-Rock), and Mike D enough; for providing me with all the inspiration I needed, when I needed it, to live my life; it has made all the difference. I know that Ad-Rock and Mike D will continue to live their lives; and whether that includes performing as "Beastie Boys" or not, does not matter to me; I will still be watching, waiting to be inspired again. And to Adam Yauch who has rapped, joked, snowboarded, and philanthropized his way through all our lives: thank you for the inspiration; I use it every day, and I'll never forget it was 
you
 and your closest two brothers Ad-Rock and Mike D who gave it to me.</summary>
  </entry>
  <entry>
    <title>Workflow</title>
    <link href="https://blog.aclark.net/2012/04/04/test-plone-tmp/index.html"/>
    <id>urn:uuid:b2e20503-4f2a-4367-b305-89bce0df139a</id>
    <updated>2012-04-04T00:00:00</updated>
    <summary>Test-plone 
tmp
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/04/04
    :category: Plone, Python

Since Day 1 with Plone circa 2004, I've always taken pride in and greatly enjoyed refining my development environment.
It's been stable for a while now (> 1 year or so) so I thought I'd share.
Operating system
Mac OS X Latest (Lion, at the time of this writing)
Terminal
Mac OS X Terminal
Editor
Vim
Python
Yes. All versions, via the collective Python buildout:
https://github.com/collective/buildout.python
Plone
Yes. All versions, via pythonpackages.com:
http://docs.pythonpackages.com/en/latest/advanced.html
Additional tools
A 
shell script to run virtualenv, buildout, etc
:
[bash] #!/bin/sh if ! [ -n "$1" ] then echo "Usage:nn$0 <dir>n" exit 1
fi if ! [ -d $1 ] then mkdir $1 fi cd $1 virtualenv-2.7 . bin/pip
install zc.buildout bin/buildout init cat << EOF > buildout.cfg
[buildout] extends =
http://build.pythonpackages.com/buildout/plone/4.2.x-dev EOF
bin/buildout bin/plone start sleep 4 echo "Adding Plone site..." curl -d
form.submitted:boolean="True"
http://admin:admin@localhost:8080/@@plone-addsite?site\_id=Plone
bin/plone stop bin/plone fg [/bash]
A 
Python script to create temporary directories
:
[python] #!/usr/bin/env python

import os import tempfile print os.path.abspath(tempfile.mkdtemp())
[/python]
A default buildout config file:
[buildout]
eggs-directory = /Users/aclark/Developer/eggs-directory
download-cache = /Users/aclark/Developer/download-cache
extends-cache = /Users/aclark/Developer/extends-cache
Workflow
My typical workflow looks like this:
Hang in #plone on irc.freenode.net and wait for questions
Hear question and get inspired to run Plone
Run: 
$ test-plone `tmp`
~ 1 minute later
 I'm browsing 
http://localhost:8080/Plone
 and can install add-ons, check ZMI settings, etc.
Enjoy.</summary>
  </entry>
  <entry>
    <title>Pyramid</title>
    <link href="https://blog.aclark.net/2012/01/30/new-vanity-release/index.html"/>
    <id>urn:uuid:e1816be7-5bbf-48d6-80e0-8ab50f323e64</id>
    <updated>2012-01-30T00:00:00</updated>
    <summary>New Vanity Release
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/01/30
    :category: Django, Plone, Pyramid, Python

This release features the ability to display per package download statistics.
With all the Python 
stats
 
goodness
 going on recently, I got inspired to make a new 
vanity
 release. This release features the ability to display per package download statistics via the `-v` or `--verbose` command line argument.
Here are some of my favorite results.
Vanity
$ vanity vanity -v
     vanity-1.0.zip     2011-04-14      352
   vanity-1.1.0.zip     2011-10-26      139
   vanity-1.1.1.zip     2011-10-28      114
   vanity-1.1.2.zip     2011-10-28      145
vanity-1.2.0.tar.gz     2012-01-30        0
-------------------------------------------
Package `vanity` has been downloaded 750 times!
Django
$ vanity django -v
Django-1.1.3.tar.gz     2010-12-23    2,618
Django-1.1.4.tar.gz     2011-02-09    4,476
  Django-1.2.tar.gz     2010-05-17   15,876
Django-1.2.1.tar.gz     2010-05-24   65,120
Django-1.2.2.tar.gz     2010-09-09    2,467
Django-1.2.3.tar.gz     2010-09-11   73,984
Django-1.2.4.tar.gz     2010-12-23   49,904
Django-1.2.5.tar.gz     2011-02-09   63,977
Django-1.2.6.tar.gz     2011-09-10      427
Django-1.2.7.tar.gz     2011-09-11    6,825
  Django-1.3.tar.gz     2011-03-23  238,504
Django-1.3.1.tar.gz     2011-09-10  176,054
-------------------------------------------
Package `Django` has been downloaded 700,232 times!
Plone
$ vanity plone -v
     Plone-3.2.zip     2008-12-31    1,690
   Plone-3.2.1.zip     2009-02-04    2,466
   Plone-3.2.2.zip     2009-03-03    4,893
   Plone-3.2.3.zip     2009-06-20    2,731
   Plone-3.2a1.zip     2008-10-10      976
  Plone-3.2rc1.zip     2008-12-15      758
     Plone-3.3.zip     2009-08-19    4,611
   Plone-3.3.1.zip     2009-09-09    4,148
Plone-3.3.2.tar.gz     2009-11-03    3,043
   Plone-3.3.3.zip     2009-12-08    1,733
   Plone-3.3.4.zip     2010-01-14    4,906
   Plone-3.3.5.zip     2010-03-03   12,131
Plone-3.3.6.tar.gz     2011-07-19      787
   Plone-3.3b1.zip     2009-03-12      940
  Plone-3.3rc1.zip     2009-03-30      743
  Plone-3.3rc2.zip     2009-04-05    1,822
  Plone-3.3rc3.zip     2009-05-23    2,036
  Plone-3.3rc4.zip     2009-07-07    2,163
  Plone-3.3rc5.zip     2009-08-01    1,211
     Plone-4.0.zip     2010-08-30    3,659
   Plone-4.0.1.zip     2010-10-04    4,224
   Plone-4.0.2.zip     2010-11-22    4,022
   Plone-4.0.3.zip     2011-01-21    3,339
   Plone-4.0.4.zip     2011-03-01    2,711
   Plone-4.0.5.zip     2011-04-09    3,152
   Plone-4.0.6.zip     2011-05-22    1,469
   Plone-4.0.7.zip     2011-06-06    2,192
   Plone-4.0.8.zip     2011-07-17      509
   Plone-4.0.9.zip     2011-07-29      958
  Plone-4.0.10.zip     2011-10-12      495
   Plone-4.0a1.zip     2009-11-19      946
   Plone-4.0a2.zip     2009-12-04      921
   Plone-4.0a3.zip     2009-12-21    1,272
   Plone-4.0a4.zip     2010-02-01    1,121
   Plone-4.0a5.zip     2010-02-19      850
   Plone-4.0b1.zip     2010-03-09    1,308
   Plone-4.0b2.zip     2010-04-10    1,028
   Plone-4.0b3.zip     2010-05-04    1,722
   Plone-4.0b4.zip     2010-06-13    1,642
Plone-4.0b5.tar.gz     2010-07-08    1,995
  Plone-4.0rc1.zip     2010-08-06    1,598
     Plone-4.1.zip     2011-07-17    4,479
Plone-4.1.1.tar.gz     2011-09-21      429
Plone-4.1.2.tar.gz     2011-10-08    2,187
Plone-4.1.3.tar.gz     2011-11-29    1,883
   Plone-4.1a1.zip     2011-01-21      699
   Plone-4.1a2.zip     2011-02-11      451
   Plone-4.1a3.zip     2011-02-15      680
   Plone-4.1b1.zip     2011-03-08      958
   Plone-4.1b2.zip     2011-04-09    1,040
  Plone-4.1rc2.zip     2011-05-22      797
  Plone-4.1rc3.zip     2011-06-06    1,329
   Plone-4.2a1.zip     2011-08-10      521
   Plone-4.2a2.zip     2011-09-16      884
Plone-4.2b1.tar.gz     2011-12-06      619
------------------------------------------
Package `Plone` has been downloaded 111,877 times!
Pyramid
$ vanity pyramid -v
   pyramid-1.0.tar.gz     2011-01-31   24,055
 pyramid-1.0.1.tar.gz     2011-08-13      460
 pyramid-1.0.2.tar.gz     2011-12-15      185
 pyramid-1.0a1.tar.gz     2010-11-05    1,128
 pyramid-1.0a2.tar.gz     2010-11-09      952
 pyramid-1.0a3.tar.gz     2010-11-16      803
 pyramid-1.0a4.tar.gz     2010-11-21    1,732
 pyramid-1.0a5.tar.gz     2010-12-15      639
 pyramid-1.0a6.tar.gz     2010-12-16      834
 pyramid-1.0a7.tar.gz     2010-12-20      912
 pyramid-1.0a8.tar.gz     2010-12-27    1,233
 pyramid-1.0a9.tar.gz     2011-01-08    1,313
pyramid-1.0a10.tar.gz     2011-01-18      960
 pyramid-1.0b1.tar.gz     2011-01-22      871
 pyramid-1.0b2.tar.gz     2011-01-25    1,003
 pyramid-1.0b3.tar.gz     2011-01-28      816
   pyramid-1.1.tar.gz     2011-07-22    5,674
 pyramid-1.1.1.tar.gz     2011-08-13    1,057
 pyramid-1.1.2.tar.gz     2011-08-17    1,560
 pyramid-1.1.3.tar.gz     2011-12-15      160
 pyramid-1.1a1.tar.gz     2011-06-20    1,146
 pyramid-1.1a2.tar.gz     2011-06-23    1,003
 pyramid-1.1a3.tar.gz     2011-06-26    1,252
 pyramid-1.1a4.tar.gz     2011-07-01    1,517
 pyramid-1.1b1.tar.gz     2011-07-10      981
 pyramid-1.1b2.tar.gz     2011-07-13      844
 pyramid-1.1b3.tar.gz     2011-07-15      742
 pyramid-1.1b4.tar.gz     2011-07-18    1,094
   pyramid-1.2.tar.gz     2011-09-13    6,450
 pyramid-1.2.1.tar.gz     2011-09-28   10,357
 pyramid-1.2.2.tar.gz     2011-11-20      322
 pyramid-1.2.3.tar.gz     2011-11-21    3,078
 pyramid-1.2.4.tar.gz     2011-12-06    1,193
 pyramid-1.2.5.tar.gz     2011-12-15      555
 pyramid-1.2.6.tar.gz     2012-01-05      514
 pyramid-1.2.7.tar.gz     2012-01-20      472
 pyramid-1.2a1.tar.gz     2011-08-24      907
 pyramid-1.2a2.tar.gz     2011-08-27      696
 pyramid-1.2a3.tar.gz     2011-08-29    3,268
 pyramid-1.2a4.tar.gz     2011-09-02      593
 pyramid-1.2a5.tar.gz     2011-09-04      840
 pyramid-1.2a6.tar.gz     2011-09-07      602
 pyramid-1.2b1.tar.gz     2011-09-08      493
 pyramid-1.2b2.tar.gz     2011-09-08      700
 pyramid-1.2b3.tar.gz     2011-09-11      674
 pyramid-1.3a1.tar.gz     2011-12-09    1,264
 pyramid-1.3a2.tar.gz     2011-12-14    1,641
 pyramid-1.3a3.tar.gz     2011-12-21    2,716
 pyramid-1.3a4.tar.gz     2012-01-05      675
 pyramid-1.3a5.tar.gz     2012-01-09    2,369
 pyramid-1.3a6.tar.gz     2012-01-20    1,917
---------------------------------------------
Package `pyramid` has been downloaded 97,222 times!
Enjoy the new release.
Duplicate implicit target name: "vanity".</summary>
  </entry>
  <entry>
    <title>Hello Plone theming</title>
    <link href="https://blog.aclark.net/2012/01/25/hello-plone-theming/index.html"/>
    <id>urn:uuid:4fb160a2-1c3b-4306-8ea4-3538f4701890</id>
    <updated>2012-01-25T00:00:00</updated>
    <summary>Hello Plone theming
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2012/01/25
    :category: Plone

In this post, we introduce a new tutorial.
In this post, we introduce a new tutorial aimed at bridging the gap between the 
incredibly easy to use and enormously powerful Diazo theming engine for Plone
, and bootstrapping your first new theme. You do not need to have any Python skills whatsoever to perform these tasks. New Plone themes are:
HTML/CSS/JavaScript/images (Sound familiar? You don't need to know any Plone to understand this part.)
A set of rules that map your HTML/CSS/JavaScript/images to Plone content. (This part is Diazo-specific; and while Diazo is not part of Plone, integration is provided by a Python package called plone.app.theming.)
The Diazo rules can get complex, but it's very easy to get your first rule done and working and then off you go. You may find this 
new tutorial on pythonpackages.com
. Enjoy, and get busy theming Plone.</summary>
  </entry>
  <entry>
    <title>New Year's Python Meme 2011</title>
    <link href="https://blog.aclark.net/2011/12/21/new-years-python-meme-2011/index.html"/>
    <id>urn:uuid:2cbf1c46-20ec-4af5-8a69-d70f5c163080</id>
    <updated>2011-12-21T00:00:00</updated>
    <summary>New Year's Python Meme 2011
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/11/21
    :category: Pyramid, Python

My response
My response to 
http://blog.ziade.org/2011/12/20/new-year039s-python-meme-2011/
.
It was fun 
answering in 2009
, so I thought I'd play again.
What’s the coolest Python application, framework or library you have discovered in 2011?
Pyramid
. In early 2011 I released 
vanity
, which later became 
pythonpackages.com
(more or less). I used building the site as an excuse to learn Pyramid, and it was well worth it.
What new programming technique did you learn in 2011?
I learned to 
not
 reinvent the wheel, and to collaborate with others on solving hard problems (which in and of itself is hard). Long story short, I took a little bit of heat within the Plone CMS community for creating a "one off" migration script:
http://pythonpackages.com/info/parse2plone
I've since learned my lesson and have been collaborating meaningfully with 
Dylan Jay
on the more widely-supported 
mr.migrator
 and friends.
What’s the name of the open source project you contributed to the most in 2011? What did you do?
I contributed to the 
Plone
 project quite a bit (as I have been doing for years now), but I also fell in love with 
Mozilla
 (and their mission) and began working on various things, including a virtual machine to help with the development of 
support.mozilla.com
:
https://github.com/aclark4life/kitsune-vagrant
What was the Python blog or website you read the most in 2011?
Hacker news
. I have the start-up bug.
What are the three top things you want to learn in 2012?
JavaScript, JavaScript, and JavaScript. I first heard the term 15 years ago and have been avoiding it ever since. Time to jump in.
What is the top software, application or library you wish someone would write in 2012?
I hope someone (me) writes a "secret" feature for 
pythonpackages.com
 and launches it in first quarter of 2012; and I hope folks find it useful.</summary>
  </entry>
  <entry>
    <title>Conclusion</title>
    <link href="https://blog.aclark.net/2011/11/29/introducing-pythonpackages-com/index.html"/>
    <id>urn:uuid:89afea17-7df7-4f9f-809c-9c1f01048a3a</id>
    <updated>2011-11-29T00:00:00</updated>
    <summary>Introducing pythonpackages.com
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/11/29
    :category: Python

The website for Python egoists™
I have this overwhelming desire to know how many times my favorite Python packages have been downloaded. Don't you? If so, look no further than 
pythonpackages.com
.
Count downloads
Where you can enter a package like 
Django
 and find out the number of downloads.
Count favorites
Or click on 
Count favorites
 to reveal how many times it has been favorited.
Find trash
Or even poke some good natured fun at it, for its 
failure to provide adequate package metadata
.
Discuss packages
You can even 
discuss
packages on 
pythonpackages.com
.
Recent activity
But wait there is more! You can also browse the 
latest changelog activity
 from PyPi right on the site.
Package info
Lastly, if you get bored counting package downloads and favorites you can look at the 
actual
 
package metadata
.
Conclusion
Sound interesting? Or utterly silly, perhaps? I think 
pythonpackages.com
 is the best of both. It started off as a front end to the command line utility 
vanity
, but has taken on a life of it's own.
After a small run on Python reddit and Hacker News, I'm looking forward to seeing what Python Planet folks think. So please check out 
pythonpackages.com
 and let me know. You can leave comments about the site here.
Or open a new ticket here:
https://bitbucket.org/pythonpackages/pythonpackages.com/issues/new</summary>
  </entry>
  <entry>
    <title>Notes</title>
    <link href="https://blog.aclark.net/2011/11/09/plone-secrets-episode-4-varnish-in-front/index.html"/>
    <id>urn:uuid:dc9865d1-ea2f-4da6-af8d-8f179b5981f9</id>
    <updated>2011-11-09T00:00:00</updated>
    <summary>Plone secrets: Episode 4 - Varnish in front
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/11/09
    :category: Plone

This just in from the production department: use Varnish. (And please forgive the heavily meme-laden approach to describing these techniques.)
Cache ALL the hosts
Our ability to use Varnish in production is no secret by now, or at least it shouldn't be. What is often less clear is exactly how to use it. One way I like[1], is to run Varnish on your public IP port 80 and make Apache listen on your private IP port 80. Then proxy from Varnish to Apache and enjoy easy caching goodness on all your virtual hosts in Apache.
Configuration
This should require less than five minutes of down time to implement. First, configure the appropriate settings. (Well, first install Apache and Varnish if you haven't already: `aptitude install varnish apache2` on Ubuntu Linux[0].)
Varnish
To modify the listen IP address and port, we typically edit a file like 
/etc/default/varnish
 (in Ubuntu). However you do it, configure the equivalent of the following on your system:
DAEMON_OPTS="-a 174.143.252.11:80
             -T localhost:6082
             -f /etc/varnish/default.vcl
             -s malloc,256m"
This environment variable is then passed to 
varnishd
 on the command line. Next, pass traffic to Apache like so (in 
/etc/varnish/default.vcl
 on Ubuntu):
backend default {
 .host = "127.0.0.1";
 .port = "80";
 }
Now on to Apache.
*Please note that the syntax above is for Varnish 3.x and the syntax has (annoyingly) changed from 2.x to 3.x.*
Apache
The Apache part is a bit simpler. You just need to change the listen port (on Ubuntu this is done in 
/etc/apache2/ports.conf
), typically from something like:
Listen *:80
to:
Listen 127.0.0.1:80
Restart ALL the services
Now restart both services. If all goes well you shouldn't notice any difference, except better performance, and when you make a website change and need to clear the cache[2]. For this, I rely on telnetting to the varnish port and issuing the `ban.url` command (formerly `url.purge` in 2.x):
$ telnet localhost 6082
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
200 205
-----------------------------
Varnish Cache CLI 1.0
-----------------------------
Linux,2.6.35.4-rscloud,x86_64,-smalloc,-smalloc,-hcritbitType 'help' for command list.
Type 'quit' to close CLI session.ban.url /
200 0
Cache ALL the disks
This site has Varnish and Apache configured as described in this article. It also has disk caching in Apache enabled, thanks to Elizabeth Leddy's article:
http://plonechix.blogspot.com/2011/08/10-minute-caching-with-apache.html
As a result, it's 
PEPPY AS THE DICKENS™
 on a 512MB "slice" (Cloud server) from Rackspace Cloud. And now you know yet another "Plone secret". Now go make your Plone sites faster, and let me know how it goes in the comments section below.
Notes
[0] Using the latest distribution, "oneric".
[1] I first saw this technique at NASA when NASA Science was powered by
Plone; I found it odd at the time but years later it makes perfect
sense.
[2] Ideally you'd configure this in p.a.caching, but I've not been able
to stomach this yet.</summary>
  </entry>
  <entry>
    <title>Introducing: Plone packages!</title>
    <link href="https://blog.aclark.net/2011/10/24/plone-first-class-python-citizen/index.html"/>
    <id>urn:uuid:739bd99c-f1c9-4b98-aa65-3cc5fce6bc55</id>
    <updated>2011-10-24T00:00:00</updated>
    <summary>Plone: First Class Python Citizen
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/10/24
    :category: Plone, Python

The Plone community and software fit nicely within the larger Python ecosystem. Here's why.
For almost as long as I have been involved in the 
Plone
 project, I've been interested in Plone's role in the Python ecosystem. Today as I look across the current landscape, I'm proud to announce a new milestone the Plone community can take pride in. But the change didn't happen overnight, so first let's take a quick look back.
PyPI support in PSC
Circa 2008, Tarek Ziadé and others finished the PyPI integration branch of PloneSoftwareCenter started by Sidnei Da Silva 2 years before.
This was a big step towards the "Pythonification" of Plone, mainly because Plone packages could now be published on plone.org in the same way Python packages are published to the Python Package Index: via "python setup.py upload". In fact if you are publishing Plone packages, it is recommended that you release to 
both
 PyPI and plone.org simultaneously. This ensures your package is visible to the most number of potential users. And you can use 
mkrelease
 to automate the process.
Collective docs at RTD
Just when you thought things couldn't get more exciting in Python land, along came 
readthedocs.org
 (a Django Dash production, IIRC). And to 
join the fun in July 2011
, I moved Mikko Ohtamaa's awesome 
Plone Community Managed Developer Manual
 to the 
Github collective
 and configured the RTD 
service hook
.
This means that whenever anyone commits a change to the developer manual, within a few minutes a new Sphinx build 
gets published
. It was so easy to set this up, I wish I had done it sooner.
So you can that see over the years, we have been working ourselves into a frenzy of Python goodness! And last week, it got even better.
Introducing: Plone packages!
Thanks to the good folks at 
Cartwheel Web
, makers of the fine 
Open Comparison
 service, Plone now has its very own 
grid comparison website
! (
Djangopackages.com
 was first, followed by 
pyramid.opencomparison.org
.)
This is a site where folks can add packages hosted elsewhere (e.g. svn, github, pypi), vote on them, and add grid comparisons to compare similarly-featured add-ons, frameworks, and other related software.  Grids are the killer feature of this site, and personally I've been waiting to use them to answer questions like:
Q: What's the best blogging add-on for Plone?
A: http://plone.opencomparison.org/grids/g/weblogs/
The content is entirely user driven (TTW only) so please head over to 
plone.opencomparison.org
, login with your github ID, and start adding packages! And while you are at it, please report any issues you find here: 
https://github.com/opencomparison/opencomparison/issues
. Lastly, let's all tweet a big thanks to 
@pydanny
and 
@audreyr
 for their hard work and generosity!</summary>
  </entry>
  <entry>
    <title>Bottom line accommodations</title>
    <link href="https://blog.aclark.net/2011/10/14/pillow-one-year-later/index.html"/>
    <id>urn:uuid:bf050006-26e4-4ab8-a40b-307c4231f991</id>
    <updated>2011-10-14T00:00:00</updated>
    <summary>Pillow: One Year Later
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/10/14
    :category: Pillow, Python

For anyone unfamiliar with Pillow, it is the friendly PIL fork: a fork of PIL that aims to remain a good citizen in the PIL community through its actions.
Warm and fluffy history
Pillow 1.0 was released on 2010-07-31, a little over a year later came Pillow 1.7.5 which features:
Many packaging fixes (mostly to support dependency libraries)
Windows binaries
Over 13K downloads
Pillow is used in Plone's 
UnifiedInstaller
, and I know 
folks from the Django community
are using it.
Future creature comforts
All in all, a mild success. So what's next? 
More of the same
. To 
quote myself from a recent Stack Overflow answer
:
If PIL ever does exactly what Pillow does, then the fork will die. Until that happens, we have Pillow.
Bottom line accommodations
This may never happen of course, which is part of the reason for the fork. You can't force someone to maintain software for you. But in the open source world you can grab the bull by the horns (take the lead) and try to make things better. Even better: if your project and community are healthy and functioning properly, your success or failure will be determined by the folks in the community (as it should be). In this case, the Plone and Python communities have spoken clearly.</summary>
  </entry>
  <entry>
    <title>Notes</title>
    <link href="https://blog.aclark.net/2011/10/03/vagrant-puppet-and-mozilla-oh-my/index.html"/>
    <id>urn:uuid:9c46f1e9-a3dd-4bc6-b3c8-c5be555e94a0</id>
    <updated>2011-10-03T00:00:00</updated>
    <summary>Vagrant, Puppet and Mozilla, Oh my
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/10/03
    :category: Mozilla, Python

This post is only loosely Python related and not at all Plone related.
This post is only loosely Python related and not at all Plone related, but I thought folks might enjoy hearing about Vagrant and Puppet because these tools may help you do your Plone and Python jobs better.
For the past couple weeks I've been working on creating a virtual machine to bootstrap a kitsune environment. Kitsune is the Django site that powers support.mozilla.com. I've now reached what I call the 
2nd milestone
.
Milestones
The milestones are as follows:
Get the VM running to the point where one can type 
./manage.py
 and receive the help output (and not a traceback). This sounds trivial but there is actually a lot of work involved to get to this point. Namely, figuring out how to make 
Puppet
 execute each of the required steps successfully, together. (You would expect to be able to just define the steps in order, but those with this expectation will be disappointed. I assume Puppet has their reasons, and they are probably even good ones.)
Get the VM running to the point where one can open http://33.33.33.10:8000 from the host to see kitsune running. Once step #1 is done, this is actually easier than it sounds because I'm "cheating". Test data has been imported and a syncdb has been run, but I'm using supervisor to manage the runserver process (for now).
Get the VM running like it does in production. This will involve configuring 
Apache
and 
mod_wsgi
 as well as resolving any issues that remain with the app. I'll rely on the kitsune team to help with this, as I'm still learning the app. This is the "exciting" part for me because I get to learn something new. While Vagrant and Puppet are also new to me, I consider these technologies part of my "past life" (as a system administrator) and Django sites part of my "future life" (as a web developer).
Now about the technologies.
Vagrant
I had heard of 
Vagrant
 before, but never tried it. I am now sorry I waited so long because the "cool factor" is very high. It requires that 
Virtualbox
 be installed, which I also danced around for too long before committing (being a former Parallels user).
On OS X Lion[1], installing Vagrant is simply a matter of:
$ gem install vagrant
Once you have `vagrant` installed you can do:
$ vagrant init
inside some revision-controlled directory and you have the beginnings of a virtual machine you can share with the masses. This is how 
kitsune-vagrant
 was born. Hopefully this shared virtual machine will eventually make some new developer's life much easier.
We now arrive at a fork in the road; though Vagrant makes it easy to follow both paths: Chef or Puppet (it supports both). I don't recall what made me choose Puppet over Chef, but it might have been that the 
Socorro folks were using it already
.
Once you decide on Puppet (and assuming you do), it's pretty easy to figure out that your next move is to create a manifest file for Puppet to apply[2].
Puppet
My knowledge of Puppet is currently quite limited. Specifically, I only know how to create a manifest file. (Vagrant does the rest!) I imagine there is much more to Puppet, especially with regard to doing actual configuration management on production servers. But I have not explored any of that yet.
However, I did learn quite a bit about Puppet just from writing the manifest. The first most important thing I learned is this: 
Puppet is in charge
. It does things the way it wants to and you need to follow its rules. The first and biggest challenge is to achieve a linear execution of tasks.
You cannot write rules in order and hope for the best. This will fail spectacularly when something executes before something else was supposed to. The way around this is via `require =>` statements.
A grep through kitsune.pp reveals:
require => Exec['git_clone'],
require => Exec['db_sync'],
require => Exec['packages_upgrade'],
require => Exec['packages_update'],
require => Package[$packages_native],
require => Exec['git_clone'],
require => Exec['chown_kitsune'],
require => Exec['packages_compiled'],
require => Exec['packages_vendor'],
require => Exec['db_create'],
require => Exec['db_import'],
require => file['/etc/supervisor/supervisord.conf'],
require => Exec['supervisor_stop'],
This roughly translates to the following workflow logic:
Ensure that `aptitude -y update; aptitude -y upgrade` have been run before you try to install the list of packages we require.
Ensure the list of packages we require is installed before we checkout the code.
Ensure the code has been checked out (and pip install / git submodule have been run) before you try to syncdb and run the application.
There is a bit more to it, but with that knowledge you should be able to 
read and understand kitsune.pp in full
. I learned most of the remaining required puppeteering from this site:
http://www.puppetcookbook.com/
.
Mozilla
Oh my! This Mozilla work is a ton of fun[3]; I attribute this in part due to the structure of their organization: I was invited immediately to collaborate in IRC with the kitsune team and as a result, we all have something to show for it[4]. Next I will be working on the 3rd milestone! Hope to finish by the end
of this week.
Notes
[1] This did not work on Snow Leopard, because `gem` is too old.  However if you `brew install ruby` and try again, it should work.
[2] I didn't bother to investigate Chef, but I am curious about it.
[3] And I hope this is only the beginning.
[4] I hope to get a Mozilla gig but even if I don't, being able to do this type of work is very rewarding (which is why you will often hear people in open source say that to get paid for the type of work they do is a dream come true).
Duplicate implicit target name: "puppet".
Duplicate implicit target name: "vagrant".</summary>
  </entry>
  <entry>
    <title>Notes</title>
    <link href="https://blog.aclark.net/2011/09/22/mozilla-and-pypi/index.html"/>
    <id>urn:uuid:1e5bcae6-f990-4bcb-bee8-152100b2e98f</id>
    <updated>2011-09-22T00:00:00</updated>
    <summary>Mozilla and PyPI
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/09/22
    :category: Mozilla, Python

VM setup for kitsune
The 
last time I wrote about PyPI
 some folks mistook the subject to be 
PyPy
, so let me be clear: this article is about the 
Python Packaging Index
.
I recently began doing some volunteer work for Mozilla[1], working on a 
virtual machine setup
 to make kitsune development easier (kitsune is the code name for the Django site that powers 
support.mozilla.com
).
Git submodules
In doing so, I came across an interesting command from their 
installation docs
:
$ git submodule update --init --recursive
I can recall some vague rumblings about git submodules prior to this incident, but nothing I'd call "familiarity". So, I shrugged it off and went about the business of creating the VM (and resisting the urge to use 
zc.buildout
 to do it):
On day 1, I created a 
VirtualBox
 VM using the latest Ubuntu Server and was able to assemble and run the application by following the instructions.
On day 2, I began to 
"vagrantize"
 the process. Here I ran into a bit of trouble with the git-submodule command[2]. This led me to seek alternative methods to install the various Python packages it was trying to install (when stuck on a problem I often like to pursue the alternatives immediately, so I have them if I need them.)
Zamboni
Then, in the Mozilla IRC channel #sumodev (
su
pport 
mo
zilla) some nice Mozillian (willkg) pointed me to this gem:
http://mozweb.readthedocs.org/en/latest/packaging.html
Which in turn led me to the following two links:
http://jbalogh.github.com/zamboni/topics/packages/
http://playdoh.readthedocs.org/en/latest/packages.html#packages
Again, faint rumblings… this time about zamboni (not THAT Zamboni). I know I've heard of it, but I wouldn't call myself familiar with it. So, I innocently read the following:
Python projects can incur a number of dependencies. ``pip`` can be handy, but we’ve had better luck with distributing a ``vendor`` library.
At which point I immediately thought to myself:
Yeah… I hear that.
Followed a few seconds later by:
Wait… what?!?
Playdoh
Some time/research later[3], I (re)discovered that zamboni is the codename for 
addons.mozilla.org
[4]. And 
Playdoh
 is the code name for Mozilla's base Django project setup. If you aren't familiar with Playdoh, please do give it a whirl[5].
PyPI
While all of this is very, very interesting to me, I am primarily a "systems and processes" guy; and what ultimately stuck with me after two days of Mozilla-ing is the following blurb from the Playdoh packaging documentation:
The ``/vendor`` library is supposed to contain all packages and repositories. It enables the project to be deployed as one package onto many machines, without relying on PyPI-based installations on each target machine.
"Nooooooooooooooo", I am now saying to myself over and over. "Without relying on PyPI-based installations on each target machine." Another "noooooooooooooooo!" I certainly don't fault Mozilla for taking this approach, but it makes me sad that large organizations like Mozilla are passing over PyPI in favor of alternative methods of distributing Python software.
Let us all now hang our heads, for a moment of pause and reflection.
[a minute passes]
The future
I can't speak for anyone else, but I would certainly like to see this change in the future. I would LOVE to see PyPI become a place that Mozilla felt confident it could use to deploy Python software. And this is something I'd love to work on 
for
 Mozilla, if given the opportunity[6].
Great for Python == great for Mozilla?
It's obvious what's in it for Python, but what's in for Mozilla?
Simple.
I happen to share Mozilla's vision for an open web and open source in general. And it's great to see them embracing & using Python for their web projects! Without a doubt,  they are interested in giving back to the Python community (e.g. via Playdoh and the Django community, in this case.) So I suspect they'd be open to helping the Python community fix a long standing issue: the stability and reliability of the Python Package Index. It would certainly benefit them in the long run to simplify their build process to the point where git-submodule was no longer needed[7].
Notes
[1] I am actively courting Mozilla in hopes of landing a gig by the end of the year. So all you Mozillians who know me personally, please put in a good word! And all you Mozillians I have not met yet: nice to meet you!
[2] The problem turned out to be git-submodule failing to run because things like: grep and sed were missing from the PATH. Easily fixed by modifying the puppet configuration, but not easily discovered because git-submodule itself returned zero! Some guy on #puppet was very helpful in getting me to print out debug info.
[3] More help from friendly Mozillians in #webdev:
11:13 < groovecoder> aclark: yeah, zamboni is amo 11:13 < kumar> playdoh was extracted from zamboni and other apps 11:13 < kumar> but zamboni itself does not eat the playdoh dog food, actually 11:15 < kumar> aclark also, in case you're not steeped in our initialisms, amo is addons.mozilla.org
[4] There is a great presentation about it here: 
http://www.slideshare.net/andymckay/anatomy-of-a-large-django-site-7590098
.)
[5] More from kumar (emphasis is my own):
11:25 < kumar> 
Playdoh is starting to stabilize
 so it would be 
good to see some use of it outside Mozilla
; this would probably help us catch Mozilla-specific things that need extraction
[6] LARGE HINT ;-)
[7] Again, not that there is anything wrong with what Mozilla is doing here. As a systems guy, I just happen to gravitate toward simplifying processes by eliminating steps.
Duplicate implicit target name: "playdoh".</summary>
  </entry>
  <entry>
    <title>Setup</title>
    <link href="https://blog.aclark.net/2011/08/28/hello-mod_wsgi/index.html"/>
    <id>urn:uuid:a6cf92a5-cda5-41f1-a11f-be2606f6556c</id>
    <updated>2011-08-28T00:00:00</updated>
    <summary>Hello mod_wsgi
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/08/28
    :category: Buildout, Plone

It seems I've inadvertently started another series of blog entry
It seems I've inadvertently started another series of blog entry: the "hello world" series, wherein I explain how to easily get started with 
various exciting Python technologies
.
This time, in order to familiarize myself with 
mod_wsgi
, I've created a buildout to automate some of the processes explained in:
http://code.google.com/p/modwsgi/wiki/QuickInstallationGuide
(This series also helps me to subtly introduce the zc.buildout "extendables" I have been working on. More on those in a future post.)
The extendables
The extendables make it easy to bootstrap a development environment with complex software requirements, via 
zc.buildout
. In this case, I want to be able to type:
$ test-apache test-dir
And get a working, 
disposable
 Apache instance minutes later. I also want that Apache to come with a mod_wsgi app installed and working.
Setup
First we use the 
aforementioned extendable
, like so:
$ virtualenv test-dir
$ cd test-dir
$ bin/pip install zc.buildout
$ bin/buildout init
Edit the buildout.cfg to look like this:
[buildout]
extends = https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x
Run buildout:
$ bin/buildout
Assuming successful completion, you should be able to run Apache in the foreground via:
$ bin/supervisord -e debug -n
Now check 
http://localhost:8080
.
This works because the 
"extendable" (buildout configuration file)
 contains:
The 
little WSGI app
 from the QuickInstallationGuide, templatized via 
collective.recipe.template
.
A 
templatized httpd.conf file
.
I like to automate the process even further with the 
following script
:
#!/bin/shmkdir $1
virtualenv-2.6 $1
cd $1
bin/easy_install zc.buildout
bin/buildout init
cat << EOF > buildout.cfg
[buildout]
extends = https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x
EOF
bin/buildout
bin/supervisord -e debug -n
Thus closing the loop on this blog entry, and making the following possible:
$ test-apache test-dir
I've been using my 
test-plone
 script for years now, and I'm hoping that the test-apache script proves just as useful (especially as Plone moves closer to a WSGI-supporting stack via 
Zope 2.13
).</summary>
  </entry>
  <entry>
    <title>Step 3 - Next steps</title>
    <link href="https://blog.aclark.net/2011/08/20/hello-plone/index.html"/>
    <id>urn:uuid:b17b7b3b-e57a-4693-a56a-669414f52a38</id>
    <updated>2011-08-20T00:00:00</updated>
    <summary>Hello Plone
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/08/20
    :category: Buildout, Plone

This is a Plone "Hello, World!" style tutorial/application for Python programmers.
This is a Plone "Hello, World!" style tutorial/application for Python programmers. See 
https://github.com/aclark4life/hello_plone
 for more.
This post has been edited post-publication to improve the wording.
This is not a particularly good example since a template can be specified via ZCML. However once you understand hello_plone you will understand the difference between the two approaches.
Step 1 - Setup
Create a directory called 
hello_plone
 and inside it create a 
virtualenv
:
$ mkdir hello_plone
$ cd hello_plone
$ virtualenv-2.7 .
Then install Buildout:
$ bin/pip install zc.buildout
Then create an empty buildout:
$ bin/buildout init
Then add a Plone buildout:
[buildout]
extends = https://raw.github.com/plock/pins/plone-4-3
Now run Buildout:
$ bin/buildout
And start Plone:
$ bin/plone fg
Open 
http://localhost:8080
.
Click the button and follow the steps. You don't need to select any additional add-ons from the list. Afterward, you should see your Plone site here: 
http://localhost:8080/Plone
.
Step 2 - Develop
Plone is customized via Python packages called Add-ons (née Products). So first we need to create a Python package:
$ mkdir -p my.app/my/app
$ touch my.app/my/app/__init__.py
$ touch my.app/my/__init__.py
Next we add our Python package to the buildout. The 
develop
 line makes the buildout aware of the Python package. The 
eggs
 line makes Plone aware of it:
[buildout]
develop = ./my.app
extends = https://raw.github.com/plock/pins/plone-4-3

[plone]
eggs += my.app
Now we can add some view code:
from Products.Five.browser.pagetemplatefile import
    ViewPageTemplateFile
from zope.publisher.browser import BrowserPage

class Hello(BrowserPage):
    """
    """

    template = ViewPageTemplateFile('hello.pt')

    def __call__(self):
        return self.template()
And load the view code via 
ZCML
:
<configure
    xmlns:browser="http://namespaces.zope.org/browser">

    <browser:page
        class=".hello.hello"
        for="*"
        name="hello"
        permission="zope2.View"
        />

</configure>
And add a 
template
:
<div metal:use-macro="here/main_template/macros/master">

    <div metal:fill-slot="main">

        <h1>Hello world!</h1>

    </div>

</div>
Step 3 - Next steps
Easy through-the-web form generation with 
PloneFormGen
.
Content types with 
Dexterity
.
Theming with 
Diazo
.</summary>
  </entry>
  <entry>
    <title>Notes</title>
    <link href="https://blog.aclark.net/2011/08/09/plone-secrets-episode-3-collective-recaptcha-installation/index.html"/>
    <id>urn:uuid:ae013a4f-0e22-41bd-a79e-abf89ff590e5</id>
    <updated>2011-08-09T00:00:00</updated>
    <summary>Plone Secrets: Episode 3 - Collective Recaptcha Installation
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/08/09
    :category: Buildout, Plone

Another one from the: "wow, this approach is totally and completely non-obvious to beginners" department.
My kingdom for a (custom) contact form (with captcha)
I don't know if I've made written-mention of this anywhere else, but 
aclark.net
has a new customized 
contact form
 with captcha. ;-) It is customized via 
z3c.jbot
 which is an awesome tool (more on that later). This in and of itself is not-so-terribly newsworthy. What is interesting, though, is 
how
 this new customized form came to be; and how its features compare to the default contact form.
So here goes: In Plone, we have a page template called 
contact-info.cpt
. It's not so special (in that it is pretty feature-
less
, though it will send mail if you ask it to) but it does the job for most folks. And it almost has to, because customizing it is beyond the realm of what 
anyone
 would call "straight forward" or "reasonable to expect from TTW customizers, integrators, or even developers"¹.
Why do I say this?
Been there, done that: CMFFormController
First, let me start with the technology that is used to implement the contact form. It's called 
CMFFormController
 and it went out of style in the 1970s, along with disco and bell bottoms. Bell bottoms came back, but CMFFormController didn't! Don't get me wrong: CMFFormController is a decent technology/implementation. It works. But it's not very "modern" by today's coding standards. As such, it will simply be dragged along Plone-version-after-Plone-version until either: a.) someone wants to replace it, or b.) it becomes too big of a maintenance burden to support and someone has to replace it. This is the way of many things, and there is nothing inherently wrong with this phenomenon. In fact, there are even good things about it: e.g. the release manager, framework team, and core developers' ability to publish release-after-solid-release under such code-aging circumstances is a testament to their skill and dedication.
BUT… and this is a BIG BUT.
We can do better
Leaving this old stuff laying around, with no new stuff to point new users to does a huge disservice to 
all
 of our users. It flies 
directly
 in the face of one of our core missions: as 
Wyn Williams
 put it once, to be the
"best damn enterprise content manage system on the planet".
Now, I've been around the block, so I am not suggesting we must fix everything at once. Legacy software can be supported for years and years and years (and 
YEARS
). What I am suggesting is that we need to make a very significant effort to 
COMPLETELY HIDE
 these implementation details to newcomers. I don't want to tell people in IRC to go to 
portal_skins
 anymore. I want my "OS X Lion release for Plone", please (sans Vista overtones.)
So how do we get there? Well, in the case of portal_skins there is talk of decommissioning 
portal_view_customizations,
 which was supposed to be the "new portal_skins" as I understand it. But since half of our templates are still in CMF skin layers, 
and
 because this feature was not technically well received (i.e. it needs 
more
 features and development), 
and
 because 
portal_resources
 came along around the same time as 
plone.app.theming
, folks are considering removing portal_view_customizations. I have no strong opinion about it (other than I hate the name, too long) and I trust the Framework Team to handle it. What I do care about is that whatever remains in the ZMI be very clearly designated as either "new style" or "old style". We can't get away from the ZMI yet, but portal tools do have title attributes so let's use them.
Now, we can't ditch 
portal_skins
 just yet, and who knows what will happen with 
portal_view_customizations
, but the *minute* we know some technology is out of date, we should reveal it in the user interface (even in the ZMI user interface). E.g.:
Curiously, the attribute that holds this string is lowercase "title"
(I'd expect camel case Description, though I'm not entirely sure why
I expect that.)
Hanno Schlichting has made some great progress recently with enhancing the ZMI for Plone users, especially with regard to
file-system vs.  through-the-web
 development, and 
through-the-plone vs. through-the-zmi configuration
.
I love this trend, and would like to see more of it!
Secrets revealed
Anyway, I've been dancing around the secrets to be revealed in this blog post because it is fun to play with the future. And it's important to work hard toward achieving it. But enough of that, here is what you need to know today.
Like I said, I customized the contact form.
Old style vs. new style
Back in the "old days" you had to create a CMF skin layer and put a copy of the template in a directory on the file system, configured as a File System Directory View. 
Everything
 used to be customized via skin layers.
Now-a-days, we have z3c.jbot. Though a bit of a hack², it does exactly what you'd expect, almost exactly how you'd expect it to. It 
doesn't even require a Python package
. By convention though, folks typically do put z3c.jbot template customizations in Python packages.
This requires a few steps.
Step 1: Create a Python package
First, a Python package. This is relatively simple, so I'm not going to skip-and-point-you-somewhere-else just yet, I'm going to explain first.
The 
gist of it
 is this:
$ mkdir -p my.package/my/package
$ touch my.package/setup.py
$ touch my.package/my/__init__.py
$ touch my.package/my/package/__init__.py
Now you would edit setup.py and the "middle" __init__.py with code.
Something like this:
#!/bin/sh
mkdir -p my.package/my/package
touch my.package/setup.py
touch my.package/my/__init__.py
touch my.package/my/package/__init__.py
cat > my.package/setup.py << EOF
from setuptools import setup, find_packages
setup(
    name='my.package',
    packages=find_packages(),
    namespace_packages=[
        'my',
    ]
)
EOF
cat > my.package/my/__init__.py << EOF
from pkg_resources import declare_namespace
declare_namespace(__name__)
EOF
Alternatively, use 
ZopeSkel
 to generate all this boilerplate code for you. It does a much better, and more complete job than what I have done here. The important thing is that you 
understand what is going on
. In the case of aclark.net, our Python package is called 
plonetheme.aclarknet
.
Step 2: Add template overrides
Now that we have a Python package we can start customizing Plone. By convention, we  create a "templates" directory inside the namespaced package e.g.:
$ mkdir my.package/my/package/templates
Or you can check out aclark.net's "templates" directory here:
https://github.com/ACLARKNET/aclark_net_website/tree/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates
Because of the way z3c.jbot works, in the "templates" directory, we add files with names that correspond to the Python module we want to customize. E.g.
https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates/Products.CMFPlone.skins.plone_templates.contact-info.cpt
(For some reason, github thinks that file is binary, so 
here are the contents
.)
Now, this is the amazing part: in addition to templates in views, viewlets and portlets, we can customize any 
CMF
 object! E.g. the 
RestrictedPython
 (more technology anyone?) CMFFormController validation script used to validate our contact form:
https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates/Products.CMFPlone.skins.plone_form_scripts.validate_site_feedback.vpy
That brings us to adding recaptcha, but first let us finish configuring template overrides.
Step 3: Configure template overrides
Now that we have customized Plone templates, we can configure Plone to use our customizations.
This is done via a technology you may have heard of: 
ZCML
. Using ZCML, we can tell Plone (or jbot in this case) to use the templates in our "templates" directory.
The ZCML we are going to use is placed in the "top level" configure.zcml file in our package. That means we need a top level configure.zcml file:
$ touch my.package/my/package/configure.zcml
Next we add ZCML to "configure our application". Note in addition to the ZCML used to configure jbot, there is ZCML for Diazo and ZCML to hold our 
Genericsetup customizations:
<configure
    xmlns:browser="http://namespaces.zope.org/browser"
    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
    xmlns:plone="http://namespaces.plone.org/plone"
    xmlns="http://namespaces.zope.org/zope">    <plone:static directory="theme/aclarknet" type="theme" />    <include package="z3c.jbot" file="meta.zcml" />
    <browser:jbot directory="templates" />    <genericsetup:registerProfile
        name="default"
        title="ACLARK.NET, LLC profile"
        description="Installs ACLARK.NET, LLC site
            customizations"
        directory="profiles/default"
        provides="Products.GenericSetup.interfaces.EXTENSION"
        /></configure>
This file is located here:
https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/configure.zcml
You can see that everything inside the <configure></configure> tag(s) is associated with an XML namespace. If you don't add the appropriate namespace inside the <configure> tag, your configuration will fail spectacularly (because without the proper XML namespace configured, there is no code loaded to handle your configuration.)
Step 4: Add recaptcha
Now, finally, we get to the exciting part. We have customized our contact form, but we are receiving a fair amount of spam due to spammers' ability to automate form submission. To foil the spammers, we want to add a captcha form that will hopefully require that an actual human to fill out the form.
Thanks to David Glick and Groundwire, we have 
collective.recaptcha
 which provides an integration of 
Google's Recaptcha service
 into Plone.
In order to use it, first we add the package to our buildout, e.g.:
…
[plone]
# Eggs are Python packages
eggs +=
#   Diazo theming
    plonetheme.aclarknet
#   Add-ons
    collective.portlet.wordpress
    collective.recaptcha# Need zcml for c.recaptcha until 1.1.3 is released
zcml = collective.recaptcha
…
See the rest of the file here:
https://raw.github.com/ACLARKNET/aclark_net_website/master/buildout.cfg
Now run buildout and restart Plone.
With collective.recaptcha installed via buildout, you should now be able to open 
http://yoursite:8080/Plone/@@recaptcha-settings
 to configure Recaptcha.
(To get a public and private key, you can sign up for recaptcha here: 
http://www.google.com/recaptcha
)
Lastly, make the appropriate changes to the contact form and validation script. E.g. 
include the captcha image:
…
<tal:block tal:replace="structure
    context/@@captcha/image_tag"/>
…
And make sure to 
validate the submission
:
…
    # Re-captcha validation
    if not context.restrictedTraverse('@@captcha').verify():
        context.plone_utils.addPortalMessage(_(u'You entered
            an invalid captcha.'), 'error')
        return state.set(status='failure')
    else:
        return state
…
That's it!
Notes
¹ I'm pushing "reasonable" limits here for argument's sake. For those who know Plone already, a lot of what might seem impossible to newcomers is "reasonable" for them. No flames please. Unless you absolutely must.  ;-)
² I hear people call it that, though I don't know the details. I assume it "monkey patches" which template to use at render-time.</summary>
  </entry>
  <entry>
    <title>Notes</title>
    <link href="https://blog.aclark.net/2011/07/06/plone-secrets-episode-2-collective-python-buildout/index.html"/>
    <id>urn:uuid:8b9853d9-3550-4eb6-ab77-159c09a478b1</id>
    <updated>2011-07-06T00:00:00</updated>
    <summary>Plone Secrets: Episode 2 - Collective Python Buildout
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/07/06
    :category: Buildout, Plone

You know who uses the (Plone) Collective Python buildout?
You know who uses the (Plone) Collective Python buildout? Me neither, because we don't have any good statistics on its use (that I know of).  If it were a Python package, we could at least 
count the number of times it has been downloaded
.
You know who should use it? Everyone.
[dramatic pause…]
OK maybe not everyone, but at least everyone that regularly develops with 
multiple versions of Python
. Here's why.
Actively maintained
Check out the log. It has been going strong for over 3 years.
If I recall correctly, it was born out of the frustration¹ of having to compile Python on Mac OS X Leopard. Python 
never
 compiles correctly on new versions of OS X (which is a complete mystery to me given that Apple ships with Python, don't they think people will want to compile it?).
Easy to install
Got Subversion? Then you 
can haz
 the Collective Python buildout². You will also need to bootstrap it with whatever Python version you happen to have laying around. I won't go into detail about this; but suffice it to say depending on your OS, one of the following or something like it should work:
$ aptitude install python2.5
Or:
$ brew install python
If you are on Windows, give up (unless you have a Microsoft C compiler). Sorry.
Now, check out the code from the repository (if you are a member of the 
Collective
 and may potentially contribute something back, make sure you use https):
$ svn co http://svn.plone.org/svn/collective/buildout/python
Next, bootstrap and run the buildout:
$ cd python
$ python bootstrap.py -d
$ bin/buildout
That's it. The buildout should go merrily on it's way compiling Python 2.4 through 3.2. When it finishes, you can install it in /opt (or wherever you like) with the following command (you might need sudo):
$ bin/install-links
Then you should see:
$ /bin/ls -1 /opt/local/bin
easy_install-2.4
easy_install-2.5
easy_install-2.6
easy_install-2.7
easy_install-3.2
pip-2.4
pip-2.5
pip-2.6
pip-2.7
pip-3.2
python2.4
python2.5
python2.6
python2.7
python3.2
virtualenv-2.4
virtualenv-2.5
virtualenv-2.6
virtualenv-2.7
virtualenv-3.2
Easy to configure
Now you can add 
/opt/local/bin
 to your environment PATH variable.  This will make it easy to choose a particular Python, PIP, or Virtualenv at your leisure.
Unfortunately, if you pip install something, it will end up in the checkout instead of 
/opt/local/bin
.
To get around this, I usually pick one Python for daily use, and add its bin directory to my environment PATH variable:
$ echo $PATH | tr ':' 'n'
/sbin
/usr/sbin
/usr/local/bin
/opt/local/bin
/Users/aclark/Developer/collective/python/python-2.7/bin
/usr/bin
/bin
/sbin
/usr/X11/bin
After various pip installs, my 2.7 bin directory contains the usual tools of the trade:
$ /bin/ls -1 /Users/aclark/Developer/collective/python/
python-2.7/bin
__dotcloud_git_ssh
activate
activate.csh
activate.fish
activate_this.py
bfg2pyramid
checkoutmanager
cloudservers
dotcloud
easy_install
easy_install-2.7
eye
flake8
fsdump
fsoids
fsrefs
fstail
hg
mako-render
mkrelease
paster
pilconvert.py
pildriver.py
pilfile.py
pilfont.py
pilprint.py
pip
pip-2.7
playerpiano
pygmentize
python
python2.7
recorderpiano
repozo
rfc2397
rst2html.py
rst2latex.py
rst2man.py
rst2newlatex.py
rst2odt.py
rst2odt_prepstyles.py
rst2pseudoxml.py
rst2s5.py
rst2xml.py
rstpep2html.py
runzeo
sphinx-autogen
sphinx-build
sphinx-quickstart
vanity
zconfig
zconfig_schema2html
zdaemon
zeoctl
zeopack
zeopasswd
Wrap it up, I'll take it
That's it! There is not too much more to say, other than I hope you find this post useful and will consider using the 
Collective Python buildout
.
Of course, comments are always welcome.
Notes
¹ Experienced by its creator, 
fschulze
.
² It will likely end up on 
Github
 at some point.</summary>
  </entry>
  <entry>
    <title>Results</title>
    <link href="https://blog.aclark.net/2011/06/20/plone-secrets-episode-1-site-actions-contact-link/index.html"/>
    <id>urn:uuid:23546db0-8bb0-4d6e-b230-be2f0f374093</id>
    <updated>2011-06-20T00:00:00</updated>
    <summary>Plone Secrets Episode 1 Site Actions Contact Link
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/06/20
    :category: Plone

Today I am introducing a new category of blog entry called Plone secrets.
The goal is to describe a set of developer/integrator techniques that are extremely valuable, but completely non-obvious to newcomers.
The first episode, called: 
Site actions contact link
, is really just a technique that involves the Zope Management Interface, Plone interface, file system, Diazo, and quite possibly a few other technologies. This is no secret, but certainly convoluted. Noticeably absent is anything Python-related, unless you count the 
plonetheme.aclarknet
 namespace package.
We begin by pointing your attention to the new "Contact us today!" link on aclark.net.
This is a gratuitous rip off of any Plone firm's website that has contact info in the upper right of their site (e.g.  
http://sixfeetup.com
).
I knew I wanted to do "my version" of adding contact info to the upper right, and I think I've seen someone use this exact technique somewhere else (I would credit them if I could remember.)
Long story short: Plone 4's sunburst theme has a nice JavaScript drop down menu for the personal tools menu. As long as I was willing to give up a link to the login form (which I don't like displaying on public sites anyway), I could use this JavaScript menu to quickly and easily provide a link to my contact form.
It "only" required the following:
Step 1
Get the personal tools menu to show up in my site. This was accomplished via the following Diazo rule:
<prepend content='//*[@id="portal-personaltools"]'
     theme='//*[@id="search"]' />
Note also that I am using the early-supported XPath syntax, but the more friendly CSS syntax is supported now too. See 
http://diazo.org
 for more information.
For the full set of Diazo rules for this site, see here:
Plone: 
https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/theme/aclarknet/rules.xml
Wordpress: 
https://github.com/ACLARKNET/aclark_net_website/blob/master/theme/blog.xml
Step 2
Next, we need to create and display only the "Contact us today!" link, which also involves disabling the "Log in" link. These tricks can be performed in the Zope Management Interface via the portal_actions tool.
First, browse to 
Site Setup -> Zope Management Interface -> portal_actions -> user
 and create a 
contact
 action.
Fill in the appropriate fields and click 
Save changes
.
Finally, hide the 
Log in
 action by unchecking 
Visible
 and clicking 
Save changes
.
Step 3
Lastly and most importantly, persist your work on the file system outside of the database. You don't want to be forced to recreate this site action ever again through the web.
This involves exporting the action via portal setup, and adding it to your package's GenericSetup profile. Browse to 
Site Setup -> Zope Management Interface -> portal_setup -> Export. Check the `Action providers
 step.
Then scroll all the way down to bottom and click 
Export selected steps
.
This will give you a tarred/gzipped file that when extracted will give you an 
actions.xml
 file. Edit this file to include only the action you created, like so:
<?xml version="1.0"?> </object>
</object>
You can find this file in its entirety here:
https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/profiles/default/actions.xml
You also have to register a default profile in your package with ZCML (more technology!), like so:
<genericsetup:registerProfile
 name="default"
 title="ACLARK.NET, LLC profile"
 description="Installs ACLARK.NET, LLC site customizations"
 directory="profiles/default"
 provides="Products.GenericSetup.interfaces.EXTENSION"
 />
You can find this file in its entirety here:
https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/configure.zcml
Step 4
Style the results. This is more like Step 3.5, but still important.  Because we are doing Diazo theming, styling is easy. It's just a matter of editing the style sheet on the file system like you would expect to do in any web project. Of course, you need to know a bit about CSS and the CSS ids that Plone uses:
#personaltools-contact {
    color: #AA001F;
    background: white;
    text-transform: uppercase;
    font-size: 150%;
}
#portal-personaltools {
    background: white;
}
You can find this file in its entirety here:
https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/theme/aclarknet/static/css/plone.css#L519
And of course, these styles apply to the public facing site.
Results
That's it!
I hope this post captures the essence of why I think many folks may be intimidated by Plone: in more cases than not, one must understand way too many technologies in order to get the job done. I hope to continue to demystify Plone through a series of "Plone secrets" posts, and ultimately I think the Plone project hopes to resolve these issues once and for all, however long that takes.
I will speculate that long term Plone will move away from Zope 2, and everything from the Zope Management Interface that was useful will be recreated in Plone (i.e. ported). Or rather, that is what I would like to see happen.</summary>
  </entry>
  <entry>
    <title>Notes</title>
    <link href="https://blog.aclark.net/2011/06/16/youre-so-vain-so-why-not-use-vanity/index.html"/>
    <id>urn:uuid:97913d98-58b8-471c-922d-7691c49494ae</id>
    <updated>2011-06-16T00:00:00</updated>
    <summary>You're So Vain, So Why Not Use Vanity?
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/06/16
    :category: Python

A few months ago I created a package called Vanity
A few months ago I created a package called 
Vanity
[0] that provides easy access to package download statistics from 
PyPI
. You can find the source code here: 
https://github.com/aclark4life/vanity
.
I love this tool, and I use it all the time to gauge the value of a package. Of course, downloads are only one criteria you can use to judge the value of a package, and arguably not even a very good one.  
Vanity
 itself is a good example of this phenomenon. I find it incredibly useful, but in it's history it has only been downloaded 
130
 times.
Other packages I have created with much less value have been downloaded more times, e.g. 
plonetheme.aclark_twitter
 which has been downloaded  
674
 times. But that package has also been around much longer. So obviously another useful metric would be the 
time period
 during which the downloads occurred.
Anyway, here is how it works:
$ easy_install vanity
Then:
$ vanity <package>
For example:
$ vanity vanity
Package `vanity` has been downloaded 130 times!
Or:
$ vanity plonetheme.aclark_twitter
Package `plonetheme.aclark_twitter` has been downloaded 674 times!
Some of my other favorites:
$ vanity Django[1]
Package `Django` has been downloaded 302111 times!
$ vanity zope.component
Package `zope.component` has been downloaded 210541 times!
$ vanity pyramid
Package `pyramid` has been downloaded 26067 times!
Another thing to consider is if hitting 
PyPI
 each time is really necessary. I'm told there is 
PyPI
 data living somewhere else, and in future versions I would like to make vanity use that data by default.
So, this post is simply to announce 
Vanity
 to a wider audience in the event that some folks may find it useful. Otherwise, I will be happy to continue to watch 
Vanity
 downloads crawl ever so slowly towards 200.
Notes
[0] By standing on the shoulders of some Plone giants, 
David Glick,
 in particular.
[1] There is a 
known issue
 with regard to making Vanity case insensitive.</summary>
  </entry>
  <entry>
    <title>Notes</title>
    <link href="https://blog.aclark.net/2011/06/14/aclark-net-seeks-unique-candidate-for-part-time-business-consulting/index.html"/>
    <id>urn:uuid:a693b275-a62d-48b9-8288-04cb05b43d67</id>
    <updated>2011-06-14T00:00:00</updated>
    <summary>ACLARK.NET, LLC Seeks Unique Candidate For Part-Time Business Consulting Opportunity
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/06/14
    :category: Misc

We are looking for a unique and talented (but mostly non-technical) individual that is passionate about Plone
We are looking for a unique and talented (but mostly non-technical) individual that is passionate about Plone, and able to dedicate some small amount of time per month to generating new business for us[1].
Plone is up and coming (again)! And we want to (1.) capitalize on that fact and (2.) scale our business accordingly. But to do so, we really need your help.
About us
We are a team[2] of Python, Plone, Web, and Business savvy people focused on Python, Plone, the web, and generally speaking: deploying and maintaining Plone applications that range from CMS to specialized applications, tailored to fit the needs of our clients[3].
Alex
For those of you that know me, you know that I am largely technically, very artistic, and focused a lot on systems and making-things-work (vs.  programming), and that I am passionate to a fault about Plone and the Plone community. For those of you that don't know me, I'm responsible for all new business at ACLARK.NET and I am the technical lead on all of our projects. I also rock a maroon Japanese Fender Stratocaster (circa mid 1980s) on occasion.
Amy
My wife and business partner Amy is the "business coordinator" and she handles all things customer-related (that are non-technical) as well as anything legal and/or financial. If you know her, then you know she is a force to be reckoned with as well as one of the nicest, most professional people you will ever meet. If you don't know her, watch out! When she is not watching the bottom line, Amy can be found caring for our always-singing-while-she-is-on-the-phone yellow canary: J.  Alexander Chirpington III.
Team
Team ACLARK also consists of a variety of highly skilled sub contractors that always make us look good by making our clients happy, and hopefully have lots of fun doing it.
Business
To date, other than constantly "pimping" (promoting) myself personally (on behalf of my company) within the Plone community, we have never actively sought out any business. And we manage to stay quite busy with the work that finds us. But it has occurred to us that in order to compete most effectively with "the big boys" (i.e. all our friends/colleagues/etc at 
http://plone.net
) we need to be more pro-active about seeking out new business.
That's where you come in.
About you
We need someone to pursue leads on our behalf, because we simply don't have time to do it and we don't have anyone in-house that is particularly well-suited to the task. However, we don't want to let that stop us from growing our business and deploying as many Plone sites as possible; especially when we are confident we have the ability to deliver on just about any kind of Plone-related project, and then some (i.e. Django, Pyramid, etc., almost anything Python-related.)
Criteria
First and foremost, you love (and use) Plone (but aren't necessarily an integrator/developer; most likely an end user). But also:
You are a "people person".
You have some writing skills, perhaps even a technical writer.
You are aggressive about scoring new business, perhaps even someone with a sales background.
You are a professional, and will represent us and our business accordingly!
Also nice to have:
You have a full-time job that is Plone-related.
You have experience writing proposals.
You don't necessarily have to "know everything" to do this job effectively for us, but you do have to be excited and pro-active about it.
Logistics
We don't know how this will work yet. We are certainly willing to pay a percentage of the anticipated bid value for any bid we win, but we are considering other options as well.
Next step
Sound like you? Let's talk: 
aclark@aclark.net
, 301-312-5236.
We look forward to hearing from you, and please feel free to pass this information on to anyone you think may be interested in this opportunity.
Notes
Finding and submitting proposals, with our assistance, as needed. Even something as small as 8 hours per month would be helpful.
http://aclark.net/team
http://aclark.net/clients</summary>
  </entry>
  <entry>
    <title>Disclaimer</title>
    <link href="https://blog.aclark.net/2011/05/27/new-plone-theming-has-arrived/index.html"/>
    <id>urn:uuid:7963609e-8b66-419f-b399-c26b22cacca9</id>
    <updated>2011-05-27T00:00:00</updated>
    <summary>New Plone Theming Has Arrived
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/05/27
    :category: Plone

Due to the new Diazo theming features now available, I am very excited about the recent release of Plone 4.1rc2
Edit2:
Enfold/Ploud.net looking for theme developers, see Alan Runyan's comment below.
Edit
: Laurence Rowe made new Diazo and plone.app.theming releases so the 
zip file
now works! Thanks Laurence.
Due to the new Diazo theming features now available, I am very excited about the recent release of 
Plone 4.1rc2
 and 
plone.app.theming 1.0b2
. So much so, I created a couple themes (in just a few hours) to demonstrate my 
rapture [1]
:
(released)

http://pypi.python.org/pypi/plonetheme.unilluminated/0.1.0
(unreleased) 
https://github.com/aclark4life/plonetheme.coolblue
Granted, these aren't entirely "finished" (e.g. lots of CSS improvements are needed) but it is truly impressive how much you can do with so little effort (thanks to the hard work of the Diazo team, Plone team, and of course the theme designers themselves).
The best part has got to be the 
zip file packaging features
 in plone.app.theming (provided by 
plone.resource
). While I did have a bit of trouble getting 
my zip file
 to work, I suspect I'll get that issue resolved this week (I don't think I was able to import any zipped themes, even the ones from p.a.theming tests).
Suprise! I like it
What I am most surprised about is how much I like this approach:
Developers can easily distribute themes in Python packages, and pay a much smaller "theming tax" with new style Diazo theming.
They can also optionally choose to distribute Diazo themes as zip files for easy public consumption (although I can't think of any
good, automated way to publish just the zip files.)
If I am not mistaken the contents of a zipped theme can be loaded 
quite elegantly
, without changing their contents, via a 
Python
package
.
So, let us now commence the spamming of PyPI and the 
Plone.org downloads section
 with "fun" easy-to-install (read: no buildout) Plone themes! [2]
Disclaimer
These are my experiences with relatively new Plone technologies. If I've made a mistake or if your experiences are different, please let me know in the comments.
[1] Please forgive gratuitous belated rapture humor.
[2] Before you get upset over any suggested spamming, I only mean to suggest that the ability to distribute a theme as a zip file lowers the bar to Plone adoption tremendously. Personally (and tentatively, since I'm not even sure if everything is meant to work the way I currently expect it to), I plan to include a zipped archive of any theme I distribute as a Python package because it is so easy to do so (or hopefully will be very soon). But how the community chooses to capitalize on this new-found ability remains to be seen.</summary>
  </entry>
  <entry>
    <title>BaaS (Buildout as a Service)</title>
    <link href="https://blog.aclark.net/2011/05/10/top-10-reasons-plone-3-3-site-admin-book-is-still-for-you/index.html"/>
    <id>urn:uuid:9c6c842d-d788-4ba6-960d-115de355e2d5</id>
    <updated>2011-05-10T00:00:00</updated>
    <summary>Top 10 Reasons Plone 3.3 Site Admin Book is Still for You
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/05/10
    :category: Buildout, Plone

About a year ago, I was frantically trying to finish 'Plone 3.3 Site Administration' …
About a year ago, I was frantically trying to finish 
Plone 3.3 Site Administration
 in time to teach it at Plone Symposium East 2010 at Penn State University as well as publish it. I remember staying up all night to finish & submit the final drafts then driving 4 hours to Penn State, then teaching for 8 hours before I was finally able to crash (but not before consuming a large and delicious cheeseburger and a Yuengling from the 
Nittany Lion Inn
 room service, yum).
The class went well and everyone seemed happy with the results and I am very grateful to PSU for the opportunity. I remember struggling to get some Windows users up to speed, so this year I've decided to "require" students to install Plone before the class via the 
appropriate installer for their platform
. Most "site admin-ing" we do will be "ad hoc" preferably on top of a stand-alone Python installation. But we can refer to the installer-based Plone as needed and in fact the installer-based Plone is all some folks will ever need or want.
The list
Anyway, this post is about this year's class taught from the same material but updated to account for any changes that have occurred since the book was first published. Most importantly, it addresses the release of Plone 4 in the context of the book title "Plone 3.3 Site Administration". So without further ado, why "Plone 3.3 Site Administration" is still for you:
The version reference in the title is mostly meaningless
.  
PACKT
 insist on incorporating a software version number into the title of their books. I would have called it: "Plone Site Administration", or "Buildout for Plone".
The book teaches valuable *techniques*, using Plone 3.3 as an example
. Most, if not all of the techniques still apply today i.e. w/Plone 4.0.x and Plone 4.1.x. They will likely continue to apply as long as Plone continues to rely on 
zc.buildout
.
Plone makes it relatively easy to upgrade
 by providing 
version numbers
 for all of the packages it requires. In many cases an upgrade simply involves referring to a newer list of package versions. In the case of upgrading from Plone 3.3.x to Plone 4.0.x, the [zope2] section goes away because Zope2 became an egg. (Compare 
this buildout
 with 
this one
.) Also Plone 4 buildouts should be bootstrapped with Python 2.6 instead of Python 2.4 as was required by Plone 3.
Python tools "goodness"
. This book goes to great lengths to demonstrate how Plone fits "naturally" on top of the Python software stack. It also includes information about non-Plone-specific Python-related technologies like 
Setuptools
 and 
pip
. This in theory makes Plone more approachable to "regular" Python folk.
The Python buildout
. One of the most useful things the Plone community has to offer the Python community at large is the 
Python buildout
. If you do development that requires multiple versions of Python e.g. Plone 3.3.x/4.0.x you could do worse than to rely on this buildout to provide them multiple versions quickly and easily. The book dances around the subject, but the point is: use it.
Cross-platform
. This book goes to great lengths to demonstrate the Plone installation process on three popular operating systems: Mac OS X, Ubuntu Linux, and Windows. The point is to show off how similar the process is across platforms because Python does all the hard work, and of course to deal with the cases where it is not similar e.g. it's "hard" to compile 
Python on Windows
.
Add-ons
! A lot of the value of Plone comes from the ability to customize it to fit your needs. If that customization has already been done by some other member of the community, even better. This is one of the core essences of the Plone community: everyone working hard to contribute to the available pool of add-ons, and then 
sharing the results
. This book aims to make you better at evaluating the myriad of options you may be presented with when you need to 
find and install an add-on
.
Upgrades
! The final chapter of the book holds your hand and walks you through an upgrade from Plone 3.3.x to Plone 4.0.x. It doesn't contain anything you can't find at 
http://plone.org/upgrade
 (in fact it contains much less information), but in the context of a book full of buildout configuration file examples, it should feel more like a natural step than an intimidating process.
Security
! The book covers how to deal with security patches, 
not
 in the common case of when a hotfix is released as a Zope 2 Product or Python egg, but in the 
somewhat more obscure case
 where a newer (non-egg) Zope2 release replaces an older one with a vulnerability. The modern equivalent would be a Plone release post-security-hotfix release. Such releases simply contain a newer KGS listing package versions that contain the appropriate fixes.  This "old school" example is included to give readers as broad a perspective as possible, so that they may better handle anything they may come across in the wild.
All the boring stuff too
. This book also walks you through the remaining "hot" topics not covered yet in this list, all from a heavy zc.buildout configuration management perspective: site basics e.g. customizing navigation, appearance (AKA theming, strictly "old style" sorry), administration e.g. mail settings, ldap, deployment and maintenance e.g. automating database backups and packing, and optimization e.g. load balancing, supervisor, and 
munin graphs
!
That's it!
The training
Sound even the 
slightest
 bit interesting? And/or are these things you 
need
 to know about Plone for your job? If so, then you or your employees will not want to miss my one day class next week at the 
Plone Symposium East 2011
. In case you or your employees are interested, you can sign up here (separate from the symposium):
http://aclark.net/services
Hope to see you there.
The service
BaaS (Buildout as a Service)
(Yes, I am serious)
And finally for whatever it is worth, many of the lessons learned from writing the book from the author's perspective ended up here:
https://github.com/plock/pins
That is to say: buildouts are frequently changing in response to what is going on in the Python package ecosystem around them even though their primary goal is to maintain stability and/or to only change when you want to change. When a change like a security fix or configuration change comes along, the author pushes changes out to the dist server than deploys the dist server changes to production.</summary>
  </entry>
  <entry>
    <title>The story</title>
    <link href="https://blog.aclark.net/2011/05/03/plone-conference-2008-is-a-wrap/index.html"/>
    <id>urn:uuid:72fee214-89b5-4e2a-9914-000fb3fc495c</id>
    <updated>2011-05-03T00:00:00</updated>
    <summary>Plone Conference 2008 is Finally a Wrap
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/05/03
    :category: Plone

I have yet to finish my obligations to Plone Conference 2008 until NOW.
I have yet to finish my obligations to 
Plone Conference 2008
 until NOW: approximately 2 years, 6 months, and 23 days after the end of the post-conference sprint.
The story
We had some trouble with the video company and I had to hunt them down to get copies of missing talks. We still didn't get everything, but this is the last of what we did get. I got these missing DVDs about a year ago, and since then I've been trying to find the time to upload them to 
blip.tv
. Invariably, I got stuck on some aspect of the conversion process so I decided to "give up" and just upload the ripped copies to 
dist.plone.org
.
As such, if anyone in the community has the time and expertise to convert these to Quicktime format, I would greatly appreciate it, and I would be happy to upload the results to blip.tv (this is how we did it the first time if I recall correctly.) Until then, they have at least reached their final resting place, and folks can get access to them if they are interested, here:
WebLion: Bringing Open Sources Practices to the Educational
Enterprise
Introduction to z3c.form
The Big Green Button: Turning Plone into a dynamic site factory
Collective Good: Best Practices for Creating, Releasing and
Maintaining Add-on Products for Plone
Why Through-The-Web Development Isn't
Relational database applications with Plone and SQLAlchemy
Reaching Deployment Nirvana Using Buildout
Remarkably, some of these newly added videos are 
still
 relevant 
and
 enjoyable to watch, as are many of the ones already available in the easily browsable 
archive
.
My sincerest apologies to the community and especially to those whose videos were amongst this group for the delay, you should not have had to wait 2 days let alone over 2 years!
Thus, I now declare 
Plone Conference 2008
 to be wrapped. Thanks to Sean Kelly for the 
help transferring the video
 to plone.org.</summary>
  </entry>
  <entry>
    <title>Credits</title>
    <link href="https://blog.aclark.net/2011/04/15/collective-transmogrifier-without-plone/index.html"/>
    <id>urn:uuid:8d3c29ec-897b-4184-a84e-78235e4c004e</id>
    <updated>2011-04-15T00:00:00</updated>
    <summary>Collective.transmogrifier Without Plone?
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/04/15
    :category: Buildout, Plone

Yes!
Since I began drinking the 
collective.transmogrifier
 Kool Aid a few months back, I've gotten quite excited about the possibility of being able to use it outside Plone, i.e. like "regular" Python people would do.
It just so happens I have a current project that requires me to import content to Plone 2.5; it took me a while to realize I could just setup a Plone 4 instance, run transmogrifier in it, and import content from it (i.e. from the file system) to Plone 2.5 over XML-RPC. But something about having to include Plone 4 in that scenario rubbed me the wrong way: Plone 4 is not needed, it's just executing the pipeline.
(I also don't like the idea of having to create a Python package and a GenericSetup profile in order to facilitate a migration.)
Goals
So in addition to working on getting 
mr.migrator
 to be able to configure and execute pipelines (currently only GenericSetup profiles and Python code are supported), I thought I'd experiment with removing the CMFCore dependency.
The initial, 
experimental
 results can be seen in action here:
https://github.com/aclark4life/mr_migrator_demo
From the 
README
:
Introduction
============

This demo is:* Proof of concept for mr.migrator: A tool that provides the ability to
register and execute collective.transmogrifier pipelines without creating a
Python package. It's Miller Time™.* Also proof of concept for collective.transmogrifier with the CMFCore
dependency removed (and a zope.component dependency added in its place).
It's Scotch time™.

Explanation
-----------
In order to work, it currently relies on:* https://svn.plone.org/svn/collective/collective.transmogrifier/branches/aclark-mr-migrator-compat
* https://svn.plone.org/svn/collective/transmogrify.filesystem/branches/aclark-mr-migrator-compat
* git@github.com:aclark4life/transmogrify.ploneremote.git These are, respectively:* A branch of c.transmogrifier with a setuptools entry point plugin system
added, and the CMFCore dependencies removed (gracefully, I hope).* A branch of t.filesystem with the collective.transmogrifier entry point
specified (and some CMFCore dependencies removed).* A fork of t.ploneremote with the collective.transmogrifier entry point
specified (and some CMFCore dependencies remove).
…
It's a work in progress, but it actually imports content. You may try it locally, as explained in the rest of the 
README
:
Installation
------------
You can try out this demo::

    $ git clone git@github.com:aclark4life/mr_migrator_demo.git
    $ cd mr_migrator_demo
    $ python bootstrap.py
    $ bin/buildout

Elsewhere, setup a Plone site listenining on localhost:8080 with a Plone site
object called "Plone" and then:

    $ bin/mr.migrator

You should end up with content in Plone that looks like this:
…
I hope this helps move the state of the art forward a bit; it would be great to share this technology with the rest of the Python world. And in case you are curious about the changes, you can read the revision log here:
http://dev.plone.org/collective/log/collective.transmogrifier/branches/aclark-mr-migrator-compat
Start with the following revision, and click through the next 8 commits:
http://dev.plone.org/collective/changeset/237628/collective.transmogrifier/branches/aclark-mr-migrator-compat
Comments welcome.
Credits
Thanks Martijn Pieters for creating collective.transmogrifier; thanks Martin Aspeli and Dylan Jay for their blueprints; and thanks Dylan Jay for bringing transmogrifier to the masses via mr.migrator.</summary>
  </entry>
  <entry>
    <title>After charm</title>
    <link href="https://blog.aclark.net/2011/03/29/introducing-charm-death-to-charm/index.html"/>
    <id>urn:uuid:e9d9c4cd-cc43-401a-acaf-adcda1ded5f5</id>
    <updated>2011-03-29T00:00:00</updated>
    <summary>Introducing Charm; Death to Charm
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/03/29
    :category: Plone

A long time ago (several years ago, or more) one of my first Plone jobs was importing content from the file system.
A long time ago (several years ago, or more) one of my first Plone jobs was importing content from the file system (put there by another CMS) to a client's Plone 2.5 website (see: 
http://blip.tv/file/761624/
).
Some time later (last year or so) the client decided they wanted to scoop up even more content from the file system (we only grabbed the last few years prior to launch!)
Unfortunately, the old migration code was truly a horror. So I've been having a hard time making myself run it again (I was just learning Python at the time.)
About charm
This is where 
charm
 comes in; formerly 
mr.importer
, formerly 
parse2plone
. Get it? The third time is a… I had the "big idea" to rewrite, then open source the code I wrote for the client.  Unfortunately, the rewrite became a horror too.
First, it was not well received amongst the more reusable approaches based on 
collective.transmogrifier
, and rightfully so. While it was unpleasant to be told I was heading in the wrong direction, it was 
*even more*
 unpleasant to find out "they" were right.
Second, as "they" predicted, I got to the point where I couldn't read or maintain it any more (and I 
*just*
 wrote it).
So, I decided to revert to a version which had much fewer configuration options, because making it configurable became a huge distraction. What's left is:
The code is "readable", for some value of readable (PEP8/pyflakes compliant) and it's in a single module: 
charm.py
.
The concept is "simple", for some value of simple; it's a recipe that creates a script for you, that you run via:
$ bin/plone run bin/charm /path/to/files
The results are "impressive" for some value of impressive; it imports content from the file system into Plone:
2011-03-21 11:51:20,302 - charm - INFO - Imported 19 folders,
1 images, 20 pages, and 2 files.
It won't crash (!), for some value of "keeps going"; it tries to do try/except on operations more likely to fail  e.g. create_parts (via --ignore-errors). This aims to ensure you at least get some content in your site post-execution.
$ bin/plone run bin/charm html --ignore-errors
...
2011-03-22 07:24:32,821 - charm - INFO - creating folder 'id' inside
                          parent folder '/Plone'
2011-03-22 07:24:32,822 - charm - INFO - Keep going! Ignoring error
                          'The id "id" is invalid - it is already in use.'
It has some tests, 34% coverage at the time of this writing:
619    34%   charm   (/Users/aclark/Developer/charm/charm.py)
Has "cool" features, for some value of cool. Most notably, the "collapse" feature (AKA "slugify"):
$ bin/plone run bin/charm html --collapse
...
2011-03-22 07:13:28,673 - charm - INFO - path 'html/2011/01/01/test-collapse',
                          has subdirs '', and files 'index.html'
...
2011-03-22 07:13:28,693 - charm - INFO - object 'test-collapse-20110101.html'
                          does not exist inside '/Plone'
2011-03-22 07:13:28,693 - charm - INFO - creating page 'test-collapse-20110101.html'
                          inside parent folder '/Plone'
And the "publish" feature to optionally publish content after creation:
$ bin/plone run bin/charm html --collapse --publish
...
2011-03-22 07:13:29,008 - charm - INFO - publishing page 'test-collapse-20110101.html'
And a few more things, but as you can see we are quickly approaching the point where more functionality does not necessarily mean better software. It's hard to build something complex AND make it easy to use, which is why I am moving on.
Charming demo
In writing this blog entry and releasing charm 1.0b4 I wanted to make sure to demonstrate how it works, so here is a screencast. This is how I envision content importing should work in Plone (or at least this is how I envision a "simple" way it could work.)
After charm
After I began writing 
charm
, I began to collaborate with Dylan Jay on funnelweb and beyond (e.g. 
mr.migrator
). And I am now more determined than ever to write reusable code.</summary>
  </entry>
  <entry>
    <title>Post-sprint sprinting</title>
    <link href="https://blog.aclark.net/2011/02/16/cioppino-sprint-report/index.html"/>
    <id>urn:uuid:b1f40fb3-b03a-4e24-bd00-d009cc087e5a</id>
    <updated>2011-02-16T00:00:00</updated>
    <summary>Cioppino Sprint Report
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/02/16
    :category: Plone

The Cioppino Sprint was recently held in Bodega Bay, CA.
The 
Cioppino Sprint
 was recently held in Bodega Bay, CA. It was a 
beautiful location
 for a gathering of awesome Plone folks; and much was accomplished. Unfortunately on the second morning of the sprint, we were all deeply saddened to hear about the passing of Dorneles Treméa.
The passing of Dorneles Treméa
I didn't know Dorneles very well, but he was certainly someone I idolized during my initial Plone fascination days (e.g. "Who are all these cool people with such cool names!"). And after digging through my old emails, I now remember we had several pleasant exchanges over the years.
Memories
In particular, I have this memory of Dorneles and Alan Runyan sitting together at the Plone Conference 2008 sprint, smiling and working on their laptops. Before his death, it was just a random image that would occasionally pop into my head. Now, it's something I'll remember him by.
We also corresponded briefly about his 
ExternalStorage
 add-on for Plone, around the time we upgraded plone.org from Plone 2.5 to Plone 3.0 (circa 2008), as well as traded emails about his invitation to attend Plone Conference 2008 in DC (for his visa application).
The funniest thing he ever said to me was when I was making the rounds asking for donations for Plone Conference 2008. He replied,
"Are you aware that you're talking with a 3rd world citizen?"
I'm not sure if I offended him, or what. But it struck me funny at the time (and he went on to joke about how donations usually flow in the other direction, ending with his tongue stuck out i.e. ":-p"). It also reminded me of one the things I love most about Plone: the opportunity (I may never get otherwise) to correspond/collaborate with cool, passionate people all over the world.
To me, Dorneles was one of the living embodiments of the 
coolness
 and 
worldliness
 of the Plone project.
Wishes
My condolences and best wishes to his family, I hope you know how much he meant to so many folks in the Plone and Python communities. And just how many lives he touched with his work. And goodbye Dorneles; though I knew you very little, I will miss you very much. May your legacy live on, long in to the future.
Incidentally, if you would like to give money to help support Dorneles' family in the aftermath of this tragedy, you can do so here: 
http://associacao.python.org.br/doacoes-familia-dorneles
.
Anyway, the sprint (or at least my part of it) was awesome! Amidst the very sad and shocking news of Dorneles' passing, we all kept busy with our work.
Sprint report
It's a bit overwhelming to try and capture everything that happened (and I was only there for two days!); hopefully this report will be useful. The focus of this sprint was evaluator approachability (i.e. making Plone look good to prospective new users).
Day 1 and Day 2
Steve McMahon (SteveM) was our host. Alex Limi (limi) provided general direction regarding strategies to improve plone.net, documentation, and end user support. But most importantly, he pointed out that the first stop for any prospective new user is the website, so it's important that it look good.
David Glick (davisagli) and Elizabeth Leddy (eleddy) wasted no time in diving in to the 150 or so open tickets in the (now defunct) 
plone.org issue tracker
.
I (aclark) quickly fell into the role of the "deployment witch" (a role I enjoy), and suggested people simply push the 
ACLARK
 button (née Staples Easy Button) whenever they needed their code deployed to plone.org.
We closed a good number of tickets this way.
Additionally:
Ross Patterson (zenwryly) grabbed a hold of the 
PloneOrg add-on
 (the add-on that powers plone.org) and added tests (among other things).
Tyler Randles (hennaheto) and Trish Ang (feeeeesh) fixed a number of CSS annoyances, which were 
committed by SteveM
 (while Tyler & Trish pondered core commit access). My favorite of which is the now-blissfully-aligned username and password fields of the login_form:
zenwryly fixed the 
team section
 of plone.org.
davisagli completed the last remaining task to fix 
PloneSoftwareCenter
 permissions on plone.org (the sharing tab finally works now!)
limi 
fixed a CSS sprite issue
 on plone.org (involving https, I think).
SteveM tackled 
SSL certificate issues
 on plone.org.
aclark took a stab at plone.net by converting the old style add-on Product that powers it to a 
new style Egg package
. zenwryly then 
took that ball and ran with it
, added tests and otherwise prepared for the future (i.e. Plone 4 compat).
Jon Stahl (remotely) added a 
"follow" section
 to plone.org.
hennaheto and feeeeesh produced this amazing (but 
possibly non-compliant
) sprint logo
Day 3, Day 4 and Day 5
Unfortunately, I had to leave on Friday morning but these are some of the things that happened after I left. Most importantly, Tom Kapanka (spanktar) arrived Thursday night and Bill Deegan arrived on Friday. And then:
zenwryly updated PloneServicesCenter to Plone 4.
limi and zenwryly replaced images of "showcased sites" in PloneServicesCenter with a web screenshot service to eliminate the need for storing images. (This move is still in progress, and various folks are working on issues with the web screenshot service. Please be patient!)
zenwryly and limi moved content from plone.net to plone.org.
aclark (remotely) pulled the DNS trigger on plone.net (re-configured A records for plone.net, to resolve to the same IP as plone.org)
eleddy and spanktar created and released 
cioppino.twothumbs
 to facilitate "thumb style" (up/down) ratings in PloneSoftwareCenter.
davisagli made it so Plone can start without PIL (via fixes to PlonePAS and plone.app.blob). And these fixes even made it in to Plone 4.1a3! To be clear, Plone still requires PIL to render images but it will start if it's missing.
davisagli and eleddy refactored the PloneOrg buildout
Bill and limi moved the remaining old Plone installers from Sourceforge to 
dist.plone.org
.
Post-sprint sprinting
One of the great things about a sprint is that it really focuses
attendees on accomplishing their tasks, long after they have left the
event. To that end:
aclark triaged the remaining tickets in the plone.org tracker, and did a final tally of closed ticket rankings: davisagli (55), aclark (32), eleddy (28), limi (7). davisagli wins!
aclark got inspired to begin uploading the half dozen or so missing videos from various Plone Conference 2008 talks (which were finally sent to him by the video company circa last year). Look for these to 
land on plone.org
 soon.
eleddy continued to develop the “two thumbs” feature.
eleddy and aclark deployed the "two thumbs" feature to plone.org.  (This feature may not work as expected yet, eleddy is resolving issues.) Check it out:
limi continued to improve the documentation/ and support/ sections of plone.org. Here are some screenshots of how the new sections will look once they launch:
That's it! Just so you don't worry the sprinters worked too hard, you can rest assured everyone was in good hands with zenwryly and his travelling-bar.
If you enjoyed reading this report and/or appreciate all the fun-but-hard work that goes in to attending a sprint, please consider
 
donating to my travel fund
. 
Only three days left, and I'm still a few dollars short!</summary>
  </entry>
  <entry>
    <title>Conclusion</title>
    <link href="https://blog.aclark.net/2011/01/31/in-defense-of-pypi/index.html"/>
    <id>urn:uuid:6c560cc0-c5ba-4494-b005-0d12f49a8f55</id>
    <updated>2011-01-31T00:00:00</updated>
    <summary>In Defense of PyPI
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/01/31
    :category: Python

Everyone on the Python Planet is probably already familiar with Peter Fein's recent article about PyPI.
Everyone on the Python Planet is probably already familiar with Peter Fein's recent article 
about PyPI use (or lack thereof).
 But in case not, particularly striking was the number of folks who joined the "PyPI bashing" in the comments. In fact, it has inspired me to write this post "in defense of PyPI". I would like to offer the Python community a summary of what I think are the general criticisms, along with my responses as a "sysadmin / developer type".
First let me say this: I love PyPI! And I agree with Peter, if your package isn't on PyPI it  "doesn't exist". I wouldn't put it quite like that; but I would say it's fairly important if you are publishing open source Python code, to consider uploading it to the Python Package Index.
Why?
Because Everybody Wins
Believe it or not, the general Python community is interested in seeing your code. Whether to use it for an example, or to avoid reinventing the wheel, or whatever the reason; we'd like a chance to see your code. But if you don't publish it to PyPI, we may never get that chance!
For better or worse, PyPI is the canonical place on Earth for Python packages. It's the CPAN of Python. I understand that not everyone is 100% comfortable with this, but that doesn't make it any less true. If you accept that "open source is good", and that "Python rules", then you simply must take this next leap of faith: "PyPI is 
the
 place for Python packages".
[waves hand]
Moving on, why else should you consider uploading your packages to PyPI?
Because It Is The "Right" Thing To Do
Another thing that struck me is the number of folks who (appear to) confuse "version control" with "distribution". If I'm not mistaken, Launchpad, Github, and Bitbucket are primarily designed for Bazaar, Git, and Mercurial hosting respectively. These sites can host your distribution tarballs, but they certainly weren't 
designed and built
 to do so. Rather, they were designed and built to host your source code.
In some cases, a project may wish to host it's own 
distribution server
. Whether it be for redundancy (although PyPI has begun to tackle this) or "branding" or other reasons, I would argue this is the preferred way of handling it: 
in addition to uploading to PyPI, not in place of it
.
Why?
Because It Is Not That Hard
Ahem… we get it. The situation with easy_install is "less than ideal".  But this is something to be fixed, not avoided. If you are receiving too many support requests, may I suggest 
simply telling people not to use easy_install
. Or, if the problem is proper packaging, learn how to 
test your packages
 before uploading them. Due to the large number of screwed up releases I've made, I've come to rely on a
local PyPI
 and a virtualenv to test installations. Others use 
even simpler methods
.  And with tools like 
mkrelease,
 it's easy to upload your package to multiple PyPI locations with just a single command (although leaping-tall-buildings-in-a single-bound is not yet supported.)
The point is, please consider helping the community fix the problem rather than simply avoiding it. There are folks 
actively trying to improve the situation
 right now.
Let's see, what else?
Because It Does Not Have To Be Perfect
Over the years I've seen various and sundry criticisms of the PyPI user interface. Fine. I have not looked into the current development process, but I assume the author/maintainers would be open to some constructive criticism and/or development assistance.
It doesn't have to be Github-sexy to be useful. If you would like to report a bug or feature request, do it 
here
 (at least, I think that is the right place.)
Conclusion
I hope this convinces at least some folks to consider uploading their packages to PyPI. If it doesn't, please let me know why in the comments.
Did you enjoy reading this article? If so, please consider `helping me help Plone`_.</summary>
  </entry>
  <entry>
    <title>Conclusion</title>
    <link href="https://blog.aclark.net/2011/01/26/hostout-rules/index.html"/>
    <id>urn:uuid:d200dcbf-a024-4cf4-bd9b-93e52085b000</id>
    <updated>2011-01-26T00:00:00</updated>
    <summary>Hostout Rules
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/01/26
    :category: Buildout, Plone

As in "dominates", not a "list of rules"
I spent a long time avoiding 
collective.hostout
 for reasons I will
call "technical stylistic differences" with the author Dylan Jay.
But then I grew up (and in cases of Plone growth like this, I usually
end up crediting the probably-much-younger-than-me-in-years,
but-certainly-much-more-possessive-of-sage-like-wisdom-than-me-Martin-Aspeli;
and this time is certainly no exception. So thanks Martin!)
As it turns out, Hostout (as I like to call it now, because we are on a
first name basis) is awesome! Let me break down the awesomeness for you.
Buildout
It starts with Buildout. I won't bore you with the details of why
Buildout is awesome, but I will mention one key feature:
INI-style configuration, y'all.
Sometimes you just want to specify something like:
[foo]
bar = baz
and be done. I am not making this up folks. There is something about
INI-style configuration that transcends time and space, and reaches
across partisan-aisles to bring folks together in a "let's just get this
done" sort of way. Of course not everyone likes them, but if you are a
technical person and don't like them, I guarantee you at least
understand them and can see why they might be appropriate in some cases
over another technology.
Anyway, back to the awesomeness.
Fabric
Fabric is awesome! I won't bore you with the details of why Fabric is
awesome. But I will mention one key feature:
SSH, people. SSH.
Sometimes you just want to type:
$ fab -H foo.com bar
and be done. Fabric lets you execute the Python code you wrote in a
function called "bar", inside a (local) file called fabfile.py, on a
(remote) host called foo.com. All with the touch of a button, so to
speak. That is to say, you create a local fabfile.py file, and Fabric
runs the code remotely for you on any number of hosts you give it.
Brilliant.
Now, what could be better than these two technologies? These two
technologies 
together
, that's what. (See where I am going with this?)
And what could be better than joining these two technologies? Joining
them with 
absolutely no effort required on your part whatsoever
,
that's what.
I have a long history of touting software that makes my job (and life)
easier, and Hostout fits right in with that tradition. I'm just sorry it
took me this long to try it out.
Hostout
As compelling as it is to write "pure Python" in fab files, and it is,
sometimes you just want to be done. And Hostout helps you get there. I
will explain in a minute, but first a slight detour.
Back story
I recently blogged about the relaunch of this website 
here
. Shortly
after the launch, I realized I needed a quick and easy way to deploy my
staging site to production. I pitched the idea of a utility called
"mr.pusher" to accomplish this task to Dylan, with the caveat that I was
interested in making it work with Hostout.
As it turns out, between Hostout and a recipe I created years ago called

collective.recipe.rsync
, "mr.pusher" almost already existed. Now back
to the story.
Fabric integration made easy
Since I knew I wanted to be able to execute a "push" command remotely, I
figured I would finally get acclimated with Hostout.
After a small wrestling match in my head with the docs, I came up with

this
:
# Hostout makes Fabric integration easy
[staging]
recipe = collective.hostout
host = aclark.net
path = /srv/staging[production]
recipe = collective.hostout
host = aclark.net
path = /srv/aclark_net_website
At this point (after running buildout) I was able to perform such great
feats of remote administration (on my already-deployed-sans-hostout
sites) as:
$ bin/hostout staging run git pull
$ bin/hostout staging run bin/buildout -c staging.cfg
Armed with this ability, I added the following to my 
staging.cfg:
# Create scripts to deploy staging data to production.
# Be VERY careful with this. You could easily overwrite your
# live production data if you either forget to use the script
# option, or accidentally run the bin/rsync-filestorage-to-production
# script without stopping the production site first.
[filestorage-to-production]
recipe = collective.recipe.rsync
source = var/filestorage/Data.fs
target = ../aclark_net_website/var/filestorage/Data.fs
script = true[blobstorage-to-production]
recipe = collective.recipe.rsync
source = var/blobstorage/
target = ../aclark_net_website/var/blobstorage/
script = true
The result was two scripts I could use to "push" staging to production,
but only after stopping the production site first:
$ bin/hostout production run bin/supervisorctl shutdown
$ bin/hostout staging run bin/rsync-filestorage-to-production
$ bin/hostout staging run bin/rsync-blobstorage-to-production
$ bin/hostout production run bin/supervisord
And we're deployed! This technique is particularly elegant when used in
combination with a
custom 503
.
Conclusion
I really like this setup, and I really appreciate what Hostout gets me
"for free"; I didn't have to create a fabfile.py, I just configured my
staging and production host parameters in buildout.cfg and off I went.
Of course, there is always room for improvement. The next most logical
step for me would be to add cloud integration. If I could provision a
new Rackspace cloud server via buildout, and then host-it-out, I think
the future will have arrived. And since that is exactly what

hostout.cloud
 appears to do, welcome to the future!
Alex Clark (January 2011)
Did you enjoy reading this article? Please consider `helping me help
Plone in February 2011`_.</summary>
  </entry>
  <entry>
    <title>Conclusion</title>
    <link href="https://blog.aclark.net/2011/01/25/you-should-buy-plone-3-for-education-right-now/index.html"/>
    <id>urn:uuid:dda9a3e6-0e55-44ac-8ece-e6896fabf734</id>
    <updated>2011-01-25T00:00:00</updated>
    <summary>You Should Buy Plone 3 for Education Right Now
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/01/25
    :category: Plone

With what must be the fifth or sixth round of apologies to both Erik Rose and PACKT publishing for the delay (very sorry guys), here is my review! Better late than never.
I get bored with the same ol' blog entry titles:
"A review of so and so's book, by such and such…"
Not that there is anything wrong with these titles, they serve their purpose. It's not you… it's me. Can we still be friends?
Anyway, I will cut to the chase with this one: if you care about Plone and you have not done so already, you should buy 
`Plone 3 for Education`_
right now.
Why?
Several reasons:
Erik Rose cares about Plone. He cares so much, he spent months of his life pouring his professional experiences into a book so you can benefit!
PACKT publishing will donate a percentage of the proceeds to the 
Plone Foundation.
You will learn a lot about Plone, from the perspective of someone who has supported its deployment and maintenance within a large educational institution.
That is not to say every Plone book is for you. You have to decide for yourself if you want this beautiful creation (see above) of Erik's to shine on your mantle piece for years to come. Even if you are a giant Plone supporter, and even if you make your living off of Plone, you may still not want to purchase this book. That's just the way that it goes.  But, I will to try to convince you anyway! Here is my chapter-by-chapter review:
Preface
The preface sets the tone of the book, and I like the tone Erik sets.  Erik has used Plone for many years at 
Penn State
 and you will find his experiences valuable. He's made mistakes so you don't have to!
Chapter 1
Chapter 1 covers creating courses (of course!) Erik makes the argument that Plone can hold it's own against expensive course management software, and I believe him. Of particular interest are Erik's recommendations to:
Put courses in large Plone folders
Use news items, events and collections in the context of a course.
Cut and paste the course framework once you are done creating it.
Chapter 2
Chapter 2 introduces calendaring in Plone, and Erik suggests using 
Plone4artists calendar
 to make your course content easily browsable.  Of particular interest are Erik's recommendations to:
Replace the stock Plone events folder (which is a collection contained within a folder) with (just) a collection.
Make clever use of keywords to support lots of events.
Reorder subfolders in a collection "the hard way". (Also interesting that he opened this ticket: 
https://dev.plone.org/plone/ticket/9109
and that it has received no "love" to date. Perhaps the new collections UI: 
http://dev.plone.org/plone/ticket/10902
 will save the day!)
Chapter 3
Chapter 3 showcases the 
Faculty/Staff Directory
 (FSD) add-on for Plone which allows you to create an online personnel directory. Of particular interest is Erik's explanation of how to categorize and correlate people within FSD.
Chapter 4
Chapter 4 covers customizing Faculty/Staff Directory. Of particular interest is Erik's coverage of 
AT Schema Extender
(which is a great way to customize Plone these days).
Chapter 5
Chapter 5 covers blogs and forums. Of particular interest is Erik's coverage of 
Scrawl
, and the need to exercise extreme caution when installing add-ons (always good advice).
Chapter 6
Chapter 6 covers audio and video. Of particular interest is Erik's coverage of 
collective.flowplayer
 which makes 
Flowplayer
 easy to use in Plone.
Chapter 7
Chapter 7 covers forms. Of particular interest is Erik's comparison of 
PloneFormGen
 to Archetypes content objects, and his explanation of when to use one over the other.
Chapter 8
Chapter 8 covers theming. Of particular interest is Erik's coverage of "new style" template customizations via 
z3c.jbot
 (which you 
don't even need a package for!
)
Chapter 9
Chapter 9 covers deployment. Of particular interest is Erik's coverage of a typical production software stack that includes ZEO, Zope2, Apache and of course Plone. Also covered is CacheFu, which has been superseded by 
plone.app.caching
 in Plone 4.
Chapter 10
Chapter 10 covers maintenance. Of particular interest is Erik's coverage of 
collective.recipe.backup
 to automate the creation of repozo scripts. I would add to that, you can use 
z3c.recipe.usercrontab
to automate the creation and removal of cron jobs to execute those scripts.
Conclusion
All in all, I enjoyed reading this book. And, I appreciate whenever a member of the community shares his/her experiences. So thank you, Erik!
That's it! I hope you will consider purchasing a copy of 
Plone 3 for Education
 right now.
And if you enjoyed reading this review, please consider `helping me help Plone in February 2011.`_
Alex Clark (January 2011)</summary>
  </entry>
  <entry>
    <title>How much should you donate</title>
    <link href="https://blog.aclark.net/2011/01/21/help-alex-clark-help-plone/index.html"/>
    <id>urn:uuid:358ca45b-93a9-47e3-91a5-2c0eda834770</id>
    <updated>2011-01-21T00:00:00</updated>
    <summary>Help Alex Clark help Plone
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/01/21
    :category: Plone

It's been a few years since I last attended a Plone sprint.
And that is by no means for lack of desire. I fantasize about spending a year attending every Plone (and Python) related event on the planet, but I've got a ways to go before I can make that dream a reality.
In the meantime, I'm excited to announce that the stars have aligned in February 2011 and I am planning to attend the 
Cioppino sprint
 AKA West Coast "Snow" Sprint (plane tickets purchased!)
But, I really need everyone's help to make this trip a success. While I would love to be able to afford it, our financial stars have not aligned for February 2011 and I will be seeking donations in order to offset the cost of travel and lodging.
I'll be spending (at least) two full days working on Plone-related tasks, for whatever you can guestimate that may be worth (in a consulting context.) And in addition to helping out however I can with the
scheduled tasks
, I have a long list of admin tasks I would like to try and tackle:
http://admin-docs.plone.org/todo.html
Why you should donate
Time I donate to the Plone project is a labor of love, but there are "real world" implications. If you have enjoyed, or otherwise benefited from any of the following, I would appreciate your generous contribution right now; very, very much!
Plone.org website maintenance
: I spend a lot of time wrangling troops and performing feats of great maintenance on plone.org: 
http://svn.plone.org/svn/plone/plone.org/Products.PloneOrg/trunk/
Plone.org systems maintenance
: I consider myself a provider of great services for a great community. I've made a very significant effort to try and improve the services that volunteers are able to provide for such a great community. In documentation, and in deed I plan to  keep doing this for at least all of 2011: 
http://admin-docs.plone.org
.
Plone software technical support
: I spend a great deal of time trying to de-mystify Plone technology for the masses. Early adoption is part of this process. I like to see Plone moving forward and I like to see others embracing that move: 
http://blog.aclark.net/2011/01/19/new-website-for-2011/
And much, much more!
 I try to do as much for Plone as I can because it does a lot for me. I've 
organized a conference
 and 
written a book
 and I expect to be active in the community for at least the rest of 2011, and most likely4life.
How much should you donate
I am trying to raise $1,000 USD to cover the following:
Plane tickets
: approximately $400 USD.
Housing
: approximately $400 USD.
Food and miscellaneous travel expenses
: approximately $200 USD.
I would appreciate any amount you can afford to give, to help-me-help-Plone be as great as it can be!
Please use the Chip-in below, or if you prefer (for all you anti-flash-ites), you can donate directly via PayPal with my email address: 
aclark@aclark.net
.
Thank you all, very much, in advance.
Alex Clark (January 2011)</summary>
  </entry>
  <entry>
    <title>To the future</title>
    <link href="https://blog.aclark.net/2011/01/19/new-website-for-2011/index.html"/>
    <id>urn:uuid:9767d6f6-5067-49ff-9b08-855b02ab3f80</id>
    <updated>2011-01-19T00:00:00</updated>
    <summary>New Website For 2011!
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2011/01/19
    :category: Plone

Edit: In addition to "cool overlays", I added a couple Plone-core todo items (that I may like to PLIP/implement)
Purpose-driven
Since 
December 23, 2010
, a new website has been in development at ACLARK.NET, LLC. It took approximately one month to complete; and we are proud to present it to the world today! We are particularly proud that this website can serve a dual-purpose: to make us look good, and to serve as an example of how easy and fun it is to install and use Plone.
Look ma, no package!
One of the requirements I had in developing a new website was that I would ditch my old Products.aclark_net package in favor of… nothing.  (Sort of.)
What I mean is, the entire website was developed and deployed within a single, small buildout: 
https://github.com/aclark4life/aclark_net_website
.
The buildout is meant to be instructional (!) so if you have questions, please ask them in the comments.
[buildout]
# Extends import buildout config files from elsewhere
extends =
#    http://dist.aclark.net/build/plone/4.1.x/buildout.cfg
    http://dist.aclark.net/build/plone/4.1.x/zeo.cfg
    http://good-py.appspot.com/release/collective.xdv/1.0# Parts define what this buildout does
parts += trac xdv staging production blog[plone]
# Eggs are Python packages
eggs +=
# "New style" theming in Plone
    collective.xdv
# "New style" template overrides
    z3c.jbot# Plone is a modern web application that uses the Zope Toolkit
# internally to provide complex functionality in a manageable way.
#
# The Zope Toolkit features the Zope component architecure; and
# components are configured via the Zope Configuration Markup Language (ZCML).
#
# Rather than create a Python package to do simple customizations, we add
# our ZCML here and the plone.recipe.zope2instance will add it to our
# Zope 2 instance configuration file(s) for us whenever we run bin/buildout.
zcml-additional =
# Add static resource dir
    <configure
        xmlns:browser="http://namespaces.zope.org/browser"
    >
    <browser:resourceDirectory
        name="static"
        directory="${buildout:directory}/static"
    />
# Add custom templates dir
    <include
        package="z3c.jbot"
        file="meta.zcml"
    />
    <browser:jbot
        directory="${buildout:directory}/templates"
    />
    </configure>[blog]
# Compile the blog theme
recipe = plone.recipe.command
command =
    bin/xdvcompiler -r theme/rules/blog.xml -t theme/templates/blog.html -o theme/blog.xsl
update-command = ${:command}[trac]
# Compile the trac theme
recipe = plone.recipe.command
command =
    bin/xdvcompiler -r theme/rules/trac.xml -t theme/templates/trac.html -o theme/trac.xsl
update-command = ${:command}# This creates bin/xdvcompiler
[xdv]
recipe = zc.recipe.egg# Hostout makes Fabric integration easy
[staging]
recipe = collective.hostout
host = aclark.net
path = /srv/staging[production]
recipe = collective.hostout
host = aclark.net
path = /srv/aclark_net_website[versions]
plone.registry = 1.0b4
plone.app.registry = 1.0b5
Diazo
For the first time ever, I decided to try deploying Diazo (formerly XDV) within Plone itself. That meant installing 
collective.xdv
 in Plone and pointing it to a rules.xml file. This only works for Plone, though.  Wordpress and Trac are still themed outside Plone, by compiling their themes with xdvcompiler and pointing Apache to the resulting .xsl files.
Content
I am obsessive about content. I am also obsessive about simplicity. And in today's world of 
need-it-now
, I have become conditioned to "do" now and ask questions later (which is not always recommended, by the way). That meant that for this website, rather than migrate content (which in some cases was contained in custom fields added by Archetypes schema extender) I opted to setup a "clean" Plone and copy/paste/edit content.
On a small site like ours, this was a no-brainer for me. But it definitely exposes a weakness of Plone. Now that theming has improved, we really need a better "content story". To me, that is starting to mean focusing on satisfying a "simple" use case like exporting and importing content in Plone. There are folks 
working on this
 of course, it just needs to advance to the point where we can offer it in the Plone core IMHO.
Todo
Of course there is always more to do. The first thing that jumps out that is missing from this deployment is "cool (Javascript) overlays" or "pop-ups," depending on who you ask. I didn't have time to add them prior to launch, but I will most likely add them later 
because I can
.
A couple more Plone-core related features I would love to see implemented (technically, Diazo is not in the core yet):
I want to add GenericSetup (GS) profiles outside Python packages (i.e. in the buildout via ZCML). Currently GenericSetup expects to be passed a context which is (I think) the old-style Zope 2 product object in the ZODB. But I can't think of a reason why GS couldn't be made to work sans that requirement (I'm just speculating though, I haven't looked at the code yet).
I wish Diazo (collective.xdv) could be configured via GenericSetup.  I'd like to configure the path to the rules.xml file in something like profiles/default/diazo.xml such that when a Plone site is created and the Diazo import step is run, the path to the rules file is set automatically.
Conclusion
This is certainly one of the most fun times I've head developing a Plone website (which is nice when you are in the Plone website business). I attribute that directly to all of the awesome folks involved in the project. I can't list everyone here, but I will "shout out" to some of the folks who I think were instrumental in getting us here: Eric Steele & the entire Plone 4 framework team, for their work on Plone 4. Hanno Schlichting for making Plone fast again. Martin Aspeli and Laurence Rowe for Diazo. And David Glick, for being "always on" (and my own personal devil's advocate).
And really, everyone involved in the Plone project on a day to day basis. Plone development and consulting can be frustrating at times, but more often than not it is a magical experience, due in no small part due to the seemingly never-ending supply of cool and dedicated folks.
A look back
Also, I've been doing this long enough now that it's now very entertaining (to me at least) to look back at the various incarnations of the ACLARK.NET, LLC website over the years (these are guestimates):
Circa 2006: Plone 2.5 with a Cereblue skin I purchased for $50
Circa 2007: Plone 3.0 with a custom "old style" theme that I designed
(and I'm not a designer).
Circa 2008: Plone 3.3 with XDV (now Diazo) plus "open source" theme.
Circa 2011: Plone 4 with collective.xdv, z3c.jbot, and "open source"
buildout and theme, and nothing else.
To the future
Onwards Plone team! Here is to 2011.</summary>
  </entry>
  <entry>
    <title>Bug report please?</title>
    <link href="https://blog.aclark.net/2010/11/04/a-report-on-plonetheme/index.html"/>
    <id>urn:uuid:ee0133c6-8ec4-4297-90e2-57d1c8cb5ef4</id>
    <updated>2010-11-04T00:00:00</updated>
    <summary>A Report On Plonetheme.*
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2010/11/04
    :category: Buildout, Plone

Plone Theme Buildout
By now, most of us are familiar with XDV and how awesome it is for theming Plone (or any website). You should also be aware that XDV has been renamed to 
Diazo
, and collective.xdv is now called 
plone.app.theming
. But let us not forget the humble "old style" theme just yet! Sometimes they come in very handy, and may even be preferable in some cases depending on what you are trying to accomplish. I just gave 
plonetheme
.* a quick spin and thought I'd share the process and results with anyone that might find it useful.
Step 1
Get a list of all the 
plonetheme
 packages on PyPI:
$ pip search plonetheme
Step 2
Create a buildout:
$ virtualenv plone-theme-test
$ bin/easy_install zc.buildout
$ bin/buildout init
Step 3
Edit your buildout.cfg to include the following:
[buildout]
extends = http://dist.aclark.net/buildout/plone/4.0.x/buildout.cfg
parts =
 plone[plone]
eggs +=
 ${theme:eggs}zcml +=
 ${theme:eggs}[theme]
eggs =# Deps that the themes should have added
 collective.contentleadimage
 collective.flowplayer
 z3c.jbot#    Products.categorynavigator
#
# XXX Products.categorynavigator is a dep of plonetheme.mvob but it
# has a NameError
# ZopeXMLConfigurationError: File "/Users/aclark/Developer/packages…
# NameError: name 'ImportException' is not defined# themes
 plonetheme.notredame
 plonetheme.fui
 plonetheme.sunburst
 plonetheme.colorcontext
 plonetheme.twinapex
#    plonetheme.mvob
 plonetheme.peerstheme
 plonetheme.nautica05
 plonetheme.stylized
 plonetheme.labs
 plonetheme.sait2009
 plonetheme.cultureCab
 plonetheme.xtheme
 plonetheme.mimbo
 plonetheme.python
 plonetheme.terrafirma
 plonetheme.solemnity
 plonetheme.level2
 plonetheme.tidyblog
 plonetheme.andreas01
 plonetheme.blueblog
 plonetheme.delicious2
#    plonetheme.hamnavoe
 plonetheme.greencommunity
 plonetheme.subordinate
 plonetheme.bluegray
 plonetheme.p2
 plonetheme.aclark_twitter
 plonetheme.relic
 plonetheme.classic
#    plonetheme.simplicity
 plonetheme.netsightintranet
 plonetheme.keepitsimple
 plonetheme.andreas02
 plonetheme.essay
 plonetheme.ReOrg
#    plonetheme.Bangalore
 plonetheme.nonzero
 plonetheme.cleantheme
 plonetheme.minimalist
 plonetheme.inbusiness
#    plonetheme.corporatemale
 plonetheme.portaltwodotoh
 plonetheme.rcom
 plonetheme.equipoteih
 plonetheme.pyar
 plonetheme.basic# XXX plonetheme.GreenEarthTheme3_0 has zope.configuration.config…
# error
#    plonetheme.GreenEarthTheme3_0
#zope.configuration.config.ConfigurationExecutionError: <type …
#  in:
#  File "/Users/aclark/Developer/packages/plonetheme.GreenEarthTheme…
#     <cmf:registerDirectory
#         name="GreenEarthTheme3_0_templates"/> plonetheme.criticas
 plonetheme.gemstone
#    plonetheme.bronzecube
 plonetheme.lithium
 plonetheme.overlappedtabs
Step 4
Run buildout; start Plone; play around!
Conclusion
The whole effort (including writing the blog post) took only an hour or two, for whatever that is worth (not including the actual theme review, unfortunately!). I find the results interesting and I thought you might too.
Process
Dependencies
You'll notice in the 
[theme]
 section, comments about various packages that were not included with all of the various themes.
As far as I can tell, it is in the best interest of "old style" theme developers to specify these packages in their setup.py files with the install_requires parameter!
OK, it's actually in my best interest because then I have to do less work, but you get the idea.
Broken or missing packages
The 
plonetheme
.* packages that are just commented out (without an XXX note) did not make it past the bin/buildout step (for whatever reason, usually a broken package).
Themes
My favorite theme (right after plonetheme.aclark_twitter, that is) is… nevermind! I wanted to report on that but I still have to go through all the themes! (By installing each one at a time, testing, then uninstalling before moving to the next one.)
Packaging
Just my opinion, but if you are adding functionality to Plone, it's probably not (just) a theme. So I would separate that functionality from your 
plonetheme
.* code.
Problems
jbot modifies default Plone theme?
I've noticed this before in both Plone Classic and now Sunburst when jbot is installed. No idea what the actual cause is:
Disclaimer
Designed for Plone 4?
Before you say it (I know you are thinking it), I know not all of these themes are designed to work with Plone 4. I dont' have a good answer about how to approach that problem (I just know that when looking for themes, I don't really care. I just "want it to work".)
Bug report please?
I know, I know. I should open a ticket for the jbot thing.
And now off to play!
P.S. I will report on the install process in the comments.
So far, 
Andreas
 installed, worked, and looked nice while 
Bluegray Theme 1.0.0b2
 required a ZMI undo ;-)</summary>
  </entry>
  <entry>
    <title>I Reinstalled Recently</title>
    <link href="https://blog.aclark.net/2010/10/15/i-reinstalled-recently/index.html"/>
    <id>urn:uuid:84f74dc5-c77b-43f7-aa92-a3de81fc8235</id>
    <updated>2010-10-15T00:00:00</updated>
    <summary>I Reinstalled Recently
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2010/10/15
    :category: Misc

OS X Installation Notes
And for whatever it is worth here are the notes I took:
o System Preferences -> Organize alphabeticallyo Sync bluetooth mouseo Software update * 2
 - Reboot * 2o Install XCodeo Customize Dock
 - Add Terminal
 - Remove Mail, Photo Booth, Address Booko Restore apps (from Time Capsule)
 - Skype
 - Firefox
   - Set home page
   - View -> Toolbars -> Customize -> Use small Icons
   - Preferences -> Privacy -> History -> Use custom settings for
     history -> Uncheck all but 'remember my browsing history' and
     'Accept cookies from sites'
   - Preferences -> Security -> Passwords -> Uncheck remember
     passwords for sites
   - Set persona (I'd probably like these to rotate)
   - Preferences -> General -> Downloads -> Show the Downloads
     window when download a file -> Close it when all downloads are
     finished
   - Preferences -> General -> Downloads -> Save files to -> Desktop
 - Cisco VPN client
 - Real VNC
 - VLC
 - Textmate (sometimes handy even though i use vi)
 - Parallels
 - Ubuntu & Windows 7 VMs
 - Handbrake
 - MacTheRipper
 - Cord
 - MS Office 2004
 - iWorko svn co https://my-dot-fileso Switch shell to zsh (biggest win? Shared history between open
  terminals)o System Preferences -> Accounts -> Show fast user switching menu as
  Icono Install python buildout
  (http://svn.plone.org/svn/collective/buildout/python)
 - pip-2.6 install psycopg2 and PIL 1.1.7 (the "real" PIL) for work.o Get tab completion in Python working again
 - Seems to work OK with the right stuff in .pythonrc.py and the
   Python buildout
 - Does not seem to work with OS X' s Python 2.6.1o Configure Terminal
 - Settings -> Shell -> When the shell exits -> Close the windowo Install homebrew
 - brew install postgres
 - brew install wget
 - brew install gito System preferences -> Exposé and Spaces -> To activate spaces ->
  Middle mouse buttono Install firebugo System preferences -> Desktop & Screen Saver -> Use random screen
  savero Turn on the locate db (sudo launchctl load -w
  /System/Library/LaunchDaemons/com.apple.locate.plist)o Desktop -> Finder -> View -> Show view options -> Arrange by nameo Users -> aclark -> Finder -> View -> Show view options -> Arrange
  by name -> Set as defaulto Sign in to
 - Google
 - Twitter
 - Meetup (Why would I want to "Log in using Facebook"?)
 - Facebook  (Oh, the irony…)
 - Rackspace cloud
 - Github
 - Coactivate
 - Hulu
 - blog.aclark.net
 - netflix
After a couple weeks, I stopped taking notes (but there were inevitably
a few more steps).
</p>
Other items of interest: I gave up a while back on *literally*
reinstalling everything (from the internet). I just drag back
applications from my Time Capsule (also note, I purposefully do not
allow Time Machine to restore my home directory, because that feels
"dirty" to me).</summary>
  </entry>
  <entry>
    <title>Conclusion</title>
    <link href="https://blog.aclark.net/2010/07/12/the-apache-modules-for-xdv/index.html"/>
    <id>urn:uuid:6f75ca64-6718-4ffb-8102-956d46d99c84</id>
    <updated>2010-07-12T00:00:00</updated>
    <summary>The Apache Modules For XDV
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2010/07/12
    :category: Buildout

Apache Buildout
I was recently tasked with consolidating our various 
business services
 (website, software repository, mailing lists, ldap, etc.) on to a single virtual machine (ostensibly to save money, although it didn't quite work out that way). The Apache modules for XDV presented themselves as an attractive technique to use, in helping me achieve my goals.
Background
Previously, I had been blissfully running 
http://aclark.net
 with NGINX, Plone 4 trunk, and XDV on a small virtual machine and absolutely loving it.
Additionally, I had separate virtual machines for my Wordpress blog (blog.aclark.net) and Subversion software repository (svn.aclark.net).  The isolation of these services made them easy to manage and still relatively cheap to run them all.
And in fact, I have come to rely heavily on the ability to (1.) rapidly create a virtual machine, (2.) install a bunch of vendor packages that Just Work™, and (3.) build out whatever was left i.e. whatever could not be easily installed via OS vendor packages. This usually translates loosely into "I use Buildout for my Plone sites, and an OS vendor package installer for everything else".
That said, even though I already knew the hazards of trying to cram too many services on to a single "shared" host, and didn't really want to do that dance again, it seemed reasonable at the time to at least try and consolidate them on to a single virtual machine (it sounds crazy in hindsight).
First choice: NGINX
Like I said earlier, the forked version of NGINX available on the 
HTML-XSLT website
 is an absolute pleasure to use. But when I pondered consolidating services I knew it would not be easy, and maybe even impossible to run Wordpress behind NGINX.
Second choice: Apache
So I thought to myself, "I know, I'll just switch to the Apache modules for XDV" and that will solve my PHP/Plone "integration" problems for the time being. (Another way to solve them would be to use the 
XDV middleware
 along with 
Zope 2.13
's WSGI support; I will be trying that next.)
But not so fast.
Problems
Of course, things don't always go as planned.
First problem
The Apache modules for XDV do not work exactly "as advertised" on any of the "modern" OS platforms I tried (Debian, various Ubuntus, and Arch Linux). They compile fine against the operating system's Apache, but do not run properly. See 
this thread
 on the Deliverance mailing list (and I challenge anyone reading this to correct me! :-D)
"Fine," I thought, I'll just create a buildout to deploy everything. I 
wrote a book
 about deploying Plone websites with Buildout. This should be easy, right?
Wrong.
Second problem
It's hard to create such a buildout for a variety of reasons, but most noticeably in my mind is the "library soup" you may encounter on any modern system. For example, I started off by trying to include all the dependencies in the buildout. But I ended up leaving things out, like libxml2 and libxslt relying instead on the operating system vendor packages. Because even though I tried desperately to tell every other dependency about the included libxml2 and libxslt2, I still ended up with an annoying "missing symbols" error at the end (meaning I likely missed a compiler flag along the way).
These errors can be very frustrating, and even worse: 
sporadic
.  Sometimes you may inadvertently add or remove a system dependency during the build process. So you could be relying on a system package and not even know it until later when it is too late (i.e. when you are enjoying some unplanned and unexpected down time).
So there I went again. It took several days I didn't really have, and the results were not what I expected, but I'm still somewhat happy with them. Now, I want to share this buildout particularly with folks considering using the Apache modules for XDV (
http://code.google.com/p/html-xslt/
). Because while it would be much easier if the Apache modules Just Worked™ with OS vendor packages, in the event that they don't (which is what I experienced) folks may find this buildout helpful. (That, and Jon Stahl requested it on Facebook :-D).
Conclusion
Anyway, I'm quite happy with the buildout and I am sharing it in hopes that it will move the Apache/XDV story forward.
In addition to compiling Apache with mod_depends and mod_transform, it includes Subversion, Trac, mod_wsgi, PHP and Wordpress. As I mentioned earlier, it is not really my preference to cram all this stuff in to one buildout, but as long as it is reliable and consistent, I don't mind it too much. It also handles the theme compilation for a variety of services, which is accomplished via a command recipe that executes calls to 
bin/xdvcompiler
.
Incidentally, I have no particular allegiance to, or dislike of Apache: more like a love/hate relationship; it can be very useful in a variety of situations, while at the same time confounding. But regardless, I would like to see the Apache XDV modules be able to deliver the same rock solid performance as the NGINX fork.
Kudos to Laurence Rowe (et al.) for the Apache modules! I hope this blog entry will facilitate a push to get people using them with their 
operating system vendor's Apache packages
, which may inspire Laurence to continue developing them, and most importantly to fix bugs ;-).
Normally, I like to factor out the reusable bits first, but this buildout is presented in it's entirety as I am using it (minus some customer bits), for whatever that is worth. Here is a look at the "main" buildout.cfg file, most of which should be self-explanatory. Click around this site to see the results:
[buildout]
#extends = http://svn.aclark.net/svn/public/buildout/apache/trunk/buildout.cfg
extends = apache.cfg
parts =
 bootstrap
 xdv
 apache
 apreq2
 apache-config
 apache-config-aclark
 apache-config-admin
 apache-config-svn
 apache-config-trac
 apache-config-ssl
 apache-config-mailman
 php
 php-conf
 mod-depends
 mod-transform
 python
 distribute
 trac
 theme-aclark
 theme-public
 theme-support
 theme-blog
 mod-wsgi
 subversion
 subversion-python
 supervisor[apache]
configure-options +=
 --with-included-apr
 --with-ldap
 --enable-authnz-ldap
 --enable-ldap
 --enable-ssl
 --enable-dav
 --enable-dav-fs
 --enable-dav-lock[mod-depends]
recipe = hexagonit.recipe.cmmi
url = http://html-xslt.googlecode.com/files/mod-depends-html-xslt.tgz
configure-options = --with-apxs=${apache:location}/bin/apxs[mod-transform]
recipe = hexagonit.recipe.cmmi
url = http://html-xslt.googlecode.com/files/mod-transform-html-xslt.tgz
configure-options =
 --with-apxs=${apache:location}/bin/apxs
 --with-apr=${apache:location}/bin/apr-1-config
 --with-apr-util=${apache:location}/bin/apu-1-config
environment-section = environment[environment]
PATH = %(PATH)s:${apreq2:location}/bin
LIBS = -lxml2 -lxslt[apreq2]
recipe = hexagonit.recipe.cmmi
url = http://www.bizdirusa.com/mirrors/apache/httpd/libapreq/libapreq2-2.12.tar.gz
configure-options = --with-apache2-apxs=${apache:location}/bin/apxs[libxml2]
recipe = hexagonit.recipe.cmmi
url = ftp://xmlsoft.org/libxml2/libxml2-2.7.7.tar.gz
configure-options =
 --with-python=no[libxslt]
recipe = hexagonit.recipe.cmmi
url = ftp://xmlsoft.org/libxml2/libxslt-1.1.26.tar.gz
configure-options =
 --with-python=no[php]
recipe = hexagonit.recipe.cmmi
url = http://us2.php.net/get/php-5.3.2.tar.gz/from/this/mirror
configure-options = --prefix=${buildout:directory}/parts/apache/php
--with-apxs2=${buildout:directory}/parts/apache/bin/apxs
--with-config-file-path=${buildout:directory}/etc/php.ini
--enable-mbstring --with-mysql=/usr/bin[php-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/php.ini.in
output = ${buildout:directory}/etc/php.ini[apache-config-aclark]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/aclark.in
output = ${buildout:directory}/etc/aclark[apache-config-admin]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/admin.in
output = ${buildout:directory}/etc/admin[apache-config-svn]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/svn.in
output = ${buildout:directory}/etc/svn[apache-config-trac]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/trac.in
output = ${buildout:directory}/etc/trac[apache-config-ssl]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/ssl.in
output = ${buildout:directory}/etc/ssl[apache-config-mailman]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/mailman.in
output = ${buildout:directory}/etc/mailman[ports]
production = 80[subversion]
recipe = hexagonit.recipe.cmmi
url = http://subversion.tigris.org/downloads/subversion-1.6.12.tar.gz
configure-options = --with-apxs=${apache:location}/bin/apxs
make-targets =
 install
 swig-py
 install-swig-py[mod-wsgi]
recipe = hexagonit.recipe.cmmi
url = http://modwsgi.googlecode.com/files/mod_wsgi-3.2.tar.gz
configure-options =
 --with-apxs=${apache:location}/bin/apxs
 --with-python=${buildout:directory}/parts/python/bin/python[subversion-python]
recipe = plone.recipe.command
libdir = ${python:location}/lib/python2.6/site-packages
command =
 rm -rf ${subversion-python:libdir}/svn
 rm -rf ${subversion-python:libdir}/libsvn
 cp -prv ${subversion:location}/lib/svn-python/libsvn ${subversion-python:libdir}
 cp -prv ${subversion:location}/lib/svn-python/svn ${subversion-python:libdir}
update-command = ${subversion-python:command}[python]
recipe = hexagonit.recipe.cmmi
url = http://www.python.org/ftp/python/2.6.5/Python-2.6.5.tgz
configure-options = --enable-shared[python-exe]
executable = ${buildout:directory}/parts/python/bin/python[distribute]
recipe = plone.recipe.command
command =
 wget http://python-distribute.org/distribute_setup.py
 ${python-exe:executable} distribute_setup.py[xdv]
recipe = zc.recipe.egg[trac]
recipe = plone.recipe.command
command =
 ${buildout:directory}/parts/python/bin/easy_install Trac
 ${buildout:directory}/parts/python/bin/easy_install TracSubversionLocation[theme-public]
recipe = plone.recipe.command
command =
 ${buildout:bin-directory}/xdvcompiler
 /srv/trac/public/theme/rules.xml
 /srv/trac/public/theme/index.html
 --output=${buildout:directory}/etc/trac-public.xsl
update-command = ${:command}[theme-support]
recipe = plone.recipe.command
command =
 ${buildout:bin-directory}/xdvcompiler
 /srv/trac/support/theme/rules.xml
 /srv/trac/support/theme/index.html
 --output=${buildout:directory}/etc/trac-support.xsl
update-command = ${:command}[theme-aclark]
recipe = plone.recipe.command
command =
 ${buildout:bin-directory}/xdvcompiler
 /srv/aclark/theme/rules.xml
 /srv/aclark/theme/index.html
 --output=${buildout:directory}/etc/theme-aclark.xsl
update-command = ${:command}[theme-blog]
recipe = plone.recipe.command
command =
 ${buildout:bin-directory}/xdvcompiler
 /srv/blog/theme/rules.xml
 /srv/blog/theme/index.html
 --output=${buildout:directory}/etc/theme-blog.xsl
update-command = ${:command}
You can check out the rest of the buildout 
here
 (themed with XDV). And if you enjoy this post, please feel free to pick up a copy of 
Plone 3.3 Site Administration
 from PACKT Publishing, due out any day now (I am expecting to review pre-finals this week some time).</summary>
  </entry>
  <entry>
    <title>P.S. Looking for Plone experts? Hire ACLARK.NET, LLC.</title>
    <link href="https://blog.aclark.net/2010/03/30/blood-sweat-tears-and-a-new-plone-book/index.html"/>
    <id>urn:uuid:8e4400ca-deec-45f4-8f8b-a4786eb51867</id>
    <updated>2010-03-30T00:00:00</updated>
    <summary>Blood, Sweat, Tears and a New Plone Book
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2010/03/30
    :category: Buildout, Plone

Plone 3.3 Site Administration
Well, no blood yet. But certainly sweat and tears. If 
Plone Conference 2006
 was my inspiration for 
Plone Conference 2008
, then 
Professional Plone Development
 was my inspiration for this book: 
Plone 3.3 Site Administration
.
For the past 14 months or so, I have been writing a book aimed at end users of Plone; folks that have little knowledge of how to do much more than add content. It is intended to make them feel more comfortable performing various site administrator tasks. Topics like theming, maintenance, and optimization are covered.
But wait, there's more!
#1
This book aims to "lower the Plone bar for users of Python". What do I mean by that? Basically this: I love Python almost as much as I love Plone. It lets me translate my thoughts directly into code. I fantasize that with little more than a Python interpreter, one can forge a working Plone site within minutes. But it is not just a fantasy, it is (more or less) the status quo. (Maybe even 
MacGyver
 used Python?)
So, this book begins at the beginning: by making sure folks are comfortable installing and using Python on there operating system of choice (or using the pre-installed Python). If you read 
Professional Plone Development
, you may recall Martin Aspeli saying at the beginning of Chapter 3:
We will assume that Python 2.4 gets invoked when you run python on the command line.
This book does not make that assumption and tries to cover everything you may need to know after installing your operating system up to that point.
In 
Chapter 1
, we cover installing and running Python on three popular operating systems: Mac OS X 10.6 (my main squeeze), Windows 7, and Ubuntu 9.10 (Debian is my main production server squeeze). Other operating systems are welcome; your mileage may vary.
#2
This book is largely a response to the whole "Oh no! I have to use Buildout to install Plone and its add-ons!" sentiment that has been prevalent since Buildout was first introduced to Plone several years ago. I don't know if Buildout was the "right" way to go, but I do know that I love using it and I would like to help others feel the same way.
The bottom line is this: Plone made a conscious decision to "become more Pythonic" by using eggs. With that choice came more complexity from potential conflicts between eggs. Buildout is one solution to that problem. Unfortunately, it introduces other problems like cryptic error messages and a certain 
too-many-moving-parts
-ness.
An aside…
Let me correct myself: I am fairly certain Buildout was the right way to go at the time. What I am not sure about is where to go from here. It would be nice to get back to a place where folks could just drop packages in to a directory (I don't literally mean going back to old-style products, but perhaps we could provide that type of functionality again somehow). But I don't have an answer for that. In the meantime, let's make everyone more comfortable with using Buildout.
About the rest of the book…
The book teaches you to find your way around Buildout and Plone. Whether you choose to follow along and build your site from scratch using only Buildout (and a paper clip) or if you use one of the Buildout-based installers (like the Unified Installer), this book aims to make you more competent and comfortable performing a variety of Buildout-related tasks.
In 
Chapters 2-7
, we present various buildout configuration files that correspond to specific tasks that are related to various subjects, e.g. theming, maintenance, and optimization. The reader is expected to "know how to write a buildout.cfg file" by the end. No one that reads the book is allowed in the #plone IRC channel afterward to ask about buildout (you can answer buildout questions though). Kidding… I kid…
In the final 
Chapter 8
, we cover new technologies like XDV and repoze.zope2 which may become more mainstream once you decide to start using them (although the latter seems more like a toy to keep us busy until the real fix arrives: 
full WSGI support in Zope 2
).
When will it arrive?
PACKT originally announced the book will arrive in March and I have been working non-stop since mid-March to make sure it gets out the door as quickly as possible; I expect it to be available 
Real Soon Now™
. I apologize to those of you who have pre-ordered and are now waiting for it!
So get ready! I plan to have over 200 pages of draft material submitted by the end of this month. I will continue to work with PACKT to address any concerns that arise during editing. They have promised to try to ship the book by May, so we will see how it goes. I encourage you to 
pre-order now
 as that will go a long way to inspire them to work just that much harder to get it done and out to you, ASAP!
Can I write a book?
Probably. For those curious about the process (as I very much was), here is a bit about how it went for me:
A few years ago, Martin Aspeli had the idea for Practical Plone 3 and put out a call to writers that I responded to; I ended up contributing 2 chapters. This taught me that it was indeed a lot of work, and I got exposed to the editing process.
A couple years ago, PACKT approached me (and several others) about the idea for Plone Site Administration and I thought I had a good story to tell based on my experiences, so I wrote a detailed outline and they accepted it.
Though I had written for Practical Plone 3, I struggled to find my voice. At the same time I had a tremendous amount of consulting work to do to make a living. I sneaked in time to write drafts and eventually found my voice. To be honest, the most productive work has been done in the last 3 months.
Perhaps the biggest lesson I learned was this: stop thinking and start writing. I tend to over analyze things and spent a lot of time thinking about "how it would go" rather than just writing it. Writing is the key.  Think less, write more (at which point your thoughts tends to flow more naturally anyway).
Should I write a book?
Possibly. I am sensitive to the phenomenon of "Plone book diarrhea" and I do think that there can be such a thing as too many Plone books. But I don't think we are there yet. To me, the more books published about Plone (by PACKT or any publisher) the better. I like to see what each individual author brings to the story, even if the stories they are telling tend to overlap sometimes. So for me the answer to that question both before and after writing my book is 
yes
. I know I am a better writer having written it, and I certainly know more about Python, Zope, and Plone and many other technologies.
In either case, you should definitely take my class.
If you are interested in learning more about Python and tools like Distribute, Pip, Buildout, etc. and you want to feel more comfortable managing your Plone site, you will not want to miss the 
one day class I am teaching at Plone Symposium East 2010
!
The book will hopefully be out by then, but the class will go on either way.
Hope to see you there, and I hope you enjoy the book.
P.S. Looking for Plone experts? Hire ACLARK.NET, LLC.
Thank you, everyone, for the responses to 
my previous blog entry
. I have had some great conversations with some very interesting folks and I appreciate everyone's interest. However, I wanted to encourage everyone once more to 
get in touch.
 And also, to feel free to reach whenever you come across this blog entry and are in need of Plone help. We are always looking for a challenge.</summary>
  </entry>
  <entry>
    <title>I Need Something To Do</title>
    <link href="https://blog.aclark.net/2010/03/22/i-need-something-to-do/index.html"/>
    <id>urn:uuid:1ee107c6-b201-4e89-bbd5-60d452580f91</id>
    <updated>2010-03-22T00:00:00</updated>
    <summary>I Need Something To Do
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2010/03/22
    :category: Misc

The Pitch
I would like to think I have done 
my
 
share
 for Plone over the past few years. In return, I know that Plone has done its share for me. I have learned a lot, made a good living, and met a lot of amazing folks who have really inspired me to be the best I can be.
But it is time for a change.
If my life were the movie 
Forrest Gump
, this would be the part where Forrest stops running, stands in the highway for a minute… then turns around and goes home to Greenbow Alabama (which as it turns out is a fictional town, who knew?)
*(Apparently this person had the same epiphany!)*
Not a drastic change mind you, just a re-focus.
To that end, I would like to reach out to the community I know and love (Plone!) and see if anyone has anything for me to do. Please 
contact me
 if you are interested, and please tell all your friends too! You never know who knows who and who is looking for what.
Let me tell you a little bit about what I have done professionally and what I would like to do now, followed by some requirements I hope can be met.
What I have done:
I received a 
Computer Science degree
 in May 1998 after about 10 years of undergrad education (transferred, changed majors, etc.) -  I've done a lot of 
system administration and network engineering
, mostly for ISPs including AOLnet (back in the day).
I have done a lot of 
Plone
.
I started doing Plone at my last full-time system administrator job, and became so obsessed with it that I had to 
quit to pursue
it
full time
, mostly thanks to the support of my wife Amy, and Paul Boos and Nate Aune who handed me my first contracts!
I have 
organized monthly meetings
for ZPUGDC for the last 4 years or so, taking over for Joel Burton when he moved to California. We are now in the process of becoming a 501c3 so we can expand our focus and serve the community in bigger and better ways. ZPUGDC is not a full time job, but it as a passion (to be a resource for all things Python in DC).
I have owned and operated
ACLARK.NET, LLC
for the past six years. All in all this has been an amazing experience and I have no plans to stop. We are now at the point where we can compete with all the "big firms" and we intend to do so. But I need time to answer some RFQs…
I 
organized
 
Plone Conference 2008
 and 
wrote a book
.
I 
upgraded plone.org to Plone 3
, and now lead the plone.org 
infrastructure team member
, taking over for Wichert Akkerman (more or less) when he left. This is something I particularly enjoy. No wait, I hate it. Just kidding. It is something I like, and plan to focus on it more in the future to make sure it gets done right. It is very frustrating to want to do something but not have  time to do it. I'm sure all you Plone consultants know what I mean.
I have done some 
Python
 programming and evangelism:
I have paid particular attention to making ZPUGDC 
more Python-centric
, by welcoming all Python programmers in the area not just Plonistas. This has worked out very well and our monthly attendance has gone from 5-6 to 15-20. Each month, we go around the room and talk about "what we are doing with Python". It is 
always
 interesting.
I write code
. I am particularly proud that working for myself has afforded me my first paid programming job (programming for system administration doesn't really count IMO). There is a ton to learn: Networking frameworks like Twisted, Web application frameworks like Zope, Django, Turbo Gears, Pylons, BFG, etc.  Continuous integration with Hudson (OK, that is Java but you can use it on your Python code ;-)), Documentation with Sphinx. And so on.
What I would like to do:
Open Source Software
: I really like open source software. It started in the mid 1990s when I realized that there was this thing called the Internet and that people had been writing code for years and making it available for general use to anyone interested. That just floored me. I can still remember the thrill of borrowing a UNIX text book from my professor the summer before I started CS classes.  At the time, it seemed like UNIX and open source walked hand in hand and I became obsessed with both. I realize now there is much more to that story, but that is how the seeds were planted. Anyway, open source is for me and I am for open source. I am not sure what that means in terms of job opportunities, but maybe I could be an evangelist like Mark Hinkle, and evangelize Your Software like he evangelizes Zenoss. Just a thought.
Plone, Python, Zope, Zenoss
: I really like these open source projects, in particular. Any paid position that involves almost any aspect of these projects would make me happy. I have pimped myself out to Zenoss and I eventually expect to hang out my Zenoss shingle and start doing add-ons, customizations, etc. for Zenoss users. But I am not quite there yet. I know Plone, and can handle most development and deployment tasks. I am particularly interested in large-scale deployments (e.g. City of Austin type clients, only with a better outcome ;-)).
Busy work
. It sounds silly, but repetitive tasks fit my brain.  Automating large scale deployments. Configuration management. System updates. These things I can do, and help you with too.
Learn
: If there is one thing I've learned after learning so much over the years, it is that I hardly know anything. I hope to be a part of team that offers a significant growth opportunity. It's time to raise the bar.
What I require to work for you:
Six month contract or longer
. Whatever I sign on to do, it has to last six months or more (preferably until the end of 2010). This is the time frame I am particularly concerned about (for a variety of personal reasons). I can start April 1 or after. Repeat: it is definitely OK if it lasts longer than six months.
Travel
. I can travel almost anywhere in the world, as long as you pay for it ;-). But seriously, working from home is a requirement, but meetings (monthly? bi-monthly?) in your city should not be a problem.
Fun and flexibility
. I do Plone for a living because Plone is fun. I work very hard to make sure your needs are met, and I ask for a lot of flexibility in return. Deadlines are not a problem, but the ability to act independently to meet the deadline is.
Paid Plone work
. Ideally someone will hire me to do all the things I already love to do like maintaining plone.org, sprinting on various tasks, perhaps joining the Plone 4.1 Framework Team. Anything and everything I can do to make the Plone project better and stronger. This of course does not have to be the main focus of the work, but it would be nice if some time could be allocated officially towards these tasks.
Part time
. Ideally I'd like to put in about 20 hours per week on some project, and spend the other 20 hours on ACLARK.NET, ZPUGDC, INC.
Above all, I am flexible. This post is about me, but I am certainly willing to listen to what you, prospective employer, has to offer. If there is a good fit, I am confident we can make it work.
I look forward to hearing from you!
Oh, I almost forgot, my updated resume is here: 
http://aclark.net/team/aclark/resume
. Or if you prefer PDF: 
http://aclark.net/team/aclark/resume-pdf
.</summary>
  </entry>
  <entry>
    <title>The actual point</title>
    <link href="https://blog.aclark.net/2010/03/15/using-buildout-to-deploy-a-plone-2-1-site-to-the-cloud/index.html"/>
    <id>urn:uuid:7583c51b-314e-409d-a449-7143d72aa6e6</id>
    <updated>2010-03-15T00:00:00</updated>
    <summary>Using Buildout To Deploy a Plone 2.1 Site To The Cloud
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2010/03/15
    :category: Buildout, Plone

Plone 2.1 Buildout
Believe it or not, there are still Plone 2.1 sites in production. (And 1.0 sites too, for that matter. Just look for the tell-tale '/help' sign, e.g. 
http://www.zope.org/help
, if you suspect Plone 1).
I know, because I just 
deployed one
 (a cool artist's site if you have a couple hours to kill…). But I didn't do it the "old way" with Zope 2 instances created by hand on clunky physical servers, I used 
Buildout
 and the 
Cloud
.
Aside #1
As an aside: it was really bothering me lately that you couldn't (easily) find older Plone releases at 
SourceForge
. This is by design to avoid confusion, but still confusing. So when I needed the most recent 2.1.x tarball I decided to scratch my itch and fix the "problem".  I started gathering the 
hard to find
 releases and putting them 
here
. OK… so I only gathered one release (2.1.4), but I swear I had good intentions. If you'd like to see any additional releases "moved" to dist.plone.org, please let me know in the comments.
Aside #2
Another aside: I should mention here the advent of a tool that promises to simplify deployment of Python-based web applications to the cloud (or supported service, which technically does not have to be "cloud-based") via the use of APIs (in particular, the 
Rackspace Cloud
 API, which is the only one supported so far): 
Silver Lining
! The idea of using this tool got me so excited, I spent some time experimenting with setting up a new host with it (and purchasing their service). But when I realized it was not quite ready for production (i.e. "
if you want to use Silver Lining, Silver Lining is not for you
"), I ended up using the Rackspace Cloud 
web interface
.
I was so impressed with it.
I literally moved all of my (granted, relatively small number of client sites) to their service within a matter of 1-2 months. Now, I know what you are thinking, and I do intend to explore other services (in fact, I have tried 
Slicehost
 and it was OK), but this service made my life so much easier I wanted to mention some of its key features:
"On the fly" requisitioning. You can add/remove hosts anytime and you only pay for the time they are up.
"On the fly" resizing of hosts. In my testing and real world experience, the resizing (e.g. move from a host with 256MB RAM and 10GB disk to 500MB RAM and 20GB disk) was painless (literally only cost a few minutes of downtime).
The potential for all of this to be done remotely via a command line tool like Silver Lining.
Aside #3
A third and final aside: the status quo of WSGI support for Plone. Since 
Zope 2 is not supported
 by Silver Lining, the key to deploying Plone sites with it is currently to use 
repoze.zope2
. 
Nate Aune
 has recently made some progress with this, and more work is scheduled for
Plone Symposium East
. My latest swipe at WSGI-Plone is here: 
http://svn.aclark.net/svn/public/buildout/plone/branches/3.x-wsgi/
The actual point
And finally, to the point of this blog entry! I have created a generic Plone 2.1 buildout for anyone interested. You can find it here:
http://svn.aclark.net/svn/public/buildout/plone/branches/2.1.x/
.  Using it is simple, as described in the 
README.txt
:
$ svn export http://svn.aclark.net/svn/public/buildout/plone/branches/2.1.x/ plone
$ cd plone
$ python2.4 bootstrap.py
$ bin/buildout
$ bin/instance fg
Since Plone 2.1 community support has expired for this release, and since Plone 2.1 shipped with Python 2.3 (if I recall correctly), this is definitely "unsupported use of Plone". But when you need it, you need it. I have yet to experience any issues related to the Python version, for whatever that is worth (possibly due to the fact that Plone 2.1 originally shipped with Python 2.3 and Zope 2.7, then Zope 2.8 came along which worked with Python 2.4. Just a guess).</summary>
  </entry>
  <entry>
    <title>No, Really, You Can Just Use Buildout To Install Plone</title>
    <link href="https://blog.aclark.net/2010/01/07/no-really-you-can-just-use-buildout-to-install-plone/index.html"/>
    <id>urn:uuid:83154dd3-9c24-494f-bf03-1d7442bfc1f7</id>
    <updated>2010-01-07T00:00:00</updated>
    <summary>No, Really, You Can Just Use Buildout To Install Plone
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2010/01/07
    :category: Buildout, Plone, Python

This is a follow up to my 'Getting Excited about Plone as Eggs' post.
This is a follow up to my 
Getting Excited about Plone as Eggs
 post.
Generally speaking, the recommended and supported way to install Plone is via the installers, e.g. the 
Unified Installer
. Obviously, if you want things to Just Work™ you should be using the latest stable release, which is why I linked to the 3.3.3 unified installer (although there is no Windows installer for 3.3.3 yet, which is why it's not released on plone.org).
That said, since both Plone and Zope 2 have been packaged as eggs  (Plone became an egg in version 3.2 and Zope 2 became an egg as of Zope 2.12 which is the version of Zope 2 that Plone 4 will use) it has become "mostly trivial" to write a buildout.cfg to install Plone with. That means that you don't even need paster to do it. You can just fire up an editor and type:
[buildout]
parts = instance

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
eggs =
    Plone
Amazing!
Of course there is the nasty bit about PIL, which I get around now-a-days by adding a very specific find-link, e.g.:
[buildout]
parts = instance
find-links = http://dist.plone.org/thirdparty/PILwoTk-1.1.6.4.tar.gz

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
eggs =
    PILwoTk
    Plone
What you should have at this point is a working Plone, but not necessarily a repeatable buildout. The reason being we have not pinned any egg versions yet, so we are effectively asking for whatever the latest version of Plone is on PyPI. Fun for playing, not fun for production. Fortunately the nice Plone people have created a bunch of version pins for us, so we just need to use them:
[buildout]
extends = http://dist.plone.org/release/4.0a3/versions.cfg
versions = versions
parts = instance
find-links = http://dist.plone.org/thirdparty/PILwoTk-1.1.6.4.tar.gz

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
eggs =
    PILwoTk
    Plone
If you are completely new to buildout and you are thinking to yourself right now "what in the world is this guy talking about?" then you will likely want to install buildout first so you can join in the fun. Fortunately, the nice Python people have made that easy with a package called 
Distribute
.
Following their instructions, you can do this:
$ curl -O http://python-distribute.org/distribute_setup.py
$ python distribute_setup.py
Then:
$ easy_install zc.buildout
$ mkdir plone
$ cd plone
$ buildout init
After which you will have a buildout.cfg file, and you can follow along with the above steps. Happy?
The best part about all of this is that (on a fast internet connection) it should only be a matter of minutes before you are able to do this:
$ bin/instance fg
and be staring at a thing of beauty.
Of course, if you are running in the foreground (recommended for debugging) you should see something like this:
aclark@Alex-Clarks-MacBook-Pro:~/Developer/public-plone/ > bin/instance fg
/Users/aclark/Developer/public-plone/parts/instance/bin/runzope -X debug-mode=on
2010-01-07 12:07:56 INFO ZServer HTTP server started at Thu Jan  7 12:07:56 2010
 Hostname: 0.0.0.0
 Port: 8080
2010-01-07 12:08:14 INFO Zope Ready to handle requests
If you'd like to get a little less noisy and skip debug mode but still run in the foreground, you can use April 2008's famous addition to plone.recipe.zope2instance:
aclark@Alex-Clarks-MacBook-Pro:~/Developer/public-plone/ > bin/instance console
Sweet, blissful, silent running Plone.
Happy Plone 4'ing all!</summary>
  </entry>
  <entry>
    <title>Yup, This Blog Is Now Powered By WordPress</title>
    <link href="https://blog.aclark.net/2010/01/06/yup-this-blog-is-now-powered-by-wordpress/index.html"/>
    <id>urn:uuid:f5d519de-8f0f-4c1a-8a3b-68d62663849a</id>
    <updated>2010-01-06T00:00:00</updated>
    <summary>Yup, This Blog Is Now Powered By WordPress
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2010/01/06
    :category: Misc

How I learned to stop worrying and use the right tool for the job.
My first blog entry was 
well over two years ago
. I've learned enough Plone since then to know that I hardly know anything. Toward the end of 2009, I began to realize that I was doing way too much, and not getting anything done as a result. So I began offloading services wherever I could to free or low cost service providers; I can't tell you how much happier I have been since then.
Interestingly, after waffling over the use of these services for years, when push came to shove I had no problem choosing the right tool for the job. It didn't matter so much what selection I made. The fact that I offloaded the responsibility was the most important thing. Which brings me back to the subject at hand. I love 
Plone
. I think it is great software. I want to make it better. In order to do that I need to broaden my horizons and use the right tool for the job, and hopefully bring those experiences back to Plone! Hence, introducing my new Wordpress-powered blog 
about
 Plone. I'm still using Plone for 
aclark.net
. I just don't want to "manage" the blog software anymore. I want it done for me so I can focus on other things. Since WordPress is so obviously the leading "best" weblog software, it was an easy decision to make. (Of course, this blog was shipped using 
Python software
.) Lastly, I'll say this. I want to be more prolific in 2010, and I'm hoping that using the right tool for the job will help me achieve that. It has worked wonders so far.</summary>
  </entry>
  <entry>
    <title>Next Sprint:</title>
    <link href="https://blog.aclark.net/2010/01/01/toronto-plone-add-ons-sprint-1-report/index.html"/>
    <id>urn:uuid:6601caa8-6912-4a1a-93df-f20d36647904</id>
    <updated>2010-01-01T00:00:00</updated>
    <summary>Toronto Plone Add-ons Sprint #1 Report
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2010/01/01
    :category: Buildout, Plone

Via Toronto Plone Users Group
Last month, members of the 
Toronto Plone user's group
 helped with Plone.org maintenance. Here is the sprint "report out" from Jordan Baker:
Toronto Plone Addons Sprint Report #1:
Attending: Robert Jackiewicz, Jordan Baker, John Southern, aclark
aclark helped out by answering some questions and provided a dump of PSC data from 
plone.org
Rob was working on getting his buildout working with nginx and documenting the process
John worked on gettting a task listing setup on coactivate: 
http://www.coactivate.org/projects/ploneorg-upgrade/tasks/tasklist/show/993
Jordan commited changes to allow for filtering by version, autosubmit on selection change and searching using the PSC view instead of the Plone search view.  aclark is working on cutting a release...  hopefully we can get a preview soon..
Outstanding questions:
need some help with c.xdv or nginx so we can preview changes in the theme
Where should we put our issues in the future.  There was talk of eating dog food using a Poi instance on 
plone.org
 -- can someone help me set that up (add hexsprite and gogojohn as admins)
Please help us by prioritizing the tasks in the task list on coactivate
Next Sprint:
Shooting for January 22.  Hopefully that will work for most people.  Please help us spread the word to interested parties... more details to come.</summary>
  </entry>
  <entry>
    <title>What are the three top things you want to learn in 2010?</title>
    <link href="https://blog.aclark.net/2009/12/31/new-years-python-meme/index.html"/>
    <id>urn:uuid:13ba0823-a33c-4196-99b2-fcfc31051253</id>
    <updated>2009-12-31T00:00:00</updated>
    <summary>New Year’s Python Meme
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2009/12/31
    :category: Python

Tarek's new thing
What’s the coolest Python application, framework or library you have discovered in 2009?
That would be 
Zenoss
. I'm very impressed with the application as well as the community, which is awesome. They remind me a lot of the Plone community; I think the two can learn a lot from each other.
What new programming technique did you learn in 2009?
Generally speaking, I'm happy with my progress as a Plone integrator, plowing through the tremendous Plone code stack, on my way to complete mastery. I may never get there, but I'm having fun trying. In other words, I know a lot more about how far the Zope2/CMF/Five rabbit hole goes. If I had to pick, I'd choose Grok in Plone, mostly as it relates to Dexterity: 
http://plone.org/products/dexterity/documentation/manual/five.grok
. I created 
http://plone.org/products/collective-project
 as a result, or rather, I converted the package to use Dexterity types so I could learn Dexterity, in part ;-). At first I was angry at being "forced" to use Grok techniques in Plone, but then it grew on me.
What’s the name of the open source project you contributed the most in 2009? What did you do?
Plone
.
I dug out from 
Plone Conference 2008
, which included publishing the 
videos and slides
.
I helped move plone.org to 
Six Feet Up
, and have been looking after 
it
 as well as 
other infrastructure issues
.
I worked on a book called 'Plone Site Admin', which will most likely come out in early 2010 (via 
Packt
). I hope the community will find it useful.
I contributed a 
new feature
 to Plone 4.
What was the Python blog or website you read the most in 2009?
Planet Plone
.
What are the three top things you want to learn in 2010?
Zenoss
WSGI
Plone 4 core development
Happy (Python) New Year everyone!</summary>
  </entry>
  <entry>
    <title>Chapter 15</title>
    <link href="https://blog.aclark.net/2009/09/22/review-of-veda-williams-plone-3-theming/index.html"/>
    <id>urn:uuid:22e64577-9b02-416f-8e79-ec8c56dfca05</id>
    <updated>2009-09-22T00:00:00</updated>
    <summary>Review of Veda Williams' Plone 3 Theming
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2009/09/22
    :category: Buildout, Plone

Review all the chapters
First things first, I can't overstate enough how much I personally appreciate Veda's efforts to bring the (currently-and-unfortunately, but-not-for-long) complex world of Plone theming to the masses. It's an acquired taste, but once you get the hang of it you can use your powerful skills to create some very impressive sites – and make the world a better place like Veda and the crew at 
Groundwire
 are doing (formerly ONE/Northwest).
Furthermore, If you are interested in Plone and how Plone theming works, this book is almost certainly for you. It gives you an over abundance of present day theming knowledge, and also covers aspects of the Zope 3 component architecture, where Plone has been, and where it is going to be in the not-so-distant-future.
Since 
PACKT
 are well known for giving back to the communities that produce the software that is the subject of their books, purchasing a copy of this book will directly benefit Plone, so I encourage you to do so.
With all that out of the way, I'd like to focus on a chapter by chapter review (
like
 
everyone
 
else
 
does
) of Plone 3 Theming. Like I said, I really liked this book so please don't take any of my (hopefully constructive) criticism negatively. I hope my comments will help the readers of this book, as well as Veda, if she dares to attempt a 2nd edition one day!
STANDARD DISCLAIMERS APPLY
: I'm a "paid" reviewer (in that I received a free copy of the book) and also, I know Veda personally.
Chapter 1
This chapter gives an overview of Plone, which as a total-Plone-fanboy, I very much appreciated. I particularly enjoyed the "community lore".  "what is Plone", and "books about Plone" sections. The author also includes a "Plone vs. Drupal" comparison and an "evolution" section that covers Plone theming-framework changes version by version, which I didn't care for as much [1].
Chapter 2
This chapter lists many tools for graphic design, web browsing, web development (with browser add-ons), and text editing. All useful information. I particularly enjoyed the recommendation for the browser add-on 
YSlow
 which I'd heard of, but don't use regularly.  Recommendations for the traditional UNIX® text editors vi and emacs were missing, but folks that use these editor already know which one they prefer (*wink* – vi), and those that don't aren't likely to start using them now.
Chapter 3
Here we get into the now-venerable 
zc.buildout
 and how it is used by Plone. I think many folks will appreciate the terminology section, featuring definitions of Zope, Python, and various Python package terminology. I would have liked to have seen the 
PyPI features of plone.org mentioned
, but I'll settle for a shameless plug of it here.  Similarly, no mention of git or mercurial in a section about version control (Subversion only), but I suppose (again) those familiar with these technologies already know which one they prefer.
Lastly, I liked the variety of approaches described in the "download Plone" section, from using platform installers to using the unified installer to satisfying all the Plone dependencies by hand. All good information.
Chapter 4
Using 
ZopeSkel
 to create a theme package, then adding that package to your buildout as a "develop egg" are the main topics covered here. (A side note: I'm very much looking forward to the upcoming release of ZopeSkel 2.14!  
http://www.coactivate.org/projects/zopeskel-bbq-sprint/blog/2009/10/13/zopeskel-bbq-sprint-days-two-three-and-four/
 )
Chapter 5
I like this chapter because it covers a variety of the TTW (through the web) changes that we are consistently reminded we are not supposed to make, but we all know that everyone makes them. The truth is, there is absolutely nothing wrong with TTW changes if you take them for what they are worth. It's fine to turn a knob or two TTW, just be aware that at some point you may be turning that knob again TTW, if you don't turn a similar knob on the file system ;-)
Chapter 6-7
Here we get into various Zope 3 concepts: ZCML, browser layers, resources, viewlets and more! If there is such a thing, this would be the "unfortunate" part of the modern Plone theming story. Plone themers, for better or worse, must be familiar these concepts in order to be successful. One pet peave I have, that I will mention here because it seems appropriate, is the bundling of GenericSetup in a discussion about Zope 3 concepts. While GenericSetup may use Zope 3 technology under the hood (I assume it does, like most modern Zope 2 code) as a concept it has absolutely nothing to do with Zope 3 (in other words it is not part of the "component architecture") It just happened to be introduced to Plone around the same time various other Zope 3 technology was introduced (via Five), hence people tend to include it in the "things they hate about Zope 3 in Plone" category. Perhaps GenericSetup should have been added either before or after the Zope 3 stuff to make it more palatable, but that train has sailed and now we must deal with the consequences.
Chapter 8
This chapter about TAL (template attribute language) is great stuff. TAL is one of those beautiful technologies that pays for itself once you learn it (unlike various web form frameworks, for example ;-). If like me you can't get enough of TAL from Veda's book, check out the section on it in the Zope 2 book: 
http://docs.zope.org/zope2/zope2book/ZPT.html
Chapter 9-11
Here we get to watch Veda design, build, and deploy a theme. This is the focal point of the book, and is worth the price of admission alone. I almost wish the entire book was about this theme, with the other relevant bits sprinkled in as needed. But in any event, these three chapters are what most readers will be most interested in.
Chapter 12
This is a great little chapter about various add-ons that themers may find interesting. My favorite add-on mentioned in this chapter is Products.FSDump. Very, very useful tool for getting various bits out of your ZODB and on to your file system (e.g. the contents of the portal_skins/custom folder). I'm really hoping that a 1.0 release will see the light of day one of these days. I notice Veda didn't mention it, but there is now an egg-based version of this popular add-on: 
http://pypi.python.org/pypi/Products.FSDump/FSDump-0.9.4
 Just add Products.FSDump to your instance section's eggs= parameter and off you go.
Chapter 13
Here, a gratuitous chapter on multimedia wherein various useful multi-media add-ons are mentioned. I say gratuitous because I think there is a misperception that you need these add-ons to accomplish what you want. Plone should do a much better job convincing people that while it is a complex application, a Plone site is also just a website. So if you know how to do it elsewhere (e.g. on a "regular" website) it should be easy to do it in Plone (we are not quite there yet). Anyway, some great add-ons are mentioned here of course, but one noticeable absence: 
http://plone.org/products/collective-fancyzoomview
 (which is used by PloneSoftwareCenter on plone.org).
Chapter 14
An 'Amen!' for this chapter that covers deploying and contributing themes, especially on the contributing part. As I mentioned earlier, I would have liked to have seen the 
PyPI features of plone.org mentioned
 in this book, and in this chapter in particular. While it is arguably still hard to create Plone themes, it is encouragingly not hard to share them! Also, an incredibly useful tool for releasing themes (and any package) to both plone.org/products and pypi.python.org at the same time (i.e in a single command) is 
http://pypi.python.org/pypi/jarn.mkrelease/2.0.2.
Chapter 15
This chapter (by Alexander Limi) introduces people to "new style" theming with xdv. While I enjoy this subject tremendously, I think it's going to take a while before it is fully digested by integrators.  Hopefully, Alex's chapter will help. I'm also told that Laurence Rowe has been making some improvements to collective.xdv recently, and I see there is a new version here: 
http://pypi.python.org/pypi/collective.xdv
 (I think this version handles 404s).
Bottom line: this is great stuff but potentially confusing in that you have an add-on, collective.xdv, that applies an XSLT transform "on the fly" (in memory) to your Plone site, but the recommended deployment strategy is to use NGINX or Apache with Laurence's patches applied. I've spent some time doing this (I expect to re-launch this site with xdv soon, and of course plone.org uses it) and it is non-trivial to say the least. What we have now is a situation where folks are starting to use collective.xdv and thinking that *it* is the new way to theme, when in fact it is only part of the story.
One last pet peeve I will mention is that both "theming" and "skinning" were used to describe the subject of the book.  I would have preferred just "theming" (since that is what we are calling it now ;-).
In conclusion, great job Veda! Thank you very much for your efforts. I look forward to reviewing a second edition. To every one else, I invite you to purchase your copy of this book and get your Plone 3 theming ON: 
http://www.packtpub.com/plone-3-theming-create-flexible-powerful-professional-templates
[1] Quite frankly, I think Plone is in a category all its own (as the most successful Python-based CMS of all time), and while there are certainly comparisons to be made, and lessons to be learned from the competition, I think we should let the readers decide for themselves how Plone stacks up to the competition.</summary>
  </entry>
  <entry>
    <title>In Conclusion</title>
    <link href="https://blog.aclark.net/2009/06/18/a-sane-buildout-for-repoze-zope2-plone/index.html"/>
    <id>urn:uuid:24606ade-6ff9-41ca-b97e-1f6ae54bd47f</id>
    <updated>2009-06-18T00:00:00</updated>
    <summary>A Sane Buildout For repoze.zope2 + Plone
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2009/06/18
    :category: Buildout, Plone, Python, Zope

This is a follow-up to Martin Aspeli's introduction to repoze and Plone from last year
A Tale of Two Buildouts
There are two stories going on here, both of which 
Martin Aspeli recently described in great detail
 and 
Chris McDonough tackled last year
. For the purposes of this blog entry, I'll refer to the issue as the "index vs. find-links" conundrum in buildout  (find-links in buildout are equivalent to distribution_links in setuptools).
For those that want strict repeatability, using the index parameter is the clear winner. It simply forces buildout to do the right thing now and forever, by limiting what packages it can select from. For those that want functionality and don't mind the occasional egg-out-of-whack (i.e. unexpected upgrade), then using the find-links parameter can provide a "sexy" way to get decent results quickly (but may, and probably will, shoot you in the foot later).
Sexy, but Dangerous
Let's start with the sexy, but with less repeat-ability method first.  Using this method we are not specifying our own index. Therefore you are free to add any package from 
PyPI
 or 
plone.org
 as you see fit.  This is essentially why people like this method (the counter argument is that it is simple to add any additional egg you may want to your index, but we'll get to that later).
So a simple buildout using this method might look like this:
virtualenv plone; cd plone
bin/easy\_install zc.buildout
bin/buildout init
Edit buildout.cfg:
[buildout]
extends =
# Using Martin Aspeli's good-py, thanks!
    http://good-py.appspot.com/release/repoze.zope2/1.0
    http://dist.plone.org/release/3.3rc3/versions.cfg
versions = versions
find-links =
    http://dist.repoze.org/zope2/latest
    http://dist.repoze.org/zope2/dev/
    http://dist.plone.org/release/3.3rc3
parts = instance[instance]
recipe = zc.recipe.egg
dependent-scripts = true
eggs =
    repoze.zope2
    Plone
    PIL

4. bin/buildout
A few more steps are required, which we could certainly automate in
buildout, but for now I'll just list them here:
bin/mkzopeinstance
bin/addzope2user admin admin
Enumerated list start value not ordinal-1: "5" (ordinal 5)
Now, the moment we've all been waiting for… the fun part!
bin/paster serve etc/zope2.ini
Enumerated list start value not ordinal-1: "7" (ordinal 7)
You should see something like:
[aclark@alex-clarks-macbook-pro]~/Developer/plone% bin/paster serve etc/zope2.ini
2009-06-18 22:52:24 INFO Marshall libxml2-python not available. Unable to register libxml2 based marshallers.
2009-06-18 22:52:27 WARNING ZODB.FileStorage Ignoring index for
/Users/aclark/Developer/p3-repoze-2/var/Data.fsDeprecationWarning: zope.app.annotation has moved to
zope.annotation. Import of zope.app.annotation will become
unsupported in Zope 3.5
/Users/aclark/Developer/plone/eggs/zopelib-2.10.7.0-py2.4-macosx-10.5-i386.egg/zope/configuration/xmlconfig.py:323:
  __import__(arguments[0])
------
2009-06-18T22:52:24 INFO Marshall libxml2-python not available. Unable to register libxml2 based marshallers.
------
2009-06-18T22:52:27 WARNING ZODB.FileStorage Ignoring index for /Users/aclark/Developer/plone/var/Data.fs
Starting server in PID 26900.
zserver on port 8080
At this point, you should be able to login to

http://localhost:8080/manage
 and create a Plone site.
Of course, we did a sloppy job here, creating the Zope2 instance in the
root of the buildout, etc. It is possible that

plone.recipe.zope2install
 may help us in the future by supporting
repoze.zope2 instances (or maybe it does already, I didn't try).
Next up?
Boring, but Repeatable
I kid, but this is actually a very serious concern for many people, and
rightfully so. The notion that your buildout will work the same today as
it does in one year from now may be a strict requirement for your
project. If it is, we can accommodate you (I hope) with the "index"
buildout that follows. The downside is that *you* can't control what I
put in the index. However, you can certainly create your own index using
this technique.
An arguably even simpler buildout using this technique might look like
this:
virtualenv plone; cd plone
bin/easy_install zc.buildout
bin/buildout init
Edit buildout.cfg:
Enumerated list start value not ordinal-1: "0" (ordinal 0)
[buildout]
index = http://dist.plone.org/experimental/release/3.3rc3/simple/
parts = instance[instance]
recipe = zc.recipe.egg
dependent-scripts = true
eggs =
    repoze.zope2
    Plone
    PIL

4. bin/buildout

5. bin/mkzopeinstance

6. bin/addzope2user admin admin

7. bin/paster serve etc/zope2.ini
In Conclusion
Depending on what my needs are, I might choose either of these
techniques. We can also hold out for 
multi-index support in
setuptools
. That would seemingly make everyone happy. In the meantime,
I can tell you I'd definitely reach for a buildout sans custom index
first, then ask questions later (i.e. wait for bleeding toes) but that
is just me. If people find the "index" technique generally useful, I'd
be willing to support package sheperding and 
index generating with
basketweaver
. Just let me know. If it really catches on, we could
rename 
http://dist.plone.org/experimental/release/3.3rc3/
 to

http://dist.plone.org/repoze/release/3.3rc3/
. Of course, if anyone
objects to this or finds it confusing, I can just as easily remove it
(from dist.plone.org).
Special thanks to 
Chris McDonough
 and 
Martin Aspeli
 for helping me
scratch my itch!
Finally, please don't rely on any of this "in production" yet unless you
know what you are doing. I tested these techniques up to the point of
starting Zope (via paste) and adding a Plone site, nothing more!
I, however, am getting a new server next week and will be hosting this
site on 
repoze.zope2
 very shortly ;-)</summary>
  </entry>
  <entry>
    <title>Break It Down</title>
    <link href="https://blog.aclark.net/2009/04/21/a-lamp-buildout-for-wordpress-and-other-php-apps/index.html"/>
    <id>urn:uuid:132e8ec8-0c0d-4cbe-a966-a8b82de18725</id>
    <updated>2009-04-21T00:00:00</updated>
    <summary>A LAMP Buildout for Wordpress and Other PHP Apps
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2009/04/21
    :category: Buildout

Buildout all the things
A Buildout for PHP?
Having been a Plone Consultant for many years now, I find it very painful to deal with non-Python-based technologies and I often will go to great lengths to avoid it. I recently had to deploy a new PHP application on an older Linux server (RHEL3) and could not bring myself to compile the packages, search for RPMs, or do any of the mundane, boring tasks required; so I began to look for an alternative. Enter: the 
LAMP buildout
. I created and used this to deploy my client's PHP application. I hope others find it useful, both as an alternative way to deploy PHP apps, and as an example of the wide variety of things
buildout can be used to do.
It's Just That Simple?
Unfortunately, this was not the blissful experience I had hoped for.  There were some non-obvious configuration parameters that had to be dealt with. This was tedious and sometimes painful, but achieving the end result was a uniquely rewarding experience I can assure you! In fact, most of the problems had to do with the individual software components and not buildout itself, which was a pleasure to work with and one of the main reasons I am writing this blog entry. In a Plone buildout for example, in most cases, the tedious parts are handled for you and you just need to 
add the Plone egg, run buildout, and start your site
.
Break It Down
Now, on to the Buildout. It was developed and tested on Mac OS X 10.5 then deployed to RHEL3. I had a small problem on RHEL3 with the GD imaging library so I removed it (and installed it by hand in /usr/local). Other than that, things went smoothly and I deployed several PHP apps with it just for kicks, including:
Phorum
SugarCRM
WordPress
phpMyAdmin
It builds Apache, PHP, MySQL, GD, and Supervisor. Let's take a look.
First, we define the parts. For each of these, we'll do something useful
to contribute to the end result.
[buildout]
parts =
# Aspeli-style line-spacing to emphasize the functionality of each part or group of parts ;-)
    env
    grp    mysql
    apache
    gd
    php    ports
    mycnf
    mysql-bin
    mysql-admin
    mysql_install_db
    apache-conf
    php-conf# Uncomment only one of these at a time
#    phpmyadmin
#    sugarcrm
#    phorum
    wordpress    supervisor
Now that the parts are listed, the rest of the buildout must define those parts. First, we add some utilities required by this buildout.
[env]
recipe = gocept.recipe.env[grp]
recipe = collective.recipe.grp
Next, we build the core components.
[mysql]
recipe = hexagonit.recipe.cmmi
url = http://mysql.mirrors.hoobly.com/Downloads/MySQL-5.1/mysql-5.1.33.tar.gz
keep-compile-dir = true[apache]
recipe = hexagonit.recipe.cmmi
url = http://www.trieuvan.com/apache/httpd/httpd-2.2.11.tar.gz
configure-options = --enable-so
keep-compile-dir = true[gd]
recipe = hexagonit.recipe.cmmi
url = http://www.libgd.org/releases/gd-2.0.35.tar.gz
keep-compile-dir = true[php]
recipe = zc.recipe.cmmi
environment =
    PATH=${mysql:location}/bin:${env:PATH}
url = http://us2.php.net/get/php-5.2.9.tar.gz/from/this/mirror
# Beware, the new line below (i.e. '') may need to be undone.
extra_options =
  --prefix=${buildout:directory}/parts/apache/php
  --with-config-file-path=${buildout:directory}/etc/php.ini
  --with-gd=${buildout:directory}/parts/gd
  --with-apxs2=${buildout:directory}/parts/apache/bin/apxs
  --with-mysql=${mysql:location}
  --enable-mbstring
After that, some configuration. Read the comments below for more information.
# Make it easy to change the various port settings[ports]
recipe = plone.recipe.command
command =
    echo These ports are used to configure this LAMP:
    echo Supervisor: ${ports:supervisor}
    echo Apache: ${ports:apache}
    echo MySQL: ${ports:mysql}
supervisor = 9001
apache = 8080
mysql = 3306# All the mysql compile options[mycnf]
recipe = plone.recipe.command
command =
    echo
    echo These options are passed to mysqld_safe: ${mycnf:opt}
    echo
basedir=${mysql:location}
datadir=${buildout:directory}/var
pid=${mycnf:datadir}/mysql.pid
err = ${mycnf:datadir}/log/mysql.err
sock = ${mycnf:datadir}/mysql.sock
# Beware, the new line below (i.e. '') may need to be undone.
opt = --port=${ports:mysql} --pid-file=${mycnf:pid} --log-error=${mycnf:err}
--basedir=${mycnf:basedir} --datadir=${mycnf:datadir} --socket=${mycnf:sock}# Setup the mysql databases.[mysql_install_db]
recipe = plone.recipe.command
command =
    ${mysql:location}/bin/mysql_install_db --datadir=${mycnf:datadir}
    echo
    echo After starting supervisord, you may want to run:
    echo ${buildout:directory}/parts/mysql/bin/mysqladmin -u root password 'new-password'
    echo
update-command = ${mysql_install_db:command}# Generate Config files for Apache and PHP[apache-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/httpd.conf.in
output = ${buildout:directory}/etc/httpd.conf[php-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/php.ini.in
output = ${buildout:directory}/etc/php.ini# Make it easy to run mysql and mysqladmin[mysql-bin]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/mysql.in
output = ${buildout:directory}/bin/mysql[mysql-admin]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/mysqladmin.in
output = ${buildout:directory}/bin/mysqladmin
Now, the parts that download the various PHP apps.
[wordpress]
recipe = hexagonit.recipe.download
url = http://wordpress.org/latest.tar.gz
destination = ${buildout:directory}/htdocs
strip-top-level-dir = true[phpmyadmin]
recipe = hexagonit.recipe.download
url = http://prdownloads.sourceforge.net/phpmyadmin/phpMyAdmin-3.1.3.2-english.tar.bz2
destination = ${buildout:directory}/htdocs
strip-top-level-dir = true[sugarcrm]
recipe = hexagonit.recipe.download
url = http://www.sugarforge.org/frs/download.php/5252/SugarCE-5.2.0c.zip
destination = ${buildout:directory}/htdocs
strip-top-level-dir = true[phorum]
recipe = hexagonit.recipe.download
url = http://www.phorum.org/downloads/phorum-5.2.10.tar.gz
destination = ${buildout:directory}/htdocs
strip-top-level-dir = true
And the supervisor that will control everything.
[supervisor]
recipe = collective.recipe.supervisor
port = ${ports:supervisor}
serverurl = http://127.0.0.1:${ports:supervisor}
pp = ${buildout:directory}/eggs/supervisor-3.0a6-py2.4.egg/supervisor/pidproxy.py
# Beware, the new line below (i.e. '') may need to be undone.
programs =
    10 mysql ${supervisor:pp} [ ${mycnf:pid} ${mysql:location}/bin/mysqld_safe ${mycnf:opt} ]
    20 apache ${apache:location}/bin/httpd [ -c "ErrorLog /dev/stdout" -DFOREGROUND
                                             -f ${buildout:directory}/etc/httpd.conf ]
If you are interested in trying this yourself, please see: 
http://svn.aclark.net/svn/public/buildout/lamp/trunk/
 and let me know how it goes.</summary>
  </entry>
  <entry>
    <title>Is Anyone Using plone.org's New PyPI Functionality?</title>
    <link href="https://blog.aclark.net/2009/03/13/is-anyone-using-plone-orgs-new-pypi-functionality/index.html"/>
    <id>urn:uuid:0ebe05ef-69fe-4447-a5a4-a8e309b6aca9</id>
    <updated>2009-03-13T00:00:00</updated>
    <summary>Is Anyone Using plone.org's New PyPI Functionality?
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2009/03/13
    :category: Plone, Python

python setup.py upload -r plone.org
Lots of exciting things are happening with Plone.org!
Calvin Hendryx-Parker
 and 
Six Feet Up
 are working on moving *.plone.org to one of their powerful new servers (with some exceptions, most notably {svn,dev}.plone.org will remain in place, as I understand it)!
Alex Limi
 and 
company
 are working on deploying a new look and feel using a new-fangled technology called xdv (a variant of Deliverance).
I am removing 
kinks
 that have been lingering after the recent upgrade (in theory ;-).
This blog entry is both a "call to arms" to everyone involved in helping, and a message to everyone waiting patiently that we haven't forgotten about you! :-D
In particular, I'd like to hear from any early adopters of the new 
http://plone.org/products
section. You can read about how to use the new PyPI functionality here, if you haven't already: 
http://pypi.python.org/pypi/collective.dist/0.2.2
. In my little "test" product, I found it quite useful: 
http://plone.org/products/Products.todo/.
So if you are using it, I'd definitely like to hear your experiences. Or if not, please give it a try!</summary>
  </entry>
  <entry>
    <title>Nirvana Old Age Interrupted</title>
    <link href="https://blog.aclark.net/2009/02/07/nirvana-old-age-interrupted/index.html"/>
    <id>urn:uuid:50fa40c5-b9ac-4a47-b5bb-bfc77d6a9571</id>
    <updated>2009-02-07T00:00:00</updated>
    <summary>Nirvana Old Age Interrupted
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2009/02/07
    :category: Music

<div style="text-align: center">
    <iframe width="420" height="315" src="https://www.youtube.com/embed/ec200NlbTA4" frameborder="0" allowfullscreen></iframe>
</div></summary>
  </entry>
  <entry>
    <title>Help Eric Steele Go To Baarn</title>
    <link href="https://blog.aclark.net/2009/01/23/help-esteele-go-to-baarn/index.html"/>
    <id>urn:uuid:9efd4c97-e9b5-4797-a649-d4f26e4c79e4</id>
    <updated>2009-01-23T00:00:00</updated>
    <summary>Help Eric Steele Go To Baarn
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2009/01/23
    :category: Plone

Because I was there once too
A few years back, I was 
invited to the Baarn UI Sprint 2007.
 This was a huge turning point for me and Plone. Having just attended the 
annual conference in Seattle
, I was raring to contribute. And in getting invited, I felt like a Catholic getting invited to the Vatican to hang out with the Pope (well 1/2 the Pope at least, aka 
Limi
 ;-)). You cannot beat the awesomeness of the Plone community and the fact that if you give something to it, you will get it back ten-fold in:
Knowledge and skills (You can acquire a ton of technical skill by learning the Plone).
Kindness from strangers (People will help you do things, like attend a development sprint in another country, amazing).
Employment for life (There is more Plone work than there are Plone developers, and I don't see this changing anytime soon).
Which brings me to the subject at hand. One of our own, Eric Steele (author of the amazing development tool 
Gloworm
, and member of the extremely Plone friendly web group called 
WebLion
) needs your help!  Last I spoke with Eric he had reached 60% of his desired goal, so let's help him get to the finish line (by Wednesday).
You can (and probably should, if you can afford it ;-) donate a little something here: 
http://www.theartofbeingstill.com/help-me-get-to-baarn
I can imagine only good things to come for Plone as a result of Eric attending this event (in fact, Weblion is funding the trip, donations are for food and incidentals if I recall correctly).
So please help! :-D</summary>
  </entry>
  <entry>
    <title>Getting Excited About Plone as Eggs</title>
    <link href="https://blog.aclark.net/2008/12/15/getting-excited-about-plone-as-eggs/index.html"/>
    <id>urn:uuid:cb1e8be0-ad5e-448e-8956-aac454f5f8af</id>
    <updated>2008-12-15T00:00:00</updated>
    <summary>Getting Excited About Plone as Eggs
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2008/12/15
    :category: Buildout, Plone, Python

Updated for 4.x
I'm really excited about this because it greatly simplifies the development and deployment story for 
Plone
. For example you can now create a Plone 
buildout.cfg
 file like this:
[buildout]
extends = http://dist.plone.org/release/4.0a1/versions.cfgversions = versions
find-links = http://dist.plone.org/thirdparty/PILwoTk-1.1.6.4.tar.gz
parts = instance

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
eggs =
    PILwoTk
    Plone
Thanks framework team and core developers for this impressive release.</summary>
  </entry>
  <entry>
    <title>ZPUGDC Meeting Tonight</title>
    <link href="https://blog.aclark.net/2008/12/02/zpugdc-meeting-tonight/index.html"/>
    <id>urn:uuid:88277b65-32bc-440d-9a31-1feb9ce41873</id>
    <updated>2008-12-02T00:00:00</updated>
    <summary>ZPUGDC Meeting Tonight
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2008/12/02
    :category: Python, Zope

ZPUGDC & DC Python Meetup: December Meeting
http://python-groups.blogspot.com/2008/12/zpugdc-dc-python-meetup-december.html</summary>
  </entry>
  <entry>
    <title>Naked Plone Theme</title>
    <link href="https://blog.aclark.net/2008/11/19/naked-plone-theme/index.html"/>
    <id>urn:uuid:aa027ab1-d222-44e9-a3cd-27add136429f</id>
    <updated>2008-11-19T00:00:00</updated>
    <summary>Naked Plone Theme
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2008/11/19
    :category: Plone, Python

Products.naked_plone
I've needed this for some time, but I'm finally getting around to 
shipping it
.
In addition to making it easy to disable default Plone styles, this add-on provides an "Advanced Setup" site action. The action is disabled by default, but you can enable it in 
portal_actions -> site_actions
. It adds a "placeful" 
string:manage_main
 link so you can access the ZMI wherever you happen to be on the site.</summary>
  </entry>
  <entry>
    <title>Products.todo 0.1</title>
    <link href="https://blog.aclark.net/2008/11/13/products-todo-0-1/index.html"/>
    <id>urn:uuid:53f1a59d-579d-4162-9f8e-e5f95b424bd9</id>
    <updated>2008-11-13T00:00:00</updated>
    <summary>Products.todo 0.1
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2008/11/13
    :category: Plone

A project to jump start my return to Plone development.
I needed a project to jump start my return to Plone after spending months organizing 
Plone Conference 2008
, and wanted to see an add-on's development through from start to finish including:
Generating boilerplate Buildout and add-on code with Paster.
Develop some simple functionality for Plone.
Releasing to pypi.
Repeat steps 2 and 3 as needed or desired.
I also wanted to:
Include the 
buildout.cfg
 file in the add-on so I could easily add buildbot.
Write some tests for this code so I could practice TDD.
Release to new.plone.org so we can finish the plone.org upgrade.
I'm off to a good start. Next steps:
Get some feedback.
Edit my 
.pypirc
 and add new.plone.org and make a release.
Add a buildbot.
Write some tests.</summary>
  </entry>
  <entry>
    <title>repoze.bfg Tonight</title>
    <link href="https://blog.aclark.net/2008/09/02/repoze-bfg-tonight-ftw/index.html"/>
    <id>urn:uuid:4600df31-48e6-488e-9352-4c110f38548a</id>
    <updated>2008-09-02T00:00:00</updated>
    <summary>repoze.bfg
 Tonight
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2008/09/02
    :category: Python, Zope

Tonight ex-Zope Corporation developer Chris McDonough unveils his BFG
From the 
docs
, BFG is:
is a 
Python web application framework
.
is inspired by Zope’s publisher, though it is less ambitious in scope.
relies heavily on Zope libraries and WSGI.
Familiarity
: As web developers, we’ve become accustomed to working in very particular ways (primarily using Zope 2) over the years. This framework is a canonization of practices that “fit our brains”.</summary>
  </entry>
  <entry>
    <title>collective.recipe.supervisor: Thank You</title>
    <link href="https://blog.aclark.net/2008/08/10/re-collective-recipe-supervisor-thank-you/index.html"/>
    <id>urn:uuid:743e208b-7d1b-4af2-9965-34337e32712f</id>
    <updated>2008-08-10T00:00:00</updated>
    <summary>collective.recipe.supervisor
: Thank You
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2008/08/10
    :category: Buildout, Plone

Now even easier to use Supervisor
Since I 
last wrote about supervisor
 it's become easier to use thanks to 
collective.recipe.supervisor
. Now it's as simple as editing your 
buildout.cfg
.
Add a section for Supervisor:
[buildout]
    parts =
        ...
        supervisor
Create the section:
[supervisor]
recipe = collective.recipe.supervisor
programs =
    10 zeo ${zeo:location}/bin/runzeo ${zeo:location}
    20 instance ${instance:location}/bin/runzope ${instance:location} true
Run Buildout:
...
Installing supervisor.
Getting distribution for 'supervisor'.
Got supervisor 3.0a6.
Getting distribution for 'elementtree>=1.2.6,<1.2.7'.
zip_safe flag not set; analyzing archive contents...
Got elementtree 1.2.6-20050316.
Getting distribution for 'meld3>=0.6.4'.
zip_safe flag not set; analyzing archive contents...
Got meld3 0.6.5.
Getting distribution for 'medusa>=0.5.4'.
zip_safe flag not set; analyzing archive contents...
Got medusa 0.5.4.
Generated script '/Users/aclark/Developer/supervisor-recipe-test/bin/supervisord'.
Generated script '/Users/aclark/Developer/supervisor-recipe-test/bin/memmon'.
Generated script '/Users/aclark/Developer/supervisor-recipe-test/bin/supervisorctl'.
Start Supervisor in the foreground:
$ bin/supervisord -e debug -n
2008-08-27 06:40:34,805 INFO Increased RLIMIT_NOFILE limit to 1024
2008-08-27 06:40:35,036 INFO RPC interface 'supervisor' initialized
2008-08-27 06:40:35,036 WARN cElementTree not installed,
    using slower XML parser for XML-RPC
2008-08-27 06:40:35,036 CRIT Server 'inet_http_server' running without
    any HTTP authentication checking
2008-08-27 06:40:35,037 INFO supervisord started with pid 99684
2008-08-27 06:40:36,041 INFO spawned: 'zeo' with pid 99686
2008-08-27 06:40:36,049 INFO spawned: 'instance' with pid 99687
2008-08-27 06:40:37,051 INFO success: zeo entered RUNNING state,
    process has stayed up for > than 1 seconds (startsecs)
2008-08-27 06:40:37,051 INFO success: instance entered RUNNING state,
    process has stayed up for > than 1 seconds (startsecs)
2008-08-27 06:40:41,574 DEBG 'instance' stdout output:
2008-08-27 06:40:41 INFO ZServer HTTP server started at Wed Aug 27 06:40:41 2008
    Hostname: localhost
    Port: 8080...2008-08-27 06:41:28,396 DEBG 'instance' stdout output:
2008-08-27 06:41:28 INFO Application New disk product detected,
    determining if we need to fix up any ZClasses.2008-08-27 06:41:28,452 DEBG 'instance' stdout output:
2008-08-27 06:41:28 INFO Zope Ready to handle requests
Start Supervisor in the background:
bin/supervisord
Get the status:
$ supervisorctl status
instance                         RUNNING    pid 99889, uptime 0:00:04
zeo                              RUNNING    pid 99888, uptime 0:00:04
Start/stop Zope/ZEO:
$ bin/supervisorctl stop instance
instance: stopped$ bin/supervisorctl stop zeo
zeo: stopped$ bin/supervisorctl start zeo
zeo: started$ bin/supervisorctl start instance
instance: started$ bin/supervisorctl stop all
zeo: stopped
instance: stopped$ bin/supervisorctl start  all
zeo: startedinstance: started
Thanks 
Mustapha Benali, Author & Hanno Schlichting, Contributor
.</summary>
  </entry>
  <entry>
    <title>Plone Conference 2008: Please Register</title>
    <link href="https://blog.aclark.net/2008/07/01/plone-conference-2008-please-register-for-an-early-bird-admission-today/index.html"/>
    <id>urn:uuid:d48555bb-2470-4af1-920d-ea767a14c21e</id>
    <updated>2008-07-01T00:00:00</updated>
    <summary>Plone Conference 2008: Please Register
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2008/07/01
    :category: Plone

Join 300-400 of your closest friends for a 7-day party
http://ploneconf2008.eventbrite.com/
Organizing a 
Plone Conference
 is a lot like planning to invite 300-400 of your closest friends over for a 7-day long party, or, at least, it feels that way to me. I'm really looking forward to seeing everyone in DC in just a few short months, and I'm very excited about all the possibilities. From the pre-conference training, to the post conference sprint, to all the good food/drink/people/places to enjoy in between. This promises to be one of the biggest and best Plone Conferences ever.
To that end, I'd like to invite everyone to participate in the early bird registration now open at: 
http://ploneconf2008.eventbrite.com
 and I encourage everyone to register right now. We need the support of everyone in the Plone community to make this conference a success.
From spreading the word, to purchasing tickets, to sponsoring the conference itself, if you are reading this, you can help. Securing early bird registrations is a key part of the planning process; it allows us to move forward to the next phase.
And finally, a huge thanks to everyone for your support. I continue to be amazed by the spirit of the community, and I really appreciate the opportunity to work on things like 
Plone Conference 2008
 and upgrading plone.org (which I will have more information about soon, but until then, please poke around on: 
http://new.plone.org/
 or check out 
Tarek's most recent blog entry
 or Jens' most recent mail to the website list: 
http://www.nabble.com/plone.org-buildout-refactored-to18266816s6747.html
. We have scheduled July 19th as the tentative "go live" date.)
So without further ado, please head over to 
http://ploneconf2008.eventbrite.com
 to secure your place at the conference, and help the planning team move forward. See you all in DC!</summary>
  </entry>
  <entry>
    <title>3. Add CSS (Navigate to /portal_skins/plone_styles/ploneCustom.css and customize)</title>
    <link href="https://blog.aclark.net/2008/06/02/placeful-theming/index.html"/>
    <id>urn:uuid:eec05b2a-028d-4f55-971a-871e23b16e67</id>
    <updated>2008-06-02T00:00:00</updated>
    <summary>Placeful Theming
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2008/06/02
    :category: Plone, Python

For some themed location /foo/bar, you want "bar" and everything below it to look different than "foo".
I had to do a bit of placeful theming lately and I thought I would share the techniques I used (thanks davisagli, jonbaldievieso, vedawms). Let's say you have a Plone 3 site, and for some location /foo/bar/baz, you want 'baz' and everything below it to look different. I made this change through the web because I was in a hurry, but the same can be done in filesystem code.
The steps are:
1. Override getSectionFromURL (navigate to portal_skins/plone_scripts/getSectionFromURL and customize)
Normally, this bit of code returns the section id for whatever section you are in. So if your site has three top level folders A, B, C, getSectionURL returns section-A when you are inside of A, section-B when you are inside of B, and so on. However, when you are inside of a sub-section, e.g. /A/news-items-folder, it *still* returns the section id, in this case section-A. The override makes getSectionURL return the sub-section, e.g. /A/news-items-folder, or /foo/bar/baz.
# Courtesy of jonb at onenw.org
# getSectionFromURLcontentPath = context.portal_url.getRelativeContentPath(context)
if not contentPath:
    return None
else:
    s = ''
    sectionId = ''
    for pathItem in contentPath:
        sectionId += pathItem + '-'
        s += 'section-' + sectionId[:-1] + ' '
        return s[:-1]
2. Override plone.logo (navigate to /portal_view_customizations/zope.interface.interface-plone.logo and customize)
For some reason (good or not, I don't know) Plone includes an image tag in the html code it uses to generate the Plone logo. This means that it will always output something like:
img src="logo.jpg"
which is a problem if you want to placefully replace the logo because there is no easy way to do it (perhaps you could use some trick to return a different image file with the same file name).
Plone ships with:
<a metal:define-macro="portal_logo" id="portal-logo" accesskey="1" tal:attributes="href view/navigation_root_url" i18n:domain="plone">
    <img src="logo.jpg" alt="" tal:replace="structure view/logo_tag" /></a>
Replace that with:
<div metal:define-macro="portal_logo" id="portal-logo"><a accesskey="1" tal:attributes="href view/navigation_root_url" i18n:domain="plone"></a></div>
3. Add CSS (Navigate to /portal_skins/plone_styles/ploneCustom.css and customize)
Next, add in some CSS to make use of the previous two changes:
body.section-foo-bar-baz { background-image: url(gradient.png);}.section-foo-bar-baz
#portal-globalnav li a { border: 0px; background: #0066CC; color: white; font-size: 110%; font-face: bold;}.section-foo-bar-baz
#portal-globalnav { background: #0066CC; padding: 0.25em;}.section-foo-bar-baz
#portal-breadcrumbs,.section-foo-bar-baz #portal-personaltools { background: white;}.section-foo-bar-baz
#portal-top { background: white;}.section-foo-bar-baz
#portal-logo { margin: 1em; background-image: url(ama_logo.gif); background-repeat: no-repeat;}.section-foo-bar-baz
#visual-portal-wrapper { background: white; margin: auto; width: 883px; position: relative;}.section-foo-bar-baz
body { background-image: url(gradient.png); background-repeat: repeat;}
#portal-logo { margin: 1em; background-image: url(logo.jpg); background-repeat: no-repeat;}
#portal-logo a { display: block; width: 650px; height: 80px;}
I hope this helps someone get started with placeful theming.</summary>
  </entry>
  <entry>
    <title>Plone.org Upgrade Remote Sprint</title>
    <link href="https://blog.aclark.net/2008/05/22/plone-org-upgrade-remote-sprint/index.html"/>
    <id>urn:uuid:b1073475-caa1-490a-9fb3-8f992a91fb37</id>
    <updated>2008-05-22T00:00:00</updated>
    <summary>Plone.org Upgrade Remote Sprint
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2008/05/22
    :category: Plone

Join us on IRC
Join us this Saturday in 
irc://irc.freenode.net#PxC
 at 4:00AM EDT to work on Plone.org upgrade issues, including:
Deploying the latest PloneSoftwareCenter code to new.plone.org and testing 
collective.dist
 against new.plone.org/products.
Develop and test collective.psc.mirroring. This is the PloneSoftwareCenter module responsible for copying uploads to dist.plone.org.
Develop and test 
collective.psc.blobstorage
 and 
collective.psc.externalstorage
 and collective.psc.filestorage (which does not exist yet). These are the modules responsible for implementing pluggable storage in PloneSoftwareCenter.</summary>
  </entry>
  <entry>
    <title>Supervisor Rocks</title>
    <link href="https://blog.aclark.net/2008/05/15/supervisor-rocks/index.html"/>
    <id>urn:uuid:bf2a6ccc-c4c0-4ec1-bdcd-9473560b8b32</id>
    <updated>2008-05-15T00:00:00</updated>
    <summary>Supervisor Rocks
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2008/05/15
    :category: Buildout, Plone

This is a reiteration of Carlos de la Guardia's recent post on the subject
.
You should probably be using 
Supervisor
 because:
Starting and stopping Zope and ZEO separately is no fun.
Using Supervisor is easy and fun.
Add a new section your 
buildout.cfg
 file:
parts =
    ...
    supervisor
    ...

[supervisor]
recipe = zc.recipe.egg
egg = supervisor
Create a configuration file:
[inet_http_server]
port=127.0.0.1:9999
#username=admin
#password=admin

[supervisord]
logfile=%(here)s/../var/log/supervisord.log
logfile_maxbytes=50MB
logfile_backups=10
loglevel=info
pidfile=%(here)s/../var/supervisord.pidnodaemon=false

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=http://127.0.0.1:9999

[program:zeo]
command = %(here)s/../parts/zeo/bin/runzeo
priority = 10

[program:zope]
command = %(here)s/../parts/instance/bin/runzope
priority = 20
redirect_stderr = true
Now run Buildout:
bin/buildout
and start Supervisor:
bin/supervisord
Then use 
supervisorctl
 to start and stop your Zope and ZEO at the same time:
bin/supervisorctl start all
bin/supervisorctl stop all
Stop Supervisor with:
bin/supervisorctl shutdown
Thanks Chris McDonough of 
Agendaless Consulting
 and Mike Naberezny of 
Maintainable Software,
 plus 
contributors
 for creating and maintaining Supervisor.</summary>
  </entry>
  <entry>
    <title>Plone.org Upgrade Update</title>
    <link href="https://blog.aclark.net/2008/05/01/plone-org-upgrade-update/index.html"/>
    <id>urn:uuid:b0da8fbb-643a-41fd-a6d1-950e0cccab6a</id>
    <updated>2008-05-01T00:00:00</updated>
    <summary>Plone.org Upgrade Update
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2008/05/01
    :category: Plone

Thank You
Thanks again to everyone who contributed to my travel fund, I really appreciate it. Being able to work closely with Tarek Ziadé and Matthew Wilkes on PloneSoftwareCenter and PloneOrg was amazing, productive, and fun. Of course being in the company of all the sprinters was a pleasure, and thank you Christophe for the hospitality.
Matthew and Tarek worked on getting PloneSoftwareCenter ready to host Python packages.
I worked on creating and configuring the new site instance.
Steve McMahon and I converted the remaining dependencies from Zope products to Python packages.</summary>
  </entry>
  <entry>
    <title>Help Me Upgrade plone.org</title>
    <link href="https://blog.aclark.net/2008/04/18/help-me-upgrade-plone-org/index.html"/>
    <id>urn:uuid:84a92f93-a4f7-4095-bd1c-e9d67c599946</id>
    <updated>2008-04-18T00:00:00</updated>
    <summary>Help Me Upgrade plone.org
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2008/04/18
    :category: Buildout, Plone, Python

Because plone.org should run the latest Plone
You may be wondering why plone.org is not running the latest version of Plone. Well wonder no more! By the end of this month, it will be. I have been 
working on
the various bits and pieces needed to upgrade for months, including:
Testing the "live" Data.fs against the latest release of Plone.
Converting old-style Zope 2 Products to eggs.
Rallying the troops to contribute as needed.
Becoming a plone.org admin so I can drive the process myself.
and much, much more!
And I can promise you that tremendous progress will be made at the Paris sprint next week, including:
Finalization of the dist-utils enabled PloneSoftwareCenter that will be used.
Adding blob support to PloneSoftwareCenter (Witsch, can you help?)
Migrating all PSCFile objects from ExternalStorage to blob.
So please, if you would like to see an upgraded plone.org as much as I would, please consider making a generous donation to my travel fund. I'd like to raise around $1000 to get reimbursed for my airfare only; I will be sleeping on a donated couch. The suggested donation amount is $50-100, but any amount is welcome. Thank you all very much!!! And thanks to everyone that has helped with the upgrade so far including but not limited to: Limi, Wiggy, SteveM, Tarek, Maurits, Newbery, Jens, Witsch, MattBowen!
Lastly, I promise to:
Cut the fundraiser off as soon as I reach my goal, and
Report back with results by the end of the month.
Now without further ado, please donate-away!</summary>
  </entry>
  <entry>
    <title>NASA Story Slashdotted</title>
    <link href="https://blog.aclark.net/2008/04/12/nasa-story-slashdotted/index.html"/>
    <id>urn:uuid:722b08c1-6999-41cb-9b10-e532aa938109</id>
    <updated>2008-04-12T00:00:00</updated>
    <summary>NASA Story Slashdotted
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2008/04/12
    :category: Plone

The Slashdot effect
My submission to Slashdot was published!
http://science.slashdot.org/science/08/04/12/0010230.shtml</summary>
  </entry>
  <entry>
    <title>NASA Launches New Science Web Site Powered By Plone</title>
    <link href="https://blog.aclark.net/2008/04/10/nasa-starts-new-science-web-site-powered-by-plone/index.html"/>
    <id>urn:uuid:fda88b47-649f-4b00-aba1-2bce9c67454d</id>
    <updated>2008-04-10T00:00:00</updated>
    <summary>NASA Launches New Science Web Site Powered By Plone
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2008/04/10
    :category: Plone

Another high-profile Plone site
Last night's launch of 
http://nasascience.nasa.gov
 marks the launch of another high-profile Plone site. Congratulations to NASA and the website development team!</summary>
  </entry>
  <entry>
    <title>Take Back The Tap</title>
    <link href="https://blog.aclark.net/2008/03/17/take-back-the-tap/index.html"/>
    <id>urn:uuid:feed9695-f581-4bdf-a3a0-9a555864dedc</id>
    <updated>2008-03-17T00:00:00</updated>
    <summary>Take Back The Tap
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2008/03/17
    :category: Plone, Python

Promote tap water over bottled water
ACLARK.NET, LLC
 is proud to announce 
http://www.takebackthetap.org
.
The following software was used to deploy this site:
Plone 3.0.6
PloneFormGen 1.2.1
RedirectionTool 1.2
qSEOptimizer 1.0.1
webcouturier.dropdownmenu 1.1.2</summary>
  </entry>
  <entry>
    <title>UNIX Tips For The Elderly</title>
    <link href="https://blog.aclark.net/2008/03/06/unix-tips-for-the-elderly/index.html"/>
    <id>urn:uuid:19689975-d316-4e0a-a14a-e5a2a1622824</id>
    <updated>2008-03-06T00:00:00</updated>
    <summary>UNIX Tips For The Elderly
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2008/03/06
    :category: Misc

<style>
pre.prompt:before { content: '$ ' }
</style>
I often want to do something to a bunch of files on the filesystem.
E.g.
<pre class="prompt">
find Music/ | xargs -J % echo 'Do something to ' %
</pre>
The problem is that sometimes the filenames have spaces in them which will cause:
<pre class="prompt">
find Music/ | xargs -J % 'Do something to ' %
</pre>
xargs: unterminated quote
Useless. The best fix I've managed to come up with which I couldn't recall hence the blog post, is to replace the beginning and end of the line with quotes to make the shell happy, e.g.
<pre class="prompt">
find Music/ | sed -e 's/^/"/' -e 's/$/"/'
</pre>
"Music//iTunes/iTunes Music/Yael Naïm/Yael Naïm/03 New Soul.m4a"
So I can do things like:
<pre class="prompt">
find Music/ | sed 's/^/"/' | sed 's/$/"/' | xargs -J % ls -d %
</pre>
Music//iTunes/iTunes Music/Yael Naïm/Yael Naïm/03 New Soul.m4a
or
<pre class="prompt">
find Music/ | sed 's/^/"/' | sed 's/$/"/' | xargs -J % file %
</pre>
Music//iTunes/iTunes Music/Yael Naïm/Yael Naïm/03 New Soul.m4a: ISO Media, MPEG v4 system, iTunes AAC-LC</summary>
  </entry>
  <entry>
    <title>Fix for Spaces in Mac OS X Leopard</title>
    <link href="https://blog.aclark.net/2008/01/01/spaces-spaces-spaces-fix-for-spaces-app-in-mac-os-x-leopard/index.html"/>
    <id>urn:uuid:7042a560-b80e-495b-a102-0867955e1a33</id>
    <updated>2008-01-01T00:00:00</updated>
    <summary>Fix for Spaces in Mac OS X Leopard
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2008/01/01
    :category: Misc

Spaces.. Spaces.. Spaces.. App
I primarily develop on Mac OS X and immediately install updates when they are released, including major version upgrades like Leopard. Overall I have been very happy with Leopard but there is one feature I don't like: the automatic window switching functionality in Spaces. However with Spaces.. Spaces.. Spaces.. I can switch to a new space and open a new Terminal window without being automatically taken to another space running another Terminal. The only catch is the Terminal application has to be in focus else the old "wrong" behavior still applies.</summary>
  </entry>
  <entry>
    <title>Buildout Recipe Tip: hexagonit.recipe.download</title>
    <link href="https://blog.aclark.net/2007/11/28/zcbuildout-recipe-tip-hexagonitrecipedownload-ftw-for-the-win/index.html"/>
    <id>urn:uuid:9498029e-f5a0-4319-825d-b6fa813acf69</id>
    <updated>2007-11-28T00:00:00</updated>
    <summary>Buildout Recipe Tip: 
hexagonit.recipe.download
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2007/11/28
    :category: Buildout, Plone, Python

How to handle difficult old-style add-ons.
Sometimes an "old-style" add-on is distributed as 
foo.tar.gz
 and extracts to 
foo/
, but the package is called 
bar
. This can be a problem when using the 
plone.recipe.productdistros
 recipe because when 
bar
 is extracted to 
parts/productdistros/foo
 it will not work.
Fortunately there is 
hexagonit.recipe.download
, which allows you to specify the destination. For example, 
ZNagios
 (an add-on that integrates Zope with Nagios) is available as a tarball here:
http://svn.gocept.com/viewcvs/ZNagios/trunk.tar.gz?view=tar
If we use productdistros, we end up with ZNagios installed in 
parts/productdistros/trunk
. But if we use 
hexagonit.recipe.download
 we can control the destination.
[buildout]
parts = znagios

[znagios]
recipe = hexagonit.recipe.download
url = http://svn.gocept.com/viewcvs/ZNagios/trunk.tar.gz?view=tar
destination = products/ZNagios
strip-top-level-dir = True
After running Buildout you should have the following in your 
products/
 directory:
/products/ZNagios
/products/ZNagios/COPYRIGHT.txt
/products/ZNagios/LICENSE.txt
/products/ZNagios/README.txt
/products/ZNagios/__init__.py
/products/ZNagios/check_zope.py
/products/ZNagios/munin_client.py
/products/ZNagios/version.txt
/products/ZNagios/zeo_munin.py
/products/ZNagios/zope.cfg</summary>
  </entry>
  <entry>
    <title>Zope User Groups</title>
    <link href="https://blog.aclark.net/2007/11/20/usergroup-a-palooza/index.html"/>
    <id>urn:uuid:77c42dbe-fd6e-4198-8c0f-55c1c02a6323</id>
    <updated>2007-11-20T00:00:00</updated>
    <summary>Zope User Groups
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2007/11/20
    :category: Python, Zope

Updated Zope User Group Information
Today I updated 
http://www.zope.org/Resources/UserGroups
. Most of the information came from 
Chris Calloway
. Now it's 
better than the old one
 and should be easier to maintain.</summary>
  </entry>
  <entry>
    <title>Repoze Meetups</title>
    <link href="https://blog.aclark.net/2007/10/28/repoze-meetups/index.html"/>
    <id>urn:uuid:a43e33c1-a9c3-42a6-9c14-a14656a46a7b</id>
    <updated>2007-10-28T00:00:00</updated>
    <summary>Repoze Meetups
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2007/10/28
    :category: Python, Zope

Plumbing Zope into the WSGI Pipeline
As Paul Everitt 
recently
 
mentioned
, the 
dudes
 are back. Three self-described graybeards doing what they love: Zope. But this is not your father's Zope. This is Repoze, which integrates Zope technologies with WSGI and reusable Python middleware. 
One of the dudes
 will be delivering the first of a two part presentation on 
Repoze
 tonight in DC. Next month, he'll be joined by 
the other dude
 and possibly Paul Everitt himself.</summary>
  </entry>
  <entry>
    <title>My Plone Days October 2007</title>
    <link href="https://blog.aclark.net/2007/10/18/my-plone-days-october-2007/index.html"/>
    <id>urn:uuid:dfce0761-9004-48b5-9423-c4baf7761928</id>
    <updated>2007-10-18T00:00:00</updated>
    <summary>My Plone Days October 2007
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2007/10/18
    :category: Plone

A commitment to the 10% Plone Manifesto.
My focus will be 
PloneSoftwareCenter (PSC)
. After receiving a little prodding on IRC, I am declaring myself the product owner; I'll spend two days getting it ready to ship with Plone 3 compatibility.</summary>
  </entry>
  <entry>
    <title>Is This Thing On?</title>
    <link href="https://blog.aclark.net/2007/10/17/is-this-thing-on/index.html"/>
    <id>urn:uuid:2aba0537-2a53-4a13-964f-08dae629879e</id>
    <updated>2007-10-17T00:00:00</updated>
    <summary>Is This Thing On?
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2007/10/17
    :category: Plone

Sorry about the duplicate posts.
… because it is showing up on 
planet
! Sorry about the duplicates. I have recreated my blog using just Plone (no add-ons) and I didn't realize syndication was turned on.</summary>
  </entry>
  <entry>
    <title>Help Improve Plone's API Documentation</title>
    <link href="https://blog.aclark.net/2007/06/25/help-improve-plones-api-documentation/index.html"/>
    <id>urn:uuid:0b7f6b07-1b97-4a12-89be-7e712e874c7f</id>
    <updated>2007-06-25T00:00:00</updated>
    <summary>Help Improve Plone's API Documentation
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2007/06/25
    :category: Plone, Python

Sponsor my trip to the Plone "DocComm" Sprint in California
I'm travelling from Washington, DC, USA to Mountain View, CA, USA June 26 - 29 to participate in the 2007 
Plone DocComm Sprint
. My main focus will be updating 
Plone's online API documentation
. If you are interested in seeing this done and would like to help, please consider making a donation to help offset the cost of my airfare. In return, I will create and upload API documentation for:
Plone-2.5.3
Archetypes-1.4.4
CMF-1.6.4
and:
Plone-3.0
Archetypes-1.5.0
CMF-2.1.0
I plan to use either 
Epydoc
 or 
Pudge
, suggestions welcome.</summary>
  </entry>
  <entry>
    <title>First Post</title>
    <link href="https://blog.aclark.net/2007/03/16/first-post/index.html"/>
    <id>urn:uuid:07301907-abc6-423d-ba05-d7433a9e05e8</id>
    <updated>2007-03-16T00:00:00</updated>
    <summary>First Post
No directive entry for "post" in module "docutils.parsers.rst.languages.en".
Trying "post" as canonical directive name.
Unknown directive type "post".
.. post:: 2007/03/16
    :category: Buildout, Plone, Python, Zope

I have decided to start a blog
Why? To show Plone can be used for blogging, but also:
I have been reading a lot of 
Plone blogs
 lately and they have inspired me to write my own.
I want to interact with other Plone users.
I want to use new technology.
To that end, this post is about my 
build tools
. But first I'll note the current, likely better, alternatives:
Buildout
Buildit
Instance Manager
I used Buildout for the first time at the 
Baarn UI Sprint 2007
 and I've also used Chris McDonough's Buildit. There are even more to choose from, but for now I enjoy typing:
newzope test-site ProductA ProductB ProductC
and having a working instance a few seconds later with Product{A,B,C} installed.</summary>
  </entry>
</feed>
